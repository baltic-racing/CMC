
CMC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00001256  000012ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001256  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003c  00800104  00800104  000012ee  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012ee  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001320  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000138  00000000  00000000  00001360  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000137d  00000000  00000000  00001498  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e49  00000000  00000000  00002815  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d01  00000000  00000000  0000365e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000384  00000000  00000000  00004360  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000086d  00000000  00000000  000046e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000669  00000000  00000000  00004f51  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000055ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	af c6       	rjmp	.+3422   	; 0xd90 <__vector_12>
      32:	00 00       	nop
      34:	4d c0       	rjmp	.+154    	; 0xd0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	1a c4       	rjmp	.+2100   	; 0x876 <__vector_16>
      42:	00 00       	nop
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	43 c0       	rjmp	.+134    	; 0xd0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	41 c0       	rjmp	.+130    	; 0xd0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	3d c0       	rjmp	.+122    	; 0xd0 <__bad_interrupt>
      56:	00 00       	nop
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	39 c0       	rjmp	.+114    	; 0xd0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	33 c0       	rjmp	.+102    	; 0xd0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	31 c0       	rjmp	.+98     	; 0xd0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c0       	rjmp	.+94     	; 0xd0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c0       	rjmp	.+90     	; 0xd0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c0       	rjmp	.+86     	; 0xd0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c0       	rjmp	.+82     	; 0xd0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c0       	rjmp	.+78     	; 0xd0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c0       	rjmp	.+74     	; 0xd0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c0       	rjmp	.+70     	; 0xd0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c0       	rjmp	.+66     	; 0xd0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	1f c0       	rjmp	.+62     	; 0xd0 <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e6 e5       	ldi	r30, 0x56	; 86
      a8:	f2 e1       	ldi	r31, 0x12	; 18
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	a4 30       	cpi	r26, 0x04	; 4
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	21 e0       	ldi	r18, 0x01	; 1
      bc:	a4 e0       	ldi	r26, 0x04	; 4
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a0 34       	cpi	r26, 0x40	; 64
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	f5 d2       	rcall	.+1514   	; 0x6b6 <main>
      cc:	0c 94 29 09 	jmp	0x1252	; 0x1252 <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <adc_config>:

#include "adc_functions.h"

uint16_t adc_value;

void adc_config(){
      d2:	cf 93       	push	r28
      d4:	df 93       	push	r29
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
	
	
	// AREF = AVcc
	//and PA0 as input defined
	ADMUX = (1<<REFS0);
      da:	8c e7       	ldi	r24, 0x7C	; 124
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	20 e4       	ldi	r18, 0x40	; 64
      e0:	fc 01       	movw	r30, r24
      e2:	20 83       	st	Z, r18
	// ADEN enabes ADC
	// ADC prescaler 16
	// 16000000/16 = 1000000
	ADCSRA = (1<<ADEN) | (1<<ADPS2);
      e4:	8a e7       	ldi	r24, 0x7A	; 122
      e6:	90 e0       	ldi	r25, 0x00	; 0
      e8:	24 e8       	ldi	r18, 0x84	; 132
      ea:	fc 01       	movw	r30, r24
      ec:	20 83       	st	Z, r18
	//start first conversation
	ADCSRA |= (1<<ADSC);
      ee:	8a e7       	ldi	r24, 0x7A	; 122
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	2a e7       	ldi	r18, 0x7A	; 122
      f4:	30 e0       	ldi	r19, 0x00	; 0
      f6:	f9 01       	movw	r30, r18
      f8:	20 81       	ld	r18, Z
      fa:	20 64       	ori	r18, 0x40	; 64
      fc:	fc 01       	movw	r30, r24
      fe:	20 83       	st	Z, r18
	
}
     100:	00 00       	nop
     102:	df 91       	pop	r29
     104:	cf 91       	pop	r28
     106:	08 95       	ret

00000108 <adc_read>:

uint16_t adc_read(){
     108:	cf 93       	push	r28
     10a:	df 93       	push	r29
     10c:	cd b7       	in	r28, 0x3d	; 61
     10e:	de b7       	in	r29, 0x3e	; 62
	
	if(ADCSRA & (1<<ADIF)){
     110:	8a e7       	ldi	r24, 0x7A	; 122
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	fc 01       	movw	r30, r24
     116:	80 81       	ld	r24, Z
     118:	88 2f       	mov	r24, r24
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	80 71       	andi	r24, 0x10	; 16
     11e:	99 27       	eor	r25, r25
     120:	89 2b       	or	r24, r25
     122:	91 f0       	breq	.+36     	; 0x148 <adc_read+0x40>
		
		adc_value = ADC;
     124:	88 e7       	ldi	r24, 0x78	; 120
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	fc 01       	movw	r30, r24
     12a:	80 81       	ld	r24, Z
     12c:	91 81       	ldd	r25, Z+1	; 0x01
     12e:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <adc_value+0x1>
     132:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <adc_value>
		//reset transmition complete flag and start another conversion
		ADCSRA |= (1<<ADIF) | (1<<ADSC);
     136:	8a e7       	ldi	r24, 0x7A	; 122
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	2a e7       	ldi	r18, 0x7A	; 122
     13c:	30 e0       	ldi	r19, 0x00	; 0
     13e:	f9 01       	movw	r30, r18
     140:	20 81       	ld	r18, Z
     142:	20 65       	ori	r18, 0x50	; 80
     144:	fc 01       	movw	r30, r24
     146:	20 83       	st	Z, r18
		
	}
	//if the conversion hasnt finished yet we return the old value
	return adc_value;
     148:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <adc_value>
     14c:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <adc_value+0x1>
	
     150:	df 91       	pop	r29
     152:	cf 91       	pop	r28
     154:	08 95       	ret

00000156 <can_check_free>:

#include "canlib.h"
#include <avr/io.h>


uint8_t can_check_free(uint8_t mobnum){
     156:	cf 93       	push	r28
     158:	df 93       	push	r29
     15a:	00 d0       	rcall	.+0      	; 0x15c <can_check_free+0x6>
     15c:	cd b7       	in	r28, 0x3d	; 61
     15e:	de b7       	in	r29, 0x3e	; 62
     160:	8a 83       	std	Y+2, r24	; 0x02
	
	uint8_t mob_status = 0;
     162:	19 82       	std	Y+1, r1	; 0x01
	
	if(mobnum >7){
     164:	8a 81       	ldd	r24, Y+2	; 0x02
     166:	88 30       	cpi	r24, 0x08	; 8
     168:	c0 f0       	brcs	.+48     	; 0x19a <can_check_free+0x44>
		
		mob_status = !((CANEN1 >> (mobnum-8)) &1);
     16a:	8d ed       	ldi	r24, 0xDD	; 221
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	fc 01       	movw	r30, r24
     170:	80 81       	ld	r24, Z
     172:	88 2f       	mov	r24, r24
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	2a 81       	ldd	r18, Y+2	; 0x02
     178:	22 2f       	mov	r18, r18
     17a:	30 e0       	ldi	r19, 0x00	; 0
     17c:	28 50       	subi	r18, 0x08	; 8
     17e:	31 09       	sbc	r19, r1
     180:	02 c0       	rjmp	.+4      	; 0x186 <can_check_free+0x30>
     182:	95 95       	asr	r25
     184:	87 95       	ror	r24
     186:	2a 95       	dec	r18
     188:	e2 f7       	brpl	.-8      	; 0x182 <can_check_free+0x2c>
     18a:	81 70       	andi	r24, 0x01	; 1
     18c:	99 27       	eor	r25, r25
     18e:	21 e0       	ldi	r18, 0x01	; 1
     190:	89 2b       	or	r24, r25
     192:	09 f0       	breq	.+2      	; 0x196 <can_check_free+0x40>
     194:	20 e0       	ldi	r18, 0x00	; 0
     196:	29 83       	std	Y+1, r18	; 0x01
     198:	15 c0       	rjmp	.+42     	; 0x1c4 <can_check_free+0x6e>


		} else {
		
		mob_status = !((CANEN2 >> mobnum) &1);
     19a:	8c ed       	ldi	r24, 0xDC	; 220
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	fc 01       	movw	r30, r24
     1a0:	80 81       	ld	r24, Z
     1a2:	88 2f       	mov	r24, r24
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	2a 81       	ldd	r18, Y+2	; 0x02
     1a8:	22 2f       	mov	r18, r18
     1aa:	30 e0       	ldi	r19, 0x00	; 0
     1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <can_check_free+0x5c>
     1ae:	95 95       	asr	r25
     1b0:	87 95       	ror	r24
     1b2:	2a 95       	dec	r18
     1b4:	e2 f7       	brpl	.-8      	; 0x1ae <can_check_free+0x58>
     1b6:	81 70       	andi	r24, 0x01	; 1
     1b8:	99 27       	eor	r25, r25
     1ba:	21 e0       	ldi	r18, 0x01	; 1
     1bc:	89 2b       	or	r24, r25
     1be:	09 f0       	breq	.+2      	; 0x1c2 <can_check_free+0x6c>
     1c0:	20 e0       	ldi	r18, 0x00	; 0
     1c2:	29 83       	std	Y+1, r18	; 0x01
	}

	return mob_status;
     1c4:	89 81       	ldd	r24, Y+1	; 0x01
	
}
     1c6:	0f 90       	pop	r0
     1c8:	0f 90       	pop	r0
     1ca:	df 91       	pop	r29
     1cc:	cf 91       	pop	r28
     1ce:	08 95       	ret

000001d0 <can_cfg>:
void can_cfg(){
     1d0:	cf 93       	push	r28
     1d2:	df 93       	push	r29
     1d4:	00 d0       	rcall	.+0      	; 0x1d6 <can_cfg+0x6>
     1d6:	cd b7       	in	r28, 0x3d	; 61
     1d8:	de b7       	in	r29, 0x3e	; 62
	
	CANGCON = 0; // Disable CAN
     1da:	88 ed       	ldi	r24, 0xD8	; 216
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	fc 01       	movw	r30, r24
     1e0:	10 82       	st	Z, r1
	
	for (uint8_t mob = 0; mob < 15 ; mob++){//reset all mobs
     1e2:	19 82       	std	Y+1, r1	; 0x01
     1e4:	56 c0       	rjmp	.+172    	; 0x292 <can_cfg+0xc2>
		CANPAGE = mob<<MOBNB0 | (1<<AINC);
     1e6:	8d ee       	ldi	r24, 0xED	; 237
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	29 81       	ldd	r18, Y+1	; 0x01
     1ec:	22 2f       	mov	r18, r18
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	22 95       	swap	r18
     1f2:	32 95       	swap	r19
     1f4:	30 7f       	andi	r19, 0xF0	; 240
     1f6:	32 27       	eor	r19, r18
     1f8:	20 7f       	andi	r18, 0xF0	; 240
     1fa:	32 27       	eor	r19, r18
     1fc:	28 60       	ori	r18, 0x08	; 8
     1fe:	fc 01       	movw	r30, r24
     200:	20 83       	st	Z, r18
		CANSTMOB = 0;
     202:	8e ee       	ldi	r24, 0xEE	; 238
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	fc 01       	movw	r30, r24
     208:	10 82       	st	Z, r1
		CANCDMOB = 0;
     20a:	8f ee       	ldi	r24, 0xEF	; 239
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	fc 01       	movw	r30, r24
     210:	10 82       	st	Z, r1
		CANIDT4 = 0;
     212:	80 ef       	ldi	r24, 0xF0	; 240
     214:	90 e0       	ldi	r25, 0x00	; 0
     216:	fc 01       	movw	r30, r24
     218:	10 82       	st	Z, r1
		CANIDT3 = 0;
     21a:	81 ef       	ldi	r24, 0xF1	; 241
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	fc 01       	movw	r30, r24
     220:	10 82       	st	Z, r1
		CANIDT2 = 0;
     222:	82 ef       	ldi	r24, 0xF2	; 242
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	fc 01       	movw	r30, r24
     228:	10 82       	st	Z, r1
		CANIDT1 = 0;
     22a:	83 ef       	ldi	r24, 0xF3	; 243
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	fc 01       	movw	r30, r24
     230:	10 82       	st	Z, r1
		CANIDM4 = 0;
     232:	84 ef       	ldi	r24, 0xF4	; 244
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	fc 01       	movw	r30, r24
     238:	10 82       	st	Z, r1
		CANIDM3 = 0;
     23a:	85 ef       	ldi	r24, 0xF5	; 245
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	fc 01       	movw	r30, r24
     240:	10 82       	st	Z, r1
		CANIDM2 = 0;
     242:	86 ef       	ldi	r24, 0xF6	; 246
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	fc 01       	movw	r30, r24
     248:	10 82       	st	Z, r1
		CANIDM1 = 0;
     24a:	87 ef       	ldi	r24, 0xF7	; 247
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	fc 01       	movw	r30, r24
     250:	10 82       	st	Z, r1
		for (uint8_t byte = 0; byte < 8; byte++){
     252:	1a 82       	std	Y+2, r1	; 0x02
     254:	18 c0       	rjmp	.+48     	; 0x286 <can_cfg+0xb6>
			CANPAGE = mob<<MOBNB0 | 1<<AINC | byte;
     256:	8d ee       	ldi	r24, 0xED	; 237
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	29 81       	ldd	r18, Y+1	; 0x01
     25c:	22 2f       	mov	r18, r18
     25e:	30 e0       	ldi	r19, 0x00	; 0
     260:	22 95       	swap	r18
     262:	32 95       	swap	r19
     264:	30 7f       	andi	r19, 0xF0	; 240
     266:	32 27       	eor	r19, r18
     268:	20 7f       	andi	r18, 0xF0	; 240
     26a:	32 27       	eor	r19, r18
     26c:	32 2f       	mov	r19, r18
     26e:	2a 81       	ldd	r18, Y+2	; 0x02
     270:	23 2b       	or	r18, r19
     272:	28 60       	ori	r18, 0x08	; 8
     274:	fc 01       	movw	r30, r24
     276:	20 83       	st	Z, r18
			CANMSG = 0;
     278:	8a ef       	ldi	r24, 0xFA	; 250
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	fc 01       	movw	r30, r24
     27e:	10 82       	st	Z, r1
		CANIDT1 = 0;
		CANIDM4 = 0;
		CANIDM3 = 0;
		CANIDM2 = 0;
		CANIDM1 = 0;
		for (uint8_t byte = 0; byte < 8; byte++){
     280:	8a 81       	ldd	r24, Y+2	; 0x02
     282:	8f 5f       	subi	r24, 0xFF	; 255
     284:	8a 83       	std	Y+2, r24	; 0x02
     286:	8a 81       	ldd	r24, Y+2	; 0x02
     288:	88 30       	cpi	r24, 0x08	; 8
     28a:	28 f3       	brcs	.-54     	; 0x256 <can_cfg+0x86>
}
void can_cfg(){
	
	CANGCON = 0; // Disable CAN
	
	for (uint8_t mob = 0; mob < 15 ; mob++){//reset all mobs
     28c:	89 81       	ldd	r24, Y+1	; 0x01
     28e:	8f 5f       	subi	r24, 0xFF	; 255
     290:	89 83       	std	Y+1, r24	; 0x01
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	8f 30       	cpi	r24, 0x0F	; 15
     296:	08 f4       	brcc	.+2      	; 0x29a <can_cfg+0xca>
     298:	a6 cf       	rjmp	.-180    	; 0x1e6 <can_cfg+0x16>
			CANPAGE = mob<<MOBNB0 | 1<<AINC | byte;
			CANMSG = 0;
		}
	}

	CANBT1 = 0x00;// Set Baudrate
     29a:	82 ee       	ldi	r24, 0xE2	; 226
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	fc 01       	movw	r30, r24
     2a0:	10 82       	st	Z, r1
	CANBT2 = 0x0C;// 500kBaud according
     2a2:	83 ee       	ldi	r24, 0xE3	; 227
     2a4:	90 e0       	ldi	r25, 0x00	; 0
     2a6:	2c e0       	ldi	r18, 0x0C	; 12
     2a8:	fc 01       	movw	r30, r24
     2aa:	20 83       	st	Z, r18
	CANBT3 = 0x36;// to Datasheet S. 267
     2ac:	84 ee       	ldi	r24, 0xE4	; 228
     2ae:	90 e0       	ldi	r25, 0x00	; 0
     2b0:	26 e3       	ldi	r18, 0x36	; 54
     2b2:	fc 01       	movw	r30, r24
     2b4:	20 83       	st	Z, r18

	CANGIE = 0;
     2b6:	8b ed       	ldi	r24, 0xDB	; 219
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	fc 01       	movw	r30, r24
     2bc:	10 82       	st	Z, r1

	CANGCON |= (1<<ENASTB); // Enable CAN
     2be:	88 ed       	ldi	r24, 0xD8	; 216
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	28 ed       	ldi	r18, 0xD8	; 216
     2c4:	30 e0       	ldi	r19, 0x00	; 0
     2c6:	f9 01       	movw	r30, r18
     2c8:	20 81       	ld	r18, Z
     2ca:	22 60       	ori	r18, 0x02	; 2
     2cc:	fc 01       	movw	r30, r24
     2ce:	20 83       	st	Z, r18
	
	
	
}
     2d0:	00 00       	nop
     2d2:	0f 90       	pop	r0
     2d4:	0f 90       	pop	r0
     2d6:	df 91       	pop	r29
     2d8:	cf 91       	pop	r28
     2da:	08 95       	ret

000002dc <can_rx>:
void can_rx(struct CAN_MOB *to_receive, uint8_t *data){
     2dc:	cf 93       	push	r28
     2de:	df 93       	push	r29
     2e0:	00 d0       	rcall	.+0      	; 0x2e2 <can_rx+0x6>
     2e2:	00 d0       	rcall	.+0      	; 0x2e4 <can_rx+0x8>
     2e4:	1f 92       	push	r1
     2e6:	cd b7       	in	r28, 0x3d	; 61
     2e8:	de b7       	in	r29, 0x3e	; 62
     2ea:	9b 83       	std	Y+3, r25	; 0x03
     2ec:	8a 83       	std	Y+2, r24	; 0x02
     2ee:	7d 83       	std	Y+5, r23	; 0x05
     2f0:	6c 83       	std	Y+4, r22	; 0x04
	
	CANPAGE = to_receive->mob_number << MOBNB0;
     2f2:	8d ee       	ldi	r24, 0xED	; 237
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	2a 81       	ldd	r18, Y+2	; 0x02
     2f8:	3b 81       	ldd	r19, Y+3	; 0x03
     2fa:	f9 01       	movw	r30, r18
     2fc:	24 81       	ldd	r18, Z+4	; 0x04
     2fe:	22 95       	swap	r18
     300:	20 7f       	andi	r18, 0xF0	; 240
     302:	fc 01       	movw	r30, r24
     304:	20 83       	st	Z, r18
	if (can_check_free(to_receive->mob_number)){
     306:	8a 81       	ldd	r24, Y+2	; 0x02
     308:	9b 81       	ldd	r25, Y+3	; 0x03
     30a:	fc 01       	movw	r30, r24
     30c:	84 81       	ldd	r24, Z+4	; 0x04
     30e:	23 df       	rcall	.-442    	; 0x156 <can_check_free>
     310:	88 23       	and	r24, r24
     312:	09 f4       	brne	.+2      	; 0x316 <can_rx+0x3a>
     314:	50 c0       	rjmp	.+160    	; 0x3b6 <can_rx+0xda>
		/* load the id 11 bit */
		CANIDT1 = to_receive->mob_id >>3;
     316:	83 ef       	ldi	r24, 0xF3	; 243
     318:	90 e0       	ldi	r25, 0x00	; 0
     31a:	2a 81       	ldd	r18, Y+2	; 0x02
     31c:	3b 81       	ldd	r19, Y+3	; 0x03
     31e:	f9 01       	movw	r30, r18
     320:	20 81       	ld	r18, Z
     322:	31 81       	ldd	r19, Z+1	; 0x01
     324:	36 95       	lsr	r19
     326:	27 95       	ror	r18
     328:	36 95       	lsr	r19
     32a:	27 95       	ror	r18
     32c:	36 95       	lsr	r19
     32e:	27 95       	ror	r18
     330:	fc 01       	movw	r30, r24
     332:	20 83       	st	Z, r18
		CANIDT2 = (to_receive->mob_id << 5)&0b11100000;
     334:	82 ef       	ldi	r24, 0xF2	; 242
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	2a 81       	ldd	r18, Y+2	; 0x02
     33a:	3b 81       	ldd	r19, Y+3	; 0x03
     33c:	f9 01       	movw	r30, r18
     33e:	20 81       	ld	r18, Z
     340:	31 81       	ldd	r19, Z+1	; 0x01
     342:	22 95       	swap	r18
     344:	22 0f       	add	r18, r18
     346:	20 7e       	andi	r18, 0xE0	; 224
     348:	fc 01       	movw	r30, r24
     34a:	20 83       	st	Z, r18
		CANIDT3 = 0;
     34c:	81 ef       	ldi	r24, 0xF1	; 241
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	fc 01       	movw	r30, r24
     352:	10 82       	st	Z, r1
		CANIDT4 = 1<<RTRTAG;
     354:	80 ef       	ldi	r24, 0xF0	; 240
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	24 e0       	ldi	r18, 0x04	; 4
     35a:	fc 01       	movw	r30, r24
     35c:	20 83       	st	Z, r18
		CANIDM1 = to_receive->mob_idmask >>3;
     35e:	87 ef       	ldi	r24, 0xF7	; 247
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	2a 81       	ldd	r18, Y+2	; 0x02
     364:	3b 81       	ldd	r19, Y+3	; 0x03
     366:	f9 01       	movw	r30, r18
     368:	22 81       	ldd	r18, Z+2	; 0x02
     36a:	33 81       	ldd	r19, Z+3	; 0x03
     36c:	36 95       	lsr	r19
     36e:	27 95       	ror	r18
     370:	36 95       	lsr	r19
     372:	27 95       	ror	r18
     374:	36 95       	lsr	r19
     376:	27 95       	ror	r18
     378:	fc 01       	movw	r30, r24
     37a:	20 83       	st	Z, r18
		CANIDM2 = (to_receive->mob_idmask <<5)&0b11100000;
     37c:	86 ef       	ldi	r24, 0xF6	; 246
     37e:	90 e0       	ldi	r25, 0x00	; 0
     380:	2a 81       	ldd	r18, Y+2	; 0x02
     382:	3b 81       	ldd	r19, Y+3	; 0x03
     384:	f9 01       	movw	r30, r18
     386:	22 81       	ldd	r18, Z+2	; 0x02
     388:	33 81       	ldd	r19, Z+3	; 0x03
     38a:	22 95       	swap	r18
     38c:	22 0f       	add	r18, r18
     38e:	20 7e       	andi	r18, 0xE0	; 224
     390:	fc 01       	movw	r30, r24
     392:	20 83       	st	Z, r18
		CANIDM3 = 0;
     394:	85 ef       	ldi	r24, 0xF5	; 245
     396:	90 e0       	ldi	r25, 0x00	; 0
     398:	fc 01       	movw	r30, r24
     39a:	10 82       	st	Z, r1
		CANIDM4 = 0;
     39c:	84 ef       	ldi	r24, 0xF4	; 244
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	fc 01       	movw	r30, r24
     3a2:	10 82       	st	Z, r1
		CANCDMOB = (1 << CONMOB1) | (1 << CONMOB0)| (1<<DLC3);
     3a4:	8f ee       	ldi	r24, 0xEF	; 239
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	28 ec       	ldi	r18, 0xC8	; 200
     3aa:	fc 01       	movw	r30, r24
     3ac:	20 83       	st	Z, r18
		CANSTMOB = 0;
     3ae:	8e ee       	ldi	r24, 0xEE	; 238
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	fc 01       	movw	r30, r24
     3b4:	10 82       	st	Z, r1
	}
	
	for(uint8_t byte = 0; byte <8; byte++){
     3b6:	19 82       	std	Y+1, r1	; 0x01
     3b8:	24 c0       	rjmp	.+72     	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
		CANPAGE = (to_receive->mob_number << MOBNB0) | (1 << AINC) | byte;
     3ba:	8d ee       	ldi	r24, 0xED	; 237
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	2a 81       	ldd	r18, Y+2	; 0x02
     3c0:	3b 81       	ldd	r19, Y+3	; 0x03
     3c2:	f9 01       	movw	r30, r18
     3c4:	24 81       	ldd	r18, Z+4	; 0x04
     3c6:	22 2f       	mov	r18, r18
     3c8:	30 e0       	ldi	r19, 0x00	; 0
     3ca:	22 95       	swap	r18
     3cc:	32 95       	swap	r19
     3ce:	30 7f       	andi	r19, 0xF0	; 240
     3d0:	32 27       	eor	r19, r18
     3d2:	20 7f       	andi	r18, 0xF0	; 240
     3d4:	32 27       	eor	r19, r18
     3d6:	32 2f       	mov	r19, r18
     3d8:	29 81       	ldd	r18, Y+1	; 0x01
     3da:	23 2b       	or	r18, r19
     3dc:	28 60       	ori	r18, 0x08	; 8
     3de:	fc 01       	movw	r30, r24
     3e0:	20 83       	st	Z, r18
		data[byte] = CANMSG;
     3e2:	89 81       	ldd	r24, Y+1	; 0x01
     3e4:	88 2f       	mov	r24, r24
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	2c 81       	ldd	r18, Y+4	; 0x04
     3ea:	3d 81       	ldd	r19, Y+5	; 0x05
     3ec:	82 0f       	add	r24, r18
     3ee:	93 1f       	adc	r25, r19
     3f0:	2a ef       	ldi	r18, 0xFA	; 250
     3f2:	30 e0       	ldi	r19, 0x00	; 0
     3f4:	f9 01       	movw	r30, r18
     3f6:	20 81       	ld	r18, Z
     3f8:	fc 01       	movw	r30, r24
     3fa:	20 83       	st	Z, r18
		CANIDM4 = 0;
		CANCDMOB = (1 << CONMOB1) | (1 << CONMOB0)| (1<<DLC3);
		CANSTMOB = 0;
	}
	
	for(uint8_t byte = 0; byte <8; byte++){
     3fc:	89 81       	ldd	r24, Y+1	; 0x01
     3fe:	8f 5f       	subi	r24, 0xFF	; 255
     400:	89 83       	std	Y+1, r24	; 0x01
     402:	89 81       	ldd	r24, Y+1	; 0x01
     404:	88 30       	cpi	r24, 0x08	; 8
     406:	c8 f2       	brcs	.-78     	; 0x3ba <can_rx+0xde>
		CANPAGE = (to_receive->mob_number << MOBNB0) | (1 << AINC) | byte;
		data[byte] = CANMSG;
	}
	
	
}
     408:	00 00       	nop
     40a:	0f 90       	pop	r0
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	0f 90       	pop	r0
     412:	0f 90       	pop	r0
     414:	df 91       	pop	r29
     416:	cf 91       	pop	r28
     418:	08 95       	ret

0000041a <can_tx>:
void can_tx(struct CAN_MOB *to_send, uint8_t *data){
     41a:	cf 93       	push	r28
     41c:	df 93       	push	r29
     41e:	00 d0       	rcall	.+0      	; 0x420 <can_tx+0x6>
     420:	00 d0       	rcall	.+0      	; 0x422 <can_tx+0x8>
     422:	1f 92       	push	r1
     424:	cd b7       	in	r28, 0x3d	; 61
     426:	de b7       	in	r29, 0x3e	; 62
     428:	9b 83       	std	Y+3, r25	; 0x03
     42a:	8a 83       	std	Y+2, r24	; 0x02
     42c:	7d 83       	std	Y+5, r23	; 0x05
     42e:	6c 83       	std	Y+4, r22	; 0x04
	
	for(uint8_t byte = 0; byte <8; byte++){
     430:	19 82       	std	Y+1, r1	; 0x01
     432:	24 c0       	rjmp	.+72     	; 0x47c <can_tx+0x62>
		CANPAGE = (to_send->mob_number << MOBNB0) | (1 << AINC) | byte;
     434:	8d ee       	ldi	r24, 0xED	; 237
     436:	90 e0       	ldi	r25, 0x00	; 0
     438:	2a 81       	ldd	r18, Y+2	; 0x02
     43a:	3b 81       	ldd	r19, Y+3	; 0x03
     43c:	f9 01       	movw	r30, r18
     43e:	24 81       	ldd	r18, Z+4	; 0x04
     440:	22 2f       	mov	r18, r18
     442:	30 e0       	ldi	r19, 0x00	; 0
     444:	22 95       	swap	r18
     446:	32 95       	swap	r19
     448:	30 7f       	andi	r19, 0xF0	; 240
     44a:	32 27       	eor	r19, r18
     44c:	20 7f       	andi	r18, 0xF0	; 240
     44e:	32 27       	eor	r19, r18
     450:	32 2f       	mov	r19, r18
     452:	29 81       	ldd	r18, Y+1	; 0x01
     454:	23 2b       	or	r18, r19
     456:	28 60       	ori	r18, 0x08	; 8
     458:	fc 01       	movw	r30, r24
     45a:	20 83       	st	Z, r18
		CANMSG = data[byte];
     45c:	8a ef       	ldi	r24, 0xFA	; 250
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	29 81       	ldd	r18, Y+1	; 0x01
     462:	22 2f       	mov	r18, r18
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	4c 81       	ldd	r20, Y+4	; 0x04
     468:	5d 81       	ldd	r21, Y+5	; 0x05
     46a:	24 0f       	add	r18, r20
     46c:	35 1f       	adc	r19, r21
     46e:	f9 01       	movw	r30, r18
     470:	20 81       	ld	r18, Z
     472:	fc 01       	movw	r30, r24
     474:	20 83       	st	Z, r18
	
	
}
void can_tx(struct CAN_MOB *to_send, uint8_t *data){
	
	for(uint8_t byte = 0; byte <8; byte++){
     476:	89 81       	ldd	r24, Y+1	; 0x01
     478:	8f 5f       	subi	r24, 0xFF	; 255
     47a:	89 83       	std	Y+1, r24	; 0x01
     47c:	89 81       	ldd	r24, Y+1	; 0x01
     47e:	88 30       	cpi	r24, 0x08	; 8
     480:	c8 f2       	brcs	.-78     	; 0x434 <can_tx+0x1a>
		CANPAGE = (to_send->mob_number << MOBNB0) | (1 << AINC) | byte;
		CANMSG = data[byte];
	}
	
	CANPAGE = to_send->mob_number << MOBNB0;
     482:	8d ee       	ldi	r24, 0xED	; 237
     484:	90 e0       	ldi	r25, 0x00	; 0
     486:	2a 81       	ldd	r18, Y+2	; 0x02
     488:	3b 81       	ldd	r19, Y+3	; 0x03
     48a:	f9 01       	movw	r30, r18
     48c:	24 81       	ldd	r18, Z+4	; 0x04
     48e:	22 95       	swap	r18
     490:	20 7f       	andi	r18, 0xF0	; 240
     492:	fc 01       	movw	r30, r24
     494:	20 83       	st	Z, r18
	if (can_check_free(to_send->mob_number)){
     496:	8a 81       	ldd	r24, Y+2	; 0x02
     498:	9b 81       	ldd	r25, Y+3	; 0x03
     49a:	fc 01       	movw	r30, r24
     49c:	84 81       	ldd	r24, Z+4	; 0x04
     49e:	5b de       	rcall	.-842    	; 0x156 <can_check_free>
     4a0:	88 23       	and	r24, r24
     4a2:	09 f4       	brne	.+2      	; 0x4a6 <can_tx+0x8c>
     4a4:	44 c0       	rjmp	.+136    	; 0x52e <can_tx+0x114>
		CANSTMOB = 0;
     4a6:	8e ee       	ldi	r24, 0xEE	; 238
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	fc 01       	movw	r30, r24
     4ac:	10 82       	st	Z, r1
		CANIDT1 = to_send->mob_id>>3;
     4ae:	83 ef       	ldi	r24, 0xF3	; 243
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	2a 81       	ldd	r18, Y+2	; 0x02
     4b4:	3b 81       	ldd	r19, Y+3	; 0x03
     4b6:	f9 01       	movw	r30, r18
     4b8:	20 81       	ld	r18, Z
     4ba:	31 81       	ldd	r19, Z+1	; 0x01
     4bc:	36 95       	lsr	r19
     4be:	27 95       	ror	r18
     4c0:	36 95       	lsr	r19
     4c2:	27 95       	ror	r18
     4c4:	36 95       	lsr	r19
     4c6:	27 95       	ror	r18
     4c8:	fc 01       	movw	r30, r24
     4ca:	20 83       	st	Z, r18
		CANIDT2 = (to_send->mob_id << 5) & 0b11100000;
     4cc:	82 ef       	ldi	r24, 0xF2	; 242
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	2a 81       	ldd	r18, Y+2	; 0x02
     4d2:	3b 81       	ldd	r19, Y+3	; 0x03
     4d4:	f9 01       	movw	r30, r18
     4d6:	20 81       	ld	r18, Z
     4d8:	31 81       	ldd	r19, Z+1	; 0x01
     4da:	22 95       	swap	r18
     4dc:	22 0f       	add	r18, r18
     4de:	20 7e       	andi	r18, 0xE0	; 224
     4e0:	fc 01       	movw	r30, r24
     4e2:	20 83       	st	Z, r18
		CANIDT3 = 0;
     4e4:	81 ef       	ldi	r24, 0xF1	; 241
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	fc 01       	movw	r30, r24
     4ea:	10 82       	st	Z, r1
		CANIDT4 = 0;
     4ec:	80 ef       	ldi	r24, 0xF0	; 240
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	fc 01       	movw	r30, r24
     4f2:	10 82       	st	Z, r1
		CANIDM1 = 0; //0b11111111;
     4f4:	87 ef       	ldi	r24, 0xF7	; 247
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	fc 01       	movw	r30, r24
     4fa:	10 82       	st	Z, r1
		CANIDM2 = 0; //0b11100000;
     4fc:	86 ef       	ldi	r24, 0xF6	; 246
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	fc 01       	movw	r30, r24
     502:	10 82       	st	Z, r1
		CANIDM3 = 0;
     504:	85 ef       	ldi	r24, 0xF5	; 245
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	fc 01       	movw	r30, r24
     50a:	10 82       	st	Z, r1
		CANIDM4 = 0;
     50c:	84 ef       	ldi	r24, 0xF4	; 244
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	fc 01       	movw	r30, r24
     512:	10 82       	st	Z, r1
		CANSTMOB = 0;
     514:	8e ee       	ldi	r24, 0xEE	; 238
     516:	90 e0       	ldi	r25, 0x00	; 0
     518:	fc 01       	movw	r30, r24
     51a:	10 82       	st	Z, r1
		CANCDMOB = (1<<CONMOB0) | 1 << DLC3;
     51c:	8f ee       	ldi	r24, 0xEF	; 239
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	28 e4       	ldi	r18, 0x48	; 72
     522:	fc 01       	movw	r30, r24
     524:	20 83       	st	Z, r18
		CANSTMOB = 0;
     526:	8e ee       	ldi	r24, 0xEE	; 238
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	fc 01       	movw	r30, r24
     52c:	10 82       	st	Z, r1
	}
	
}
     52e:	00 00       	nop
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	0f 90       	pop	r0
     536:	0f 90       	pop	r0
     538:	0f 90       	pop	r0
     53a:	df 91       	pop	r29
     53c:	cf 91       	pop	r28
     53e:	08 95       	ret

00000540 <calculate_adc_values>:
uint8_t gear = 10;
volatile uint8_t calculated_adc_values = FALSE;
volatile uint16_t adc_gear_values[5];


void calculate_adc_values(){
     540:	cf 93       	push	r28
     542:	df 93       	push	r29
     544:	cd b7       	in	r28, 0x3d	; 61
     546:	de b7       	in	r29, 0x3e	; 62
		
	adc_gear_values[0] = GEAR_1_VOLTAGE*(ADC_MAX_VALUE/ADC_VOLTAGE_REF);
     548:	81 e6       	ldi	r24, 0x61	; 97
     54a:	92 e0       	ldi	r25, 0x02	; 2
     54c:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <adc_gear_values+0x1>
     550:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <adc_gear_values>
	adc_gear_values[1] = GEAR_2_VOLTAGE*(ADC_MAX_VALUE/ADC_VOLTAGE_REF);
     554:	8a ec       	ldi	r24, 0xCA	; 202
     556:	92 e0       	ldi	r25, 0x02	; 2
     558:	90 93 39 01 	sts	0x0139, r25	; 0x800139 <adc_gear_values+0x3>
     55c:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <adc_gear_values+0x2>
	adc_gear_values[2] = GEAR_3_VOLTAGE*(ADC_MAX_VALUE/ADC_VOLTAGE_REF);
     560:	88 e3       	ldi	r24, 0x38	; 56
     562:	93 e0       	ldi	r25, 0x03	; 3
     564:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <adc_gear_values+0x5>
     568:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <adc_gear_values+0x4>
	adc_gear_values[3] = GEAR_4_VOLTAGE*(ADC_MAX_VALUE/ADC_VOLTAGE_REF);
     56c:	83 e8       	ldi	r24, 0x83	; 131
     56e:	93 e0       	ldi	r25, 0x03	; 3
     570:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <adc_gear_values+0x7>
     574:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <adc_gear_values+0x6>
	adc_gear_values[4] = GEAR_5_VOLTAGE*(ADC_MAX_VALUE/ADC_VOLTAGE_REF);
     578:	89 ec       	ldi	r24, 0xC9	; 201
     57a:	93 e0       	ldi	r25, 0x03	; 3
     57c:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <adc_gear_values+0x9>
     580:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <adc_gear_values+0x8>
	calculated_adc_values = TRUE;
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
	
}
     58a:	00 00       	nop
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	08 95       	ret

00000592 <gear_read>:
uint8_t gear_read(uint16_t adc_value){
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	00 d0       	rcall	.+0      	; 0x598 <gear_read+0x6>
     598:	1f 92       	push	r1
     59a:	cd b7       	in	r28, 0x3d	; 61
     59c:	de b7       	in	r29, 0x3e	; 62
     59e:	9b 83       	std	Y+3, r25	; 0x03
     5a0:	8a 83       	std	Y+2, r24	; 0x02
	
	
	//if the adc Values for each gear Hasn't been calcuated yet it needs to be done first
	if(calculated_adc_values == FALSE){
     5a2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
     5a6:	88 23       	and	r24, r24
     5a8:	09 f4       	brne	.+2      	; 0x5ac <gear_read+0x1a>
		calculate_adc_values();		
     5aa:	ca df       	rcall	.-108    	; 0x540 <calculate_adc_values>
	}
	
	gear = 10;
     5ac:	8a e0       	ldi	r24, 0x0A	; 10
     5ae:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	
	//if digital output is high (for neutral)
	//requires activated PULLDOWN for that pin
	if ((DIGITAL_IN_PORT_INPUT&(1<<DIGITAL_IN_PIN)) == 0){
     5b2:	80 e2       	ldi	r24, 0x20	; 32
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	fc 01       	movw	r30, r24
     5b8:	80 81       	ld	r24, Z
     5ba:	88 2f       	mov	r24, r24
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	88 70       	andi	r24, 0x08	; 8
     5c0:	99 27       	eor	r25, r25
     5c2:	89 2b       	or	r24, r25
     5c4:	19 f4       	brne	.+6      	; 0x5cc <gear_read+0x3a>
		gear = 0;
     5c6:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
     5ca:	6d c0       	rjmp	.+218    	; 0x6a6 <gear_read+0x114>
	}
	else{
		//x is an index var to indicate the fitting values in the array
		uint8_t x = 0;
     5cc:	19 82       	std	Y+1, r1	; 0x01
		//if no valid gear is recognised a unvalid gear (10) will be transmitted,
		gear=10;
     5ce:	8a e0       	ldi	r24, 0x0A	; 10
     5d0:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		//while no gear was detected and the index is smaller than 5
		while(gear == 10 && x < 5){
     5d4:	60 c0       	rjmp	.+192    	; 0x696 <gear_read+0x104>
			if (x < 5 && x > 0 ) {
     5d6:	89 81       	ldd	r24, Y+1	; 0x01
     5d8:	85 30       	cpi	r24, 0x05	; 5
     5da:	70 f5       	brcc	.+92     	; 0x638 <gear_read+0xa6>
     5dc:	89 81       	ldd	r24, Y+1	; 0x01
     5de:	88 23       	and	r24, r24
     5e0:	59 f1       	breq	.+86     	; 0x638 <gear_read+0xa6>
				//if gear is not 1 or 6 use this routine
				if (adc_value >= (adc_gear_values[x-1] - ADC_GEAR_TOLERANCE) && adc_value <= (adc_gear_values[x] + ADC_GEAR_TOLERANCE)){
     5e2:	89 81       	ldd	r24, Y+1	; 0x01
     5e4:	88 2f       	mov	r24, r24
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	01 97       	sbiw	r24, 0x01	; 1
     5ea:	88 0f       	add	r24, r24
     5ec:	99 1f       	adc	r25, r25
     5ee:	8a 5c       	subi	r24, 0xCA	; 202
     5f0:	9e 4f       	sbci	r25, 0xFE	; 254
     5f2:	fc 01       	movw	r30, r24
     5f4:	80 81       	ld	r24, Z
     5f6:	91 81       	ldd	r25, Z+1	; 0x01
     5f8:	9c 01       	movw	r18, r24
     5fa:	2e 51       	subi	r18, 0x1E	; 30
     5fc:	31 09       	sbc	r19, r1
     5fe:	8a 81       	ldd	r24, Y+2	; 0x02
     600:	9b 81       	ldd	r25, Y+3	; 0x03
     602:	82 17       	cp	r24, r18
     604:	93 07       	cpc	r25, r19
     606:	08 f4       	brcc	.+2      	; 0x60a <gear_read+0x78>
     608:	42 c0       	rjmp	.+132    	; 0x68e <gear_read+0xfc>
     60a:	89 81       	ldd	r24, Y+1	; 0x01
     60c:	88 2f       	mov	r24, r24
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	88 0f       	add	r24, r24
     612:	99 1f       	adc	r25, r25
     614:	8a 5c       	subi	r24, 0xCA	; 202
     616:	9e 4f       	sbci	r25, 0xFE	; 254
     618:	fc 01       	movw	r30, r24
     61a:	80 81       	ld	r24, Z
     61c:	91 81       	ldd	r25, Z+1	; 0x01
     61e:	9c 01       	movw	r18, r24
     620:	22 5e       	subi	r18, 0xE2	; 226
     622:	3f 4f       	sbci	r19, 0xFF	; 255
     624:	8a 81       	ldd	r24, Y+2	; 0x02
     626:	9b 81       	ldd	r25, Y+3	; 0x03
     628:	28 17       	cp	r18, r24
     62a:	39 07       	cpc	r19, r25
     62c:	80 f1       	brcs	.+96     	; 0x68e <gear_read+0xfc>
					gear = x+1;
     62e:	89 81       	ldd	r24, Y+1	; 0x01
     630:	8f 5f       	subi	r24, 0xFF	; 255
     632:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
		gear=10;
		//while no gear was detected and the index is smaller than 5
		while(gear == 10 && x < 5){
			if (x < 5 && x > 0 ) {
				//if gear is not 1 or 6 use this routine
				if (adc_value >= (adc_gear_values[x-1] - ADC_GEAR_TOLERANCE) && adc_value <= (adc_gear_values[x] + ADC_GEAR_TOLERANCE)){
     636:	2b c0       	rjmp	.+86     	; 0x68e <gear_read+0xfc>
					gear = x+1;
				}
			//special cases for first and last gear
			} else {
				
					if(adc_value >= adc_gear_values[4] - ADC_GEAR_TOLERANCE && adc_value <= adc_gear_values[4]+ADC_GEAR_TOLERANCE){
     638:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <adc_gear_values+0x8>
     63c:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <adc_gear_values+0x9>
     640:	9c 01       	movw	r18, r24
     642:	2e 51       	subi	r18, 0x1E	; 30
     644:	31 09       	sbc	r19, r1
     646:	8a 81       	ldd	r24, Y+2	; 0x02
     648:	9b 81       	ldd	r25, Y+3	; 0x03
     64a:	82 17       	cp	r24, r18
     64c:	93 07       	cpc	r25, r19
     64e:	78 f0       	brcs	.+30     	; 0x66e <gear_read+0xdc>
     650:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <adc_gear_values+0x8>
     654:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <adc_gear_values+0x9>
     658:	9c 01       	movw	r18, r24
     65a:	22 5e       	subi	r18, 0xE2	; 226
     65c:	3f 4f       	sbci	r19, 0xFF	; 255
     65e:	8a 81       	ldd	r24, Y+2	; 0x02
     660:	9b 81       	ldd	r25, Y+3	; 0x03
     662:	28 17       	cp	r18, r24
     664:	39 07       	cpc	r19, r25
     666:	18 f0       	brcs	.+6      	; 0x66e <gear_read+0xdc>
						gear = 5;
     668:	85 e0       	ldi	r24, 0x05	; 5
     66a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
					}
				
					if(adc_value <= adc_gear_values[0] + ADC_GEAR_TOLERANCE){
     66e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <adc_gear_values>
     672:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <adc_gear_values+0x1>
     676:	9c 01       	movw	r18, r24
     678:	22 5e       	subi	r18, 0xE2	; 226
     67a:	3f 4f       	sbci	r19, 0xFF	; 255
     67c:	8a 81       	ldd	r24, Y+2	; 0x02
     67e:	9b 81       	ldd	r25, Y+3	; 0x03
     680:	28 17       	cp	r18, r24
     682:	39 07       	cpc	r19, r25
     684:	28 f0       	brcs	.+10     	; 0x690 <gear_read+0xfe>
						gear = 1;
     686:	81 e0       	ldi	r24, 0x01	; 1
     688:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     68c:	01 c0       	rjmp	.+2      	; 0x690 <gear_read+0xfe>
		gear=10;
		//while no gear was detected and the index is smaller than 5
		while(gear == 10 && x < 5){
			if (x < 5 && x > 0 ) {
				//if gear is not 1 or 6 use this routine
				if (adc_value >= (adc_gear_values[x-1] - ADC_GEAR_TOLERANCE) && adc_value <= (adc_gear_values[x] + ADC_GEAR_TOLERANCE)){
     68e:	00 00       	nop
					if(adc_value <= adc_gear_values[0] + ADC_GEAR_TOLERANCE){
						gear = 1;
					}
			}

			++x;
     690:	89 81       	ldd	r24, Y+1	; 0x01
     692:	8f 5f       	subi	r24, 0xFF	; 255
     694:	89 83       	std	Y+1, r24	; 0x01
		//x is an index var to indicate the fitting values in the array
		uint8_t x = 0;
		//if no valid gear is recognised a unvalid gear (10) will be transmitted,
		gear=10;
		//while no gear was detected and the index is smaller than 5
		while(gear == 10 && x < 5){
     696:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     69a:	8a 30       	cpi	r24, 0x0A	; 10
     69c:	21 f4       	brne	.+8      	; 0x6a6 <gear_read+0x114>
     69e:	89 81       	ldd	r24, Y+1	; 0x01
     6a0:	85 30       	cpi	r24, 0x05	; 5
     6a2:	08 f4       	brcc	.+2      	; 0x6a6 <gear_read+0x114>
     6a4:	98 cf       	rjmp	.-208    	; 0x5d6 <gear_read+0x44>
			}

			++x;
		}
	}
	return gear;
     6a6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	0f 90       	pop	r0
     6b0:	df 91       	pop	r29
     6b2:	cf 91       	pop	r28
     6b4:	08 95       	ret

000006b6 <main>:
volatile unsigned long time_old = 0;
volatile uint8_t time_old_40 = 0;
volatile uint16_t rpm = 0;

int main(void)
{
     6b6:	ef 92       	push	r14
     6b8:	ff 92       	push	r15
     6ba:	0f 93       	push	r16
     6bc:	1f 93       	push	r17
     6be:	cf 93       	push	r28
     6c0:	df 93       	push	r29
     6c2:	cd b7       	in	r28, 0x3d	; 61
     6c4:	de b7       	in	r29, 0x3e	; 62
     6c6:	6b 97       	sbiw	r28, 0x1b	; 27
     6c8:	0f b6       	in	r0, 0x3f	; 63
     6ca:	f8 94       	cli
     6cc:	de bf       	out	0x3e, r29	; 62
     6ce:	0f be       	out	0x3f, r0	; 63
     6d0:	cd bf       	out	0x3d, r28	; 61
    can_cfg();
     6d2:	7e dd       	rcall	.-1284   	; 0x1d0 <can_cfg>
	adc_config();
     6d4:	fe dc       	rcall	.-1540   	; 0xd2 <adc_config>
	servo_timer_config();
     6d6:	fd d0       	rcall	.+506    	; 0x8d2 <servo_timer_config>
	sys_timer_config();
     6d8:	b7 d0       	rcall	.+366    	; 0x848 <sys_timer_config>
     6da:	81 d0       	rcall	.+258    	; 0x7de <port_config>
	port_config();
     6dc:	80 e0       	ldi	r24, 0x00	; 0
     6de:	91 e0       	ldi	r25, 0x01	; 1
	
	struct CAN_MOB can_SWC_mob;
	can_SWC_mob.mob_id = 0x100;
     6e0:	9a 83       	std	Y+2, r25	; 0x02
     6e2:	89 83       	std	Y+1, r24	; 0x01
     6e4:	8f ef       	ldi	r24, 0xFF	; 255
     6e6:	9f e0       	ldi	r25, 0x0F	; 15
	can_SWC_mob.mob_idmask = 0xfff;
     6e8:	9c 83       	std	Y+4, r25	; 0x04
     6ea:	8b 83       	std	Y+3, r24	; 0x03
     6ec:	1d 82       	std	Y+5, r1	; 0x05
     6ee:	80 e0       	ldi	r24, 0x00	; 0
	can_SWC_mob.mob_number = 0;
     6f0:	92 e0       	ldi	r25, 0x02	; 2
	uint8_t swc_databytes[8];
	
	struct CAN_MOB can_CMC_mob;
	can_CMC_mob.mob_id = 0x200;
     6f2:	9f 87       	std	Y+15, r25	; 0x0f
     6f4:	8e 87       	std	Y+14, r24	; 0x0e
     6f6:	19 8a       	std	Y+17, r1	; 0x11
     6f8:	18 8a       	std	Y+16, r1	; 0x10
	can_CMC_mob.mob_idmask = 0; //sending mob so we dont need an idmask
     6fa:	81 e0       	ldi	r24, 0x01	; 1
     6fc:	8a 8b       	std	Y+18, r24	; 0x12
	can_CMC_mob.mob_number = 1;
     6fe:	8a e0       	ldi	r24, 0x0A	; 10
     700:	8b 8f       	std	Y+27, r24	; 0x1b
	uint8_t cmc_databytes[8];
	
	volatile uint8_t gear = 10;
     702:	78 94       	sei
     704:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <sys_time>
	
	sei();
	
    while (1) {
		
		if((sys_time - time_old) >= 10){
     708:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <sys_time+0x1>
     70c:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <sys_time+0x2>
     710:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <sys_time+0x3>
     714:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <time_old>
     718:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <time_old+0x1>
     71c:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <time_old+0x2>
     720:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <time_old+0x3>
     724:	79 01       	movw	r14, r18
     726:	8a 01       	movw	r16, r20
     728:	e8 1a       	sub	r14, r24
     72a:	f9 0a       	sbc	r15, r25
     72c:	0a 0b       	sbc	r16, r26
     72e:	1b 0b       	sbc	r17, r27
     730:	d8 01       	movw	r26, r16
     732:	c7 01       	movw	r24, r14
     734:	0a 97       	sbiw	r24, 0x0a	; 10
     736:	a1 05       	cpc	r26, r1
     738:	b1 05       	cpc	r27, r1
     73a:	08 f4       	brcc	.+2      	; 0x73e <main+0x88>
     73c:	47 c0       	rjmp	.+142    	; 0x7cc <main+0x116>
     73e:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sys_time>
			time_old = sys_time;
     742:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <sys_time+0x1>
     746:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <sys_time+0x2>
     74a:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <sys_time+0x3>
     74e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <time_old>
     752:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <time_old+0x1>
     756:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <time_old+0x2>
     75a:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <time_old+0x3>
     75e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <time_old_40>
			time_old_40++;
     762:	8f 5f       	subi	r24, 0xFF	; 255
     764:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <time_old_40>
			
			gear = gear_read(adc_read());
     768:	cf dc       	rcall	.-1634   	; 0x108 <adc_read>
     76a:	13 df       	rcall	.-474    	; 0x592 <gear_read>
     76c:	8b 8f       	std	Y+27, r24	; 0x1b
     76e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     770:	8b 8b       	std	Y+19, r24	; 0x13
			//send some additional data to make out if the gear gets transmitted correctly
			cmc_databytes[0] = gear;
     772:	8b 8d       	ldd	r24, Y+27	; 0x1b
     774:	8f 5f       	subi	r24, 0xFF	; 255
			cmc_databytes[1] = gear+1;
     776:	8c 8b       	std	Y+20, r24	; 0x14
     778:	8b 8d       	ldd	r24, Y+27	; 0x1b
     77a:	8d 8b       	std	Y+21, r24	; 0x15
			cmc_databytes[2] = gear;
     77c:	9e 01       	movw	r18, r28
			can_tx(&can_CMC_mob, cmc_databytes);
     77e:	2d 5e       	subi	r18, 0xED	; 237
     780:	3f 4f       	sbci	r19, 0xFF	; 255
     782:	ce 01       	movw	r24, r28
     784:	0e 96       	adiw	r24, 0x0e	; 14
     786:	b9 01       	movw	r22, r18
     788:	48 de       	rcall	.-880    	; 0x41a <can_tx>
			can_rx(&can_SWC_mob, swc_databytes);
     78a:	ce 01       	movw	r24, r28
     78c:	06 96       	adiw	r24, 0x06	; 6
     78e:	bc 01       	movw	r22, r24
     790:	ce 01       	movw	r24, r28
     792:	01 96       	adiw	r24, 0x01	; 1
     794:	a3 dd       	rcall	.-1210   	; 0x2dc <can_rx>
     796:	d0 d2       	rcall	.+1440   	; 0xd38 <calculate_locktimes>
			
			calculate_locktimes();
     798:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <rpm>
			shift_control(SHIFT_UP,SHIFT_DOWN,gear,rpm);
     79c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <rpm+0x1>
     7a0:	4b 8d       	ldd	r20, Y+27	; 0x1b
     7a2:	68 85       	ldd	r22, Y+8	; 0x08
     7a4:	59 85       	ldd	r21, Y+9	; 0x09
     7a6:	9c 01       	movw	r18, r24
     7a8:	85 2f       	mov	r24, r21
     7aa:	e1 d0       	rcall	.+450    	; 0x96e <shift_control>
     7ac:	8f 81       	ldd	r24, Y+7	; 0x07
     7ae:	21 e0       	ldi	r18, 0x01	; 1
			clutch_control(BUTTON_LEFT||BUTTON_RIGHT,LEFT_ENCODER+1);
     7b0:	28 0f       	add	r18, r24
     7b2:	8a 85       	ldd	r24, Y+10	; 0x0a
     7b4:	88 23       	and	r24, r24
     7b6:	19 f4       	brne	.+6      	; 0x7be <main+0x108>
     7b8:	8b 85       	ldd	r24, Y+11	; 0x0b
     7ba:	88 23       	and	r24, r24
     7bc:	19 f0       	breq	.+6      	; 0x7c4 <main+0x10e>
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	02 c0       	rjmp	.+4      	; 0x7c8 <main+0x112>
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	62 2f       	mov	r22, r18
     7ca:	17 d2       	rcall	.+1070   	; 0xbfa <clutch_control>
     7cc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <time_old_40>
			
		}
		if(time_old_40 >=10){
     7d0:	8a 30       	cpi	r24, 0x0A	; 10
     7d2:	08 f4       	brcc	.+2      	; 0x7d6 <main+0x120>
     7d4:	97 cf       	rjmp	.-210    	; 0x704 <main+0x4e>
     7d6:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <time_old_40>
			time_old_40 = 0;
     7da:	24 d0       	rcall	.+72     	; 0x824 <sys_tick>
			sys_tick();
     7dc:	93 cf       	rjmp	.-218    	; 0x704 <main+0x4e>

000007de <port_config>:
 *  Author: Ole Hannemann
 */ 
#include "misc_functions.h"
volatile unsigned long sys_time = 0;

void port_config(){
     7de:	cf 93       	push	r28
     7e0:	df 93       	push	r29
     7e2:	cd b7       	in	r28, 0x3d	; 61
     7e4:	de b7       	in	r29, 0x3e	; 62
	DDRB = 0 | (1<<PB4) | (1<<PB5);	//Mark PB4 and PB5 as output for the servo motors
     7e6:	84 e2       	ldi	r24, 0x24	; 36
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	20 e3       	ldi	r18, 0x30	; 48
     7ec:	fc 01       	movw	r30, r24
     7ee:	20 83       	st	Z, r18
	DDRC = 0;						//fuse status input is an input
     7f0:	87 e2       	ldi	r24, 0x27	; 39
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	fc 01       	movw	r30, r24
     7f6:	10 82       	st	Z, r1
	DDRA = 0 | (1<<PA0);			//Flatshift Pin is makred as output remaining is defined as input because its unused
     7f8:	81 e2       	ldi	r24, 0x21	; 33
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	21 e0       	ldi	r18, 0x01	; 1
     7fe:	fc 01       	movw	r30, r24
     800:	20 83       	st	Z, r18
	DDRF = 0;						//mark analog inputs as input
     802:	80 e3       	ldi	r24, 0x30	; 48
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	fc 01       	movw	r30, r24
     808:	10 82       	st	Z, r1
	DDRD |= (1<<PD0);				//mark the output of the sys status led as output
     80a:	8a e2       	ldi	r24, 0x2A	; 42
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	2a e2       	ldi	r18, 0x2A	; 42
     810:	30 e0       	ldi	r19, 0x00	; 0
     812:	f9 01       	movw	r30, r18
     814:	20 81       	ld	r18, Z
     816:	21 60       	ori	r18, 0x01	; 1
     818:	fc 01       	movw	r30, r24
     81a:	20 83       	st	Z, r18
}
     81c:	00 00       	nop
     81e:	df 91       	pop	r29
     820:	cf 91       	pop	r28
     822:	08 95       	ret

00000824 <sys_tick>:
void sys_tick(){
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	cd b7       	in	r28, 0x3d	; 61
     82a:	de b7       	in	r29, 0x3e	; 62

	PORTD ^= 1<<PD0;
     82c:	8b e2       	ldi	r24, 0x2B	; 43
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	2b e2       	ldi	r18, 0x2B	; 43
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	f9 01       	movw	r30, r18
     836:	30 81       	ld	r19, Z
     838:	21 e0       	ldi	r18, 0x01	; 1
     83a:	23 27       	eor	r18, r19
     83c:	fc 01       	movw	r30, r24
     83e:	20 83       	st	Z, r18

}
     840:	00 00       	nop
     842:	df 91       	pop	r29
     844:	cf 91       	pop	r28
     846:	08 95       	ret

00000848 <sys_timer_config>:

void sys_timer_config(){
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	cd b7       	in	r28, 0x3d	; 61
     84e:	de b7       	in	r29, 0x3e	; 62
	
	//8 bit Timer 0 config
	//ctc mode and 64 as prescaler
	TCCR0A = 0 | (1<<WGM01) | (1<<CS01) | (1<<CS00);
     850:	84 e4       	ldi	r24, 0x44	; 68
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	2b e0       	ldi	r18, 0x0B	; 11
     856:	fc 01       	movw	r30, r24
     858:	20 83       	st	Z, r18
	TIMSK0 = 0 | (1<<OCF0A); //compare interrupt enable
     85a:	8e e6       	ldi	r24, 0x6E	; 110
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	22 e0       	ldi	r18, 0x02	; 2
     860:	fc 01       	movw	r30, r24
     862:	20 83       	st	Z, r18
	OCR0A = 250-1; // compare value for 1ms;
     864:	87 e4       	ldi	r24, 0x47	; 71
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	29 ef       	ldi	r18, 0xF9	; 249
     86a:	fc 01       	movw	r30, r24
     86c:	20 83       	st	Z, r18
	
}
     86e:	00 00       	nop
     870:	df 91       	pop	r29
     872:	cf 91       	pop	r28
     874:	08 95       	ret

00000876 <__vector_16>:
//ISR for Timer 0 compare interrupt
ISR(TIMER0_COMP_vect){
     876:	1f 92       	push	r1
     878:	0f 92       	push	r0
     87a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     87e:	0f 92       	push	r0
     880:	11 24       	eor	r1, r1
     882:	8f 93       	push	r24
     884:	9f 93       	push	r25
     886:	af 93       	push	r26
     888:	bf 93       	push	r27
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	cd b7       	in	r28, 0x3d	; 61
     890:	de b7       	in	r29, 0x3e	; 62
	
	sys_time++; //system time generation
     892:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sys_time>
     896:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <sys_time+0x1>
     89a:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <sys_time+0x2>
     89e:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <sys_time+0x3>
     8a2:	01 96       	adiw	r24, 0x01	; 1
     8a4:	a1 1d       	adc	r26, r1
     8a6:	b1 1d       	adc	r27, r1
     8a8:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <sys_time>
     8ac:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <sys_time+0x1>
     8b0:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <sys_time+0x2>
     8b4:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <sys_time+0x3>

}
     8b8:	00 00       	nop
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	bf 91       	pop	r27
     8c0:	af 91       	pop	r26
     8c2:	9f 91       	pop	r25
     8c4:	8f 91       	pop	r24
     8c6:	0f 90       	pop	r0
     8c8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     8cc:	0f 90       	pop	r0
     8ce:	1f 90       	pop	r1
     8d0:	18 95       	reti

000008d2 <servo_timer_config>:

		shift_locktime -= 1;
	}else{
		shiftlock = FALSE;
	}
}
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	cd b7       	in	r28, 0x3d	; 61
     8d8:	de b7       	in	r29, 0x3e	; 62
     8da:	81 e8       	ldi	r24, 0x81	; 129
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	21 e8       	ldi	r18, 0x81	; 129
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	f9 01       	movw	r30, r18
     8e4:	20 81       	ld	r18, Z
     8e6:	2a 60       	ori	r18, 0x0A	; 10
     8e8:	fc 01       	movw	r30, r24
     8ea:	20 83       	st	Z, r18
     8ec:	8f e6       	ldi	r24, 0x6F	; 111
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	2f e6       	ldi	r18, 0x6F	; 111
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	f9 01       	movw	r30, r18
     8f6:	20 81       	ld	r18, Z
     8f8:	22 60       	ori	r18, 0x02	; 2
     8fa:	fc 01       	movw	r30, r24
     8fc:	20 83       	st	Z, r18
     8fe:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <calculated_ticks>
     902:	88 23       	and	r24, r24
     904:	09 f4       	brne	.+2      	; 0x908 <servo_timer_config+0x36>
     906:	04 d0       	rcall	.+8      	; 0x910 <calculate_general_ticks>
     908:	00 00       	nop
     90a:	df 91       	pop	r29
     90c:	cf 91       	pop	r28
     90e:	08 95       	ret

00000910 <calculate_general_ticks>:
     910:	cf 93       	push	r28
     912:	df 93       	push	r29
     914:	cd b7       	in	r28, 0x3d	; 61
     916:	de b7       	in	r29, 0x3e	; 62
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	86 ef       	ldi	r24, 0xF6	; 246
     91e:	92 e4       	ldi	r25, 0x42	; 66
     920:	42 d1       	rcall	.+644    	; 0xba6 <calculate_Servo_ticks>
     922:	90 93 1e 01 	sts	0x011E, r25	; 0x80011e <time_up+0x1>
     926:	80 93 1d 01 	sts	0x011D, r24	; 0x80011d <time_up>
     92a:	60 e0       	ldi	r22, 0x00	; 0
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	80 e4       	ldi	r24, 0x40	; 64
     930:	90 e4       	ldi	r25, 0x40	; 64
     932:	39 d1       	rcall	.+626    	; 0xba6 <calculate_Servo_ticks>
     934:	90 93 1c 01 	sts	0x011C, r25	; 0x80011c <time_down+0x1>
     938:	80 93 1b 01 	sts	0x011B, r24	; 0x80011b <time_down>
     93c:	60 e0       	ldi	r22, 0x00	; 0
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	8a eb       	ldi	r24, 0xBA	; 186
     942:	92 e4       	ldi	r25, 0x42	; 66
     944:	30 d1       	rcall	.+608    	; 0xba6 <calculate_Servo_ticks>
     946:	90 93 1a 01 	sts	0x011A, r25	; 0x80011a <time_neutral+0x1>
     94a:	80 93 19 01 	sts	0x0119, r24	; 0x800119 <time_neutral>
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	8c e7       	ldi	r24, 0x7C	; 124
     954:	92 e4       	ldi	r25, 0x42	; 66
     956:	27 d1       	rcall	.+590    	; 0xba6 <calculate_Servo_ticks>
     958:	90 93 20 01 	sts	0x0120, r25	; 0x800120 <time_mid+0x1>
     95c:	80 93 1f 01 	sts	0x011F, r24	; 0x80011f <time_mid>
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <calculated_ticks>
     966:	00 00       	nop
     968:	df 91       	pop	r29
     96a:	cf 91       	pop	r28
     96c:	08 95       	ret

0000096e <shift_control>:
     96e:	ef 92       	push	r14
     970:	ff 92       	push	r15
     972:	0f 93       	push	r16
     974:	1f 93       	push	r17
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	00 d0       	rcall	.+0      	; 0x97c <shift_control+0xe>
     97c:	00 d0       	rcall	.+0      	; 0x97e <shift_control+0x10>
     97e:	1f 92       	push	r1
     980:	cd b7       	in	r28, 0x3d	; 61
     982:	de b7       	in	r29, 0x3e	; 62
     984:	89 83       	std	Y+1, r24	; 0x01
     986:	6a 83       	std	Y+2, r22	; 0x02
     988:	4b 83       	std	Y+3, r20	; 0x03
     98a:	3d 83       	std	Y+5, r19	; 0x05
     98c:	2c 83       	std	Y+4, r18	; 0x04
     98e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <shiftlock>
     992:	88 23       	and	r24, r24
     994:	09 f0       	breq	.+2      	; 0x998 <shift_control+0x2a>
     996:	63 c0       	rjmp	.+198    	; 0xa5e <shift_control+0xf0>
     998:	89 81       	ldd	r24, Y+1	; 0x01
     99a:	81 30       	cpi	r24, 0x01	; 1
     99c:	21 f0       	breq	.+8      	; 0x9a6 <shift_control+0x38>
     99e:	8a 81       	ldd	r24, Y+2	; 0x02
     9a0:	81 30       	cpi	r24, 0x01	; 1
     9a2:	09 f0       	breq	.+2      	; 0x9a6 <shift_control+0x38>
     9a4:	5c c0       	rjmp	.+184    	; 0xa5e <shift_control+0xf0>
     9a6:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <sys_time>
     9aa:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <sys_time+0x1>
     9ae:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <sys_time+0x2>
     9b2:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <sys_time+0x3>
     9b6:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <time_shift_started>
     9ba:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <time_shift_started+0x1>
     9be:	a0 93 25 01 	sts	0x0125, r26	; 0x800125 <time_shift_started+0x2>
     9c2:	b0 93 26 01 	sts	0x0126, r27	; 0x800126 <time_shift_started+0x3>
     9c6:	89 81       	ldd	r24, Y+1	; 0x01
     9c8:	88 23       	and	r24, r24
     9ca:	d9 f0       	breq	.+54     	; 0xa02 <shift_control+0x94>
     9cc:	8b 81       	ldd	r24, Y+3	; 0x03
     9ce:	85 30       	cpi	r24, 0x05	; 5
     9d0:	c0 f4       	brcc	.+48     	; 0xa02 <shift_control+0x94>
     9d2:	84 ef       	ldi	r24, 0xF4	; 244
     9d4:	91 e0       	ldi	r25, 0x01	; 1
     9d6:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <shift_locktime+0x1>
     9da:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <shift_locktime>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <shiftlock>
     9e4:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <shift>
     9e8:	84 ef       	ldi	r24, 0xF4	; 244
     9ea:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <servo_locktime_gear>
     9ee:	8b 81       	ldd	r24, Y+3	; 0x03
     9f0:	8f 5f       	subi	r24, 0xFF	; 255
     9f2:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <gear_desired>
     9f6:	8a ef       	ldi	r24, 0xFA	; 250
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <shift_duration_current+0x1>
     9fe:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <shift_duration_current>
     a02:	8a 81       	ldd	r24, Y+2	; 0x02
     a04:	88 23       	and	r24, r24
     a06:	09 f4       	brne	.+2      	; 0xa0a <shift_control+0x9c>
     a08:	be c0       	rjmp	.+380    	; 0xb86 <shift_control+0x218>
     a0a:	8b 81       	ldd	r24, Y+3	; 0x03
     a0c:	88 23       	and	r24, r24
     a0e:	09 f4       	brne	.+2      	; 0xa12 <shift_control+0xa4>
     a10:	ba c0       	rjmp	.+372    	; 0xb86 <shift_control+0x218>
     a12:	84 ef       	ldi	r24, 0xF4	; 244
     a14:	91 e0       	ldi	r25, 0x01	; 1
     a16:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <shift_locktime+0x1>
     a1a:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <shift_locktime>
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	80 93 13 01 	sts	0x0113, r24	; 0x800113 <shiftlock>
     a24:	82 e0       	ldi	r24, 0x02	; 2
     a26:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <shift>
     a2a:	84 ef       	ldi	r24, 0xF4	; 244
     a2c:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <servo_locktime_gear>
     a30:	8a ef       	ldi	r24, 0xFA	; 250
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	90 93 28 01 	sts	0x0128, r25	; 0x800128 <shift_duration_current+0x1>
     a38:	80 93 27 01 	sts	0x0127, r24	; 0x800127 <shift_duration_current>
     a3c:	8b 81       	ldd	r24, Y+3	; 0x03
     a3e:	81 50       	subi	r24, 0x01	; 1
     a40:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <gear_desired>
     a44:	8b 81       	ldd	r24, Y+3	; 0x03
     a46:	81 30       	cpi	r24, 0x01	; 1
     a48:	09 f0       	breq	.+2      	; 0xa4c <shift_control+0xde>
     a4a:	9d c0       	rjmp	.+314    	; 0xb86 <shift_control+0x218>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <shift>
     a52:	8e e5       	ldi	r24, 0x5E	; 94
     a54:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <servo_locktime_gear>
     a58:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <gear_desired>
     a5c:	94 c0       	rjmp	.+296    	; 0xb86 <shift_control+0x218>
     a5e:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <sys_time>
     a62:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <sys_time+0x1>
     a66:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <sys_time+0x2>
     a6a:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <sys_time+0x3>
     a6e:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <time_shift_started>
     a72:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <time_shift_started+0x1>
     a76:	a0 91 25 01 	lds	r26, 0x0125	; 0x800125 <time_shift_started+0x2>
     a7a:	b0 91 26 01 	lds	r27, 0x0126	; 0x800126 <time_shift_started+0x3>
     a7e:	28 1b       	sub	r18, r24
     a80:	39 0b       	sbc	r19, r25
     a82:	4a 0b       	sbc	r20, r26
     a84:	5b 0b       	sbc	r21, r27
     a86:	80 91 27 01 	lds	r24, 0x0127	; 0x800127 <shift_duration_current>
     a8a:	90 91 28 01 	lds	r25, 0x0128	; 0x800128 <shift_duration_current+0x1>
     a8e:	cc 01       	movw	r24, r24
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	28 17       	cp	r18, r24
     a96:	39 07       	cpc	r19, r25
     a98:	4a 07       	cpc	r20, r26
     a9a:	5b 07       	cpc	r21, r27
     a9c:	08 f0       	brcs	.+2      	; 0xaa0 <shift_control+0x132>
     a9e:	5f c0       	rjmp	.+190    	; 0xb5e <shift_control+0x1f0>
     aa0:	90 91 21 01 	lds	r25, 0x0121	; 0x800121 <gear_desired>
     aa4:	8b 81       	ldd	r24, Y+3	; 0x03
     aa6:	98 17       	cp	r25, r24
     aa8:	09 f4       	brne	.+2      	; 0xaac <shift_control+0x13e>
     aaa:	59 c0       	rjmp	.+178    	; 0xb5e <shift_control+0x1f0>
     aac:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <deg_set>
     ab0:	88 23       	and	r24, r24
     ab2:	51 f5       	brne	.+84     	; 0xb08 <shift_control+0x19a>
     ab4:	81 e0       	ldi	r24, 0x01	; 1
     ab6:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <deg_set>
     aba:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <shift>
     abe:	88 2f       	mov	r24, r24
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	81 30       	cpi	r24, 0x01	; 1
     ac4:	91 05       	cpc	r25, r1
     ac6:	71 f0       	breq	.+28     	; 0xae4 <shift_control+0x176>
     ac8:	82 30       	cpi	r24, 0x02	; 2
     aca:	91 05       	cpc	r25, r1
     acc:	a1 f0       	breq	.+40     	; 0xaf6 <shift_control+0x188>
     ace:	89 2b       	or	r24, r25
     ad0:	d9 f4       	brne	.+54     	; 0xb08 <shift_control+0x19a>
     ad2:	80 91 1b 01 	lds	r24, 0x011B	; 0x80011b <time_down>
     ad6:	90 91 1c 01 	lds	r25, 0x011C	; 0x80011c <time_down+0x1>
     ada:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <shift_time+0x1>
     ade:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <shift_time>
     ae2:	12 c0       	rjmp	.+36     	; 0xb08 <shift_control+0x19a>
     ae4:	80 91 19 01 	lds	r24, 0x0119	; 0x800119 <time_neutral>
     ae8:	90 91 1a 01 	lds	r25, 0x011A	; 0x80011a <time_neutral+0x1>
     aec:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <shift_time+0x1>
     af0:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <shift_time>
     af4:	09 c0       	rjmp	.+18     	; 0xb08 <shift_control+0x19a>
     af6:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <time_up>
     afa:	90 91 1e 01 	lds	r25, 0x011E	; 0x80011e <time_up+0x1>
     afe:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <shift_time+0x1>
     b02:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <shift_time>
     b06:	00 00       	nop
     b08:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <sys_time>
     b0c:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <sys_time+0x1>
     b10:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <sys_time+0x2>
     b14:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <sys_time+0x3>
     b18:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <time_shift_started>
     b1c:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <time_shift_started+0x1>
     b20:	a0 91 25 01 	lds	r26, 0x0125	; 0x800125 <time_shift_started+0x2>
     b24:	b0 91 26 01 	lds	r27, 0x0126	; 0x800126 <time_shift_started+0x3>
     b28:	79 01       	movw	r14, r18
     b2a:	8a 01       	movw	r16, r20
     b2c:	e8 1a       	sub	r14, r24
     b2e:	f9 0a       	sbc	r15, r25
     b30:	0a 0b       	sbc	r16, r26
     b32:	1b 0b       	sbc	r17, r27
     b34:	d8 01       	movw	r26, r16
     b36:	c7 01       	movw	r24, r14
     b38:	cd 97       	sbiw	r24, 0x3d	; 61
     b3a:	a1 05       	cpc	r26, r1
     b3c:	b1 05       	cpc	r27, r1
     b3e:	28 f1       	brcs	.+74     	; 0xb8a <shift_control+0x21c>
     b40:	8c 81       	ldd	r24, Y+4	; 0x04
     b42:	9d 81       	ldd	r25, Y+5	; 0x05
     b44:	8d 3a       	cpi	r24, 0xAD	; 173
     b46:	9d 40       	sbci	r25, 0x0D	; 13
     b48:	00 f1       	brcs	.+64     	; 0xb8a <shift_control+0x21c>
     b4a:	82 e2       	ldi	r24, 0x22	; 34
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	22 e2       	ldi	r18, 0x22	; 34
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	f9 01       	movw	r30, r18
     b54:	20 81       	ld	r18, Z
     b56:	21 60       	ori	r18, 0x01	; 1
     b58:	fc 01       	movw	r30, r24
     b5a:	20 83       	st	Z, r18
     b5c:	16 c0       	rjmp	.+44     	; 0xb8a <shift_control+0x21c>
     b5e:	82 e2       	ldi	r24, 0x22	; 34
     b60:	90 e0       	ldi	r25, 0x00	; 0
     b62:	22 e2       	ldi	r18, 0x22	; 34
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	f9 01       	movw	r30, r18
     b68:	20 81       	ld	r18, Z
     b6a:	2e 7f       	andi	r18, 0xFE	; 254
     b6c:	fc 01       	movw	r30, r24
     b6e:	20 83       	st	Z, r18
     b70:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <time_mid>
     b74:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <time_mid+0x1>
     b78:	90 93 18 01 	sts	0x0118, r25	; 0x800118 <shift_time+0x1>
     b7c:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <shift_time>
     b80:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <deg_set>
     b84:	03 c0       	rjmp	.+6      	; 0xb8c <shift_control+0x21e>
     b86:	00 00       	nop
     b88:	01 c0       	rjmp	.+2      	; 0xb8c <shift_control+0x21e>
     b8a:	00 00       	nop
     b8c:	00 00       	nop
     b8e:	0f 90       	pop	r0
     b90:	0f 90       	pop	r0
     b92:	0f 90       	pop	r0
     b94:	0f 90       	pop	r0
     b96:	0f 90       	pop	r0
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	1f 91       	pop	r17
     b9e:	0f 91       	pop	r16
     ba0:	ff 90       	pop	r15
     ba2:	ef 90       	pop	r14
     ba4:	08 95       	ret

00000ba6 <calculate_Servo_ticks>:
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	00 d0       	rcall	.+0      	; 0xbac <calculate_Servo_ticks+0x6>
     bac:	00 d0       	rcall	.+0      	; 0xbae <calculate_Servo_ticks+0x8>
     bae:	cd b7       	in	r28, 0x3d	; 61
     bb0:	de b7       	in	r29, 0x3e	; 62
     bb2:	69 83       	std	Y+1, r22	; 0x01
     bb4:	7a 83       	std	Y+2, r23	; 0x02
     bb6:	8b 83       	std	Y+3, r24	; 0x03
     bb8:	9c 83       	std	Y+4, r25	; 0x04
     bba:	2b e3       	ldi	r18, 0x3B	; 59
     bbc:	31 eb       	ldi	r19, 0xB1	; 177
     bbe:	43 e9       	ldi	r20, 0x93	; 147
     bc0:	51 e4       	ldi	r21, 0x41	; 65
     bc2:	69 81       	ldd	r22, Y+1	; 0x01
     bc4:	7a 81       	ldd	r23, Y+2	; 0x02
     bc6:	8b 81       	ldd	r24, Y+3	; 0x03
     bc8:	9c 81       	ldd	r25, Y+4	; 0x04
     bca:	e0 d2       	rcall	.+1472   	; 0x118c <__mulsf3>
     bcc:	dc 01       	movw	r26, r24
     bce:	cb 01       	movw	r24, r22
     bd0:	20 e0       	ldi	r18, 0x00	; 0
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	41 ee       	ldi	r20, 0xE1	; 225
     bd6:	54 e4       	ldi	r21, 0x44	; 68
     bd8:	bc 01       	movw	r22, r24
     bda:	cd 01       	movw	r24, r26
     bdc:	51 d1       	rcall	.+674    	; 0xe80 <__addsf3>
     bde:	dc 01       	movw	r26, r24
     be0:	cb 01       	movw	r24, r22
     be2:	bc 01       	movw	r22, r24
     be4:	cd 01       	movw	r24, r26
     be6:	18 d2       	rcall	.+1072   	; 0x1018 <__fixunssfsi>
     be8:	dc 01       	movw	r26, r24
     bea:	cb 01       	movw	r24, r22
     bec:	0f 90       	pop	r0
     bee:	0f 90       	pop	r0
     bf0:	0f 90       	pop	r0
     bf2:	0f 90       	pop	r0
     bf4:	df 91       	pop	r29
     bf6:	cf 91       	pop	r28
     bf8:	08 95       	ret

00000bfa <clutch_control>:
void clutch_control(uint8_t clutch, uint8_t clutch_speed){
     bfa:	cf 93       	push	r28
     bfc:	df 93       	push	r29
     bfe:	00 d0       	rcall	.+0      	; 0xc00 <clutch_control+0x6>
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	89 83       	std	Y+1, r24	; 0x01
     c06:	6a 83       	std	Y+2, r22	; 0x02
	

	if(clutch==TRUE){
     c08:	89 81       	ldd	r24, Y+1	; 0x01
     c0a:	81 30       	cpi	r24, 0x01	; 1
     c0c:	09 f0       	breq	.+2      	; 0xc10 <clutch_control+0x16>
     c0e:	53 c0       	rjmp	.+166    	; 0xcb6 <clutch_control+0xbc>

		clutch_angle = CLUTCH_MAX_ANGLE;
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	a0 ef       	ldi	r26, 0xF0	; 240
     c16:	b2 e4       	ldi	r27, 0x42	; 66
     c18:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <clutch_angle>
     c1c:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <clutch_angle+0x1>
     c20:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <clutch_angle+0x2>
     c24:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <clutch_angle+0x3>
		clutch_time = calculate_Servo_ticks(clutch_angle);
     c28:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <clutch_angle>
     c2c:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <clutch_angle+0x1>
     c30:	a0 91 2d 01 	lds	r26, 0x012D	; 0x80012d <clutch_angle+0x2>
     c34:	b0 91 2e 01 	lds	r27, 0x012E	; 0x80012e <clutch_angle+0x3>
     c38:	bc 01       	movw	r22, r24
     c3a:	cd 01       	movw	r24, r26
     c3c:	b4 df       	rcall	.-152    	; 0xba6 <calculate_Servo_ticks>
     c3e:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <clutch_time+0x1>
     c42:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <clutch_time>
		clutch_period = 500*(clutch_speed);
     c46:	8a 81       	ldd	r24, Y+2	; 0x02
     c48:	28 2f       	mov	r18, r24
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	84 ef       	ldi	r24, 0xF4	; 244
     c4e:	91 e0       	ldi	r25, 0x01	; 1
     c50:	28 9f       	mul	r18, r24
     c52:	a0 01       	movw	r20, r0
     c54:	29 9f       	mul	r18, r25
     c56:	50 0d       	add	r21, r0
     c58:	38 9f       	mul	r19, r24
     c5a:	50 0d       	add	r21, r0
     c5c:	11 24       	eor	r1, r1
     c5e:	ca 01       	movw	r24, r20
     c60:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <clutch_period+0x1>
     c64:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <clutch_period>
		pitch = (double)(CLUTCH_MAX_ANGLE)/(clutch_period/10.0);
     c68:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <clutch_period>
     c6c:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <clutch_period+0x1>
     c70:	cc 01       	movw	r24, r24
     c72:	a0 e0       	ldi	r26, 0x00	; 0
     c74:	b0 e0       	ldi	r27, 0x00	; 0
     c76:	bc 01       	movw	r22, r24
     c78:	cd 01       	movw	r24, r26
     c7a:	fa d1       	rcall	.+1012   	; 0x1070 <__floatunsisf>
     c7c:	dc 01       	movw	r26, r24
     c7e:	cb 01       	movw	r24, r22
     c80:	20 e0       	ldi	r18, 0x00	; 0
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	40 e2       	ldi	r20, 0x20	; 32
     c86:	51 e4       	ldi	r21, 0x41	; 65
     c88:	bc 01       	movw	r22, r24
     c8a:	cd 01       	movw	r24, r26
     c8c:	5d d1       	rcall	.+698    	; 0xf48 <__divsf3>
     c8e:	dc 01       	movw	r26, r24
     c90:	cb 01       	movw	r24, r22
     c92:	9c 01       	movw	r18, r24
     c94:	ad 01       	movw	r20, r26
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	80 ef       	ldi	r24, 0xF0	; 240
     c9c:	92 e4       	ldi	r25, 0x42	; 66
     c9e:	54 d1       	rcall	.+680    	; 0xf48 <__divsf3>
     ca0:	dc 01       	movw	r26, r24
     ca2:	cb 01       	movw	r24, r22
     ca4:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <pitch>
     ca8:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <pitch+0x1>
     cac:	a0 93 31 01 	sts	0x0131, r26	; 0x800131 <pitch+0x2>
     cb0:	b0 93 32 01 	sts	0x0132, r27	; 0x800132 <pitch+0x3>
			clutch_angle = clutch_angle-pitch;
			clutch_time = calculate_Servo_ticks(clutch_angle);
			clutch_period -= 10;
		}
	}
}
     cb4:	3b c0       	rjmp	.+118    	; 0xd2c <clutch_control+0x132>
		clutch_time = calculate_Servo_ticks(clutch_angle);
		clutch_period = 500*(clutch_speed);
		pitch = (double)(CLUTCH_MAX_ANGLE)/(clutch_period/10.0);
	
	}else{
		if(clutch_period > 0){
     cb6:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <clutch_period>
     cba:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <clutch_period+0x1>
     cbe:	89 2b       	or	r24, r25
     cc0:	a9 f1       	breq	.+106    	; 0xd2c <clutch_control+0x132>
			clutch_angle = clutch_angle-pitch;
     cc2:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <clutch_angle>
     cc6:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <clutch_angle+0x1>
     cca:	a0 91 2d 01 	lds	r26, 0x012D	; 0x80012d <clutch_angle+0x2>
     cce:	b0 91 2e 01 	lds	r27, 0x012E	; 0x80012e <clutch_angle+0x3>
     cd2:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <pitch>
     cd6:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <pitch+0x1>
     cda:	40 91 31 01 	lds	r20, 0x0131	; 0x800131 <pitch+0x2>
     cde:	50 91 32 01 	lds	r21, 0x0132	; 0x800132 <pitch+0x3>
     ce2:	bc 01       	movw	r22, r24
     ce4:	cd 01       	movw	r24, r26
     ce6:	cb d0       	rcall	.+406    	; 0xe7e <__subsf3>
     ce8:	dc 01       	movw	r26, r24
     cea:	cb 01       	movw	r24, r22
     cec:	80 93 2b 01 	sts	0x012B, r24	; 0x80012b <clutch_angle>
     cf0:	90 93 2c 01 	sts	0x012C, r25	; 0x80012c <clutch_angle+0x1>
     cf4:	a0 93 2d 01 	sts	0x012D, r26	; 0x80012d <clutch_angle+0x2>
     cf8:	b0 93 2e 01 	sts	0x012E, r27	; 0x80012e <clutch_angle+0x3>
			clutch_time = calculate_Servo_ticks(clutch_angle);
     cfc:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <clutch_angle>
     d00:	90 91 2c 01 	lds	r25, 0x012C	; 0x80012c <clutch_angle+0x1>
     d04:	a0 91 2d 01 	lds	r26, 0x012D	; 0x80012d <clutch_angle+0x2>
     d08:	b0 91 2e 01 	lds	r27, 0x012E	; 0x80012e <clutch_angle+0x3>
     d0c:	bc 01       	movw	r22, r24
     d0e:	cd 01       	movw	r24, r26
     d10:	4a df       	rcall	.-364    	; 0xba6 <calculate_Servo_ticks>
     d12:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <clutch_time+0x1>
     d16:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <clutch_time>
			clutch_period -= 10;
     d1a:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <clutch_period>
     d1e:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <clutch_period+0x1>
     d22:	0a 97       	sbiw	r24, 0x0a	; 10
     d24:	90 93 2a 01 	sts	0x012A, r25	; 0x80012a <clutch_period+0x1>
     d28:	80 93 29 01 	sts	0x0129, r24	; 0x800129 <clutch_period>
		}
	}
}
     d2c:	00 00       	nop
     d2e:	0f 90       	pop	r0
     d30:	0f 90       	pop	r0
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	08 95       	ret

00000d38 <calculate_locktimes>:

void calculate_locktimes(){
     d38:	cf 93       	push	r28
     d3a:	df 93       	push	r29
     d3c:	cd b7       	in	r28, 0x3d	; 61
     d3e:	de b7       	in	r29, 0x3e	; 62
	
	//locktime calculations
	if (servo_locktime_gear > 0){
     d40:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <servo_locktime_gear>
     d44:	88 23       	and	r24, r24
     d46:	29 f0       	breq	.+10     	; 0xd52 <calculate_locktimes+0x1a>
		servo_locktime_gear-=10;
     d48:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <servo_locktime_gear>
     d4c:	8a 50       	subi	r24, 0x0A	; 10
     d4e:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <servo_locktime_gear>
	}
	if (servo_locktime_clutch > 0)
     d52:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <servo_locktime_clutch>
     d56:	88 23       	and	r24, r24
     d58:	29 f0       	breq	.+10     	; 0xd64 <calculate_locktimes+0x2c>
	servo_locktime_clutch-=10;
     d5a:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <servo_locktime_clutch>
     d5e:	8a 50       	subi	r24, 0x0A	; 10
     d60:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <servo_locktime_clutch>
	if(shift_locktime > 0){
     d64:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <shift_locktime>
     d68:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <shift_locktime+0x1>
     d6c:	89 2b       	or	r24, r25
     d6e:	51 f0       	breq	.+20     	; 0xd84 <calculate_locktimes+0x4c>

		shift_locktime -= 10;
     d70:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <shift_locktime>
     d74:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <shift_locktime+0x1>
     d78:	0a 97       	sbiw	r24, 0x0a	; 10
     d7a:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <shift_locktime+0x1>
     d7e:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <shift_locktime>
		}else{
		shiftlock = FALSE;
	}	
}
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <calculate_locktimes+0x50>
	servo_locktime_clutch-=10;
	if(shift_locktime > 0){

		shift_locktime -= 10;
		}else{
		shiftlock = FALSE;
     d84:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <shiftlock>
	}	
}
     d88:	00 00       	nop
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	08 95       	ret

00000d90 <__vector_12>:
ISR(TIMER1_COMPA_vect){
     d90:	1f 92       	push	r1
     d92:	0f 92       	push	r0
     d94:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     d98:	0f 92       	push	r0
     d9a:	11 24       	eor	r1, r1
     d9c:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     da0:	0f 92       	push	r0
     da2:	2f 93       	push	r18
     da4:	3f 93       	push	r19
     da6:	8f 93       	push	r24
     da8:	9f 93       	push	r25
     daa:	ef 93       	push	r30
     dac:	ff 93       	push	r31
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
	
	//disable interrupts
	cli();
     db6:	f8 94       	cli
	
	switch (servo_active)
     db8:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <servo_active>
     dbc:	88 2f       	mov	r24, r24
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	00 97       	sbiw	r24, 0x00	; 0
     dc2:	19 f0       	breq	.+6      	; 0xdca <__vector_12+0x3a>
     dc4:	01 97       	sbiw	r24, 0x01	; 1
     dc6:	21 f1       	breq	.+72     	; 0xe10 <__vector_12+0x80>
     dc8:	47 c0       	rjmp	.+142    	; 0xe58 <__vector_12+0xc8>
	{	
		//shiftservo case
		case 0:
			//toggle old servo
			SERVO_CLUTCH_PORT &= ~(1<<SERVO_CLUTCH_PIN);
     dca:	85 e2       	ldi	r24, 0x25	; 37
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	25 e2       	ldi	r18, 0x25	; 37
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	f9 01       	movw	r30, r18
     dd4:	20 81       	ld	r18, Z
     dd6:	2f 7d       	andi	r18, 0xDF	; 223
     dd8:	fc 01       	movw	r30, r24
     dda:	20 83       	st	Z, r18
			//if locktime elapsed pull up the signal pin
			//if the servo is shifting
			if (shiftlock){
     ddc:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <shiftlock>
     de0:	88 23       	and	r24, r24
     de2:	49 f0       	breq	.+18     	; 0xdf6 <__vector_12+0x66>
				SERVO_SHIFT_PORT |= (1<<SERVO_SHIFT_PIN);
     de4:	85 e2       	ldi	r24, 0x25	; 37
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	25 e2       	ldi	r18, 0x25	; 37
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	f9 01       	movw	r30, r18
     dee:	20 81       	ld	r18, Z
     df0:	20 61       	ori	r18, 0x10	; 16
     df2:	fc 01       	movw	r30, r24
     df4:	20 83       	st	Z, r18
			}
			//set the interrupt compare value to the desired time
			OCR1A = shift_time;
     df6:	88 e8       	ldi	r24, 0x88	; 136
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <shift_time>
     dfe:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <shift_time+0x1>
     e02:	fc 01       	movw	r30, r24
     e04:	31 83       	std	Z+1, r19	; 0x01
     e06:	20 83       	st	Z, r18
			//change var to get to the next case
			servo_active = 1;
     e08:	81 e0       	ldi	r24, 0x01	; 1
     e0a:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <servo_active>
			break;
     e0e:	24 c0       	rjmp	.+72     	; 0xe58 <__vector_12+0xc8>
		
		//clutchservo
		case 1:
			//toggle old servo
			SERVO_SHIFT_PORT &= ~(1<<SERVO_SHIFT_PIN);
     e10:	85 e2       	ldi	r24, 0x25	; 37
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	25 e2       	ldi	r18, 0x25	; 37
     e16:	30 e0       	ldi	r19, 0x00	; 0
     e18:	f9 01       	movw	r30, r18
     e1a:	20 81       	ld	r18, Z
     e1c:	2f 7e       	andi	r18, 0xEF	; 239
     e1e:	fc 01       	movw	r30, r24
     e20:	20 83       	st	Z, r18
			//if locktime elapsed pull up the signal pin
			if (clutch_period > 0){
     e22:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <clutch_period>
     e26:	90 91 2a 01 	lds	r25, 0x012A	; 0x80012a <clutch_period+0x1>
     e2a:	89 2b       	or	r24, r25
     e2c:	49 f0       	breq	.+18     	; 0xe40 <__vector_12+0xb0>
				SERVO_CLUTCH_PORT |= (1<<SERVO_CLUTCH_PIN);
     e2e:	85 e2       	ldi	r24, 0x25	; 37
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	25 e2       	ldi	r18, 0x25	; 37
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	f9 01       	movw	r30, r18
     e38:	20 81       	ld	r18, Z
     e3a:	20 62       	ori	r18, 0x20	; 32
     e3c:	fc 01       	movw	r30, r24
     e3e:	20 83       	st	Z, r18
			}
			//set the interrupt compare value to the desired time
			OCR1A = clutch_time;
     e40:	88 e8       	ldi	r24, 0x88	; 136
     e42:	90 e0       	ldi	r25, 0x00	; 0
     e44:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <clutch_time>
     e48:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <clutch_time+0x1>
     e4c:	fc 01       	movw	r30, r24
     e4e:	31 83       	std	Z+1, r19	; 0x01
     e50:	20 83       	st	Z, r18
			//change var to get to the next case
			servo_active = 0;
     e52:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <servo_active>
			break;
     e56:	00 00       	nop

	}
	//re enable interrupts
	sei();
     e58:	78 94       	sei
}
     e5a:	00 00       	nop
     e5c:	df 91       	pop	r29
     e5e:	cf 91       	pop	r28
     e60:	ff 91       	pop	r31
     e62:	ef 91       	pop	r30
     e64:	9f 91       	pop	r25
     e66:	8f 91       	pop	r24
     e68:	3f 91       	pop	r19
     e6a:	2f 91       	pop	r18
     e6c:	0f 90       	pop	r0
     e6e:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     e72:	0f 90       	pop	r0
     e74:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     e78:	0f 90       	pop	r0
     e7a:	1f 90       	pop	r1
     e7c:	18 95       	reti

00000e7e <__subsf3>:
     e7e:	50 58       	subi	r21, 0x80	; 128

00000e80 <__addsf3>:
     e80:	bb 27       	eor	r27, r27
     e82:	aa 27       	eor	r26, r26
     e84:	0e d0       	rcall	.+28     	; 0xea2 <__addsf3x>
     e86:	48 c1       	rjmp	.+656    	; 0x1118 <__fp_round>
     e88:	39 d1       	rcall	.+626    	; 0x10fc <__fp_pscA>
     e8a:	30 f0       	brcs	.+12     	; 0xe98 <__addsf3+0x18>
     e8c:	3e d1       	rcall	.+636    	; 0x110a <__fp_pscB>
     e8e:	20 f0       	brcs	.+8      	; 0xe98 <__addsf3+0x18>
     e90:	31 f4       	brne	.+12     	; 0xe9e <__addsf3+0x1e>
     e92:	9f 3f       	cpi	r25, 0xFF	; 255
     e94:	11 f4       	brne	.+4      	; 0xe9a <__addsf3+0x1a>
     e96:	1e f4       	brtc	.+6      	; 0xe9e <__addsf3+0x1e>
     e98:	2e c1       	rjmp	.+604    	; 0x10f6 <__fp_nan>
     e9a:	0e f4       	brtc	.+2      	; 0xe9e <__addsf3+0x1e>
     e9c:	e0 95       	com	r30
     e9e:	e7 fb       	bst	r30, 7
     ea0:	24 c1       	rjmp	.+584    	; 0x10ea <__fp_inf>

00000ea2 <__addsf3x>:
     ea2:	e9 2f       	mov	r30, r25
     ea4:	4a d1       	rcall	.+660    	; 0x113a <__fp_split3>
     ea6:	80 f3       	brcs	.-32     	; 0xe88 <__addsf3+0x8>
     ea8:	ba 17       	cp	r27, r26
     eaa:	62 07       	cpc	r22, r18
     eac:	73 07       	cpc	r23, r19
     eae:	84 07       	cpc	r24, r20
     eb0:	95 07       	cpc	r25, r21
     eb2:	18 f0       	brcs	.+6      	; 0xeba <__addsf3x+0x18>
     eb4:	71 f4       	brne	.+28     	; 0xed2 <__addsf3x+0x30>
     eb6:	9e f5       	brtc	.+102    	; 0xf1e <__addsf3x+0x7c>
     eb8:	62 c1       	rjmp	.+708    	; 0x117e <__fp_zero>
     eba:	0e f4       	brtc	.+2      	; 0xebe <__addsf3x+0x1c>
     ebc:	e0 95       	com	r30
     ebe:	0b 2e       	mov	r0, r27
     ec0:	ba 2f       	mov	r27, r26
     ec2:	a0 2d       	mov	r26, r0
     ec4:	0b 01       	movw	r0, r22
     ec6:	b9 01       	movw	r22, r18
     ec8:	90 01       	movw	r18, r0
     eca:	0c 01       	movw	r0, r24
     ecc:	ca 01       	movw	r24, r20
     ece:	a0 01       	movw	r20, r0
     ed0:	11 24       	eor	r1, r1
     ed2:	ff 27       	eor	r31, r31
     ed4:	59 1b       	sub	r21, r25
     ed6:	99 f0       	breq	.+38     	; 0xefe <__addsf3x+0x5c>
     ed8:	59 3f       	cpi	r21, 0xF9	; 249
     eda:	50 f4       	brcc	.+20     	; 0xef0 <__addsf3x+0x4e>
     edc:	50 3e       	cpi	r21, 0xE0	; 224
     ede:	68 f1       	brcs	.+90     	; 0xf3a <__addsf3x+0x98>
     ee0:	1a 16       	cp	r1, r26
     ee2:	f0 40       	sbci	r31, 0x00	; 0
     ee4:	a2 2f       	mov	r26, r18
     ee6:	23 2f       	mov	r18, r19
     ee8:	34 2f       	mov	r19, r20
     eea:	44 27       	eor	r20, r20
     eec:	58 5f       	subi	r21, 0xF8	; 248
     eee:	f3 cf       	rjmp	.-26     	; 0xed6 <__addsf3x+0x34>
     ef0:	46 95       	lsr	r20
     ef2:	37 95       	ror	r19
     ef4:	27 95       	ror	r18
     ef6:	a7 95       	ror	r26
     ef8:	f0 40       	sbci	r31, 0x00	; 0
     efa:	53 95       	inc	r21
     efc:	c9 f7       	brne	.-14     	; 0xef0 <__addsf3x+0x4e>
     efe:	7e f4       	brtc	.+30     	; 0xf1e <__addsf3x+0x7c>
     f00:	1f 16       	cp	r1, r31
     f02:	ba 0b       	sbc	r27, r26
     f04:	62 0b       	sbc	r22, r18
     f06:	73 0b       	sbc	r23, r19
     f08:	84 0b       	sbc	r24, r20
     f0a:	ba f0       	brmi	.+46     	; 0xf3a <__addsf3x+0x98>
     f0c:	91 50       	subi	r25, 0x01	; 1
     f0e:	a1 f0       	breq	.+40     	; 0xf38 <__addsf3x+0x96>
     f10:	ff 0f       	add	r31, r31
     f12:	bb 1f       	adc	r27, r27
     f14:	66 1f       	adc	r22, r22
     f16:	77 1f       	adc	r23, r23
     f18:	88 1f       	adc	r24, r24
     f1a:	c2 f7       	brpl	.-16     	; 0xf0c <__addsf3x+0x6a>
     f1c:	0e c0       	rjmp	.+28     	; 0xf3a <__addsf3x+0x98>
     f1e:	ba 0f       	add	r27, r26
     f20:	62 1f       	adc	r22, r18
     f22:	73 1f       	adc	r23, r19
     f24:	84 1f       	adc	r24, r20
     f26:	48 f4       	brcc	.+18     	; 0xf3a <__addsf3x+0x98>
     f28:	87 95       	ror	r24
     f2a:	77 95       	ror	r23
     f2c:	67 95       	ror	r22
     f2e:	b7 95       	ror	r27
     f30:	f7 95       	ror	r31
     f32:	9e 3f       	cpi	r25, 0xFE	; 254
     f34:	08 f0       	brcs	.+2      	; 0xf38 <__addsf3x+0x96>
     f36:	b3 cf       	rjmp	.-154    	; 0xe9e <__addsf3+0x1e>
     f38:	93 95       	inc	r25
     f3a:	88 0f       	add	r24, r24
     f3c:	08 f0       	brcs	.+2      	; 0xf40 <__addsf3x+0x9e>
     f3e:	99 27       	eor	r25, r25
     f40:	ee 0f       	add	r30, r30
     f42:	97 95       	ror	r25
     f44:	87 95       	ror	r24
     f46:	08 95       	ret

00000f48 <__divsf3>:
     f48:	0c d0       	rcall	.+24     	; 0xf62 <__divsf3x>
     f4a:	e6 c0       	rjmp	.+460    	; 0x1118 <__fp_round>
     f4c:	de d0       	rcall	.+444    	; 0x110a <__fp_pscB>
     f4e:	40 f0       	brcs	.+16     	; 0xf60 <__divsf3+0x18>
     f50:	d5 d0       	rcall	.+426    	; 0x10fc <__fp_pscA>
     f52:	30 f0       	brcs	.+12     	; 0xf60 <__divsf3+0x18>
     f54:	21 f4       	brne	.+8      	; 0xf5e <__divsf3+0x16>
     f56:	5f 3f       	cpi	r21, 0xFF	; 255
     f58:	19 f0       	breq	.+6      	; 0xf60 <__divsf3+0x18>
     f5a:	c7 c0       	rjmp	.+398    	; 0x10ea <__fp_inf>
     f5c:	51 11       	cpse	r21, r1
     f5e:	10 c1       	rjmp	.+544    	; 0x1180 <__fp_szero>
     f60:	ca c0       	rjmp	.+404    	; 0x10f6 <__fp_nan>

00000f62 <__divsf3x>:
     f62:	eb d0       	rcall	.+470    	; 0x113a <__fp_split3>
     f64:	98 f3       	brcs	.-26     	; 0xf4c <__divsf3+0x4>

00000f66 <__divsf3_pse>:
     f66:	99 23       	and	r25, r25
     f68:	c9 f3       	breq	.-14     	; 0xf5c <__divsf3+0x14>
     f6a:	55 23       	and	r21, r21
     f6c:	b1 f3       	breq	.-20     	; 0xf5a <__divsf3+0x12>
     f6e:	95 1b       	sub	r25, r21
     f70:	55 0b       	sbc	r21, r21
     f72:	bb 27       	eor	r27, r27
     f74:	aa 27       	eor	r26, r26
     f76:	62 17       	cp	r22, r18
     f78:	73 07       	cpc	r23, r19
     f7a:	84 07       	cpc	r24, r20
     f7c:	38 f0       	brcs	.+14     	; 0xf8c <__divsf3_pse+0x26>
     f7e:	9f 5f       	subi	r25, 0xFF	; 255
     f80:	5f 4f       	sbci	r21, 0xFF	; 255
     f82:	22 0f       	add	r18, r18
     f84:	33 1f       	adc	r19, r19
     f86:	44 1f       	adc	r20, r20
     f88:	aa 1f       	adc	r26, r26
     f8a:	a9 f3       	breq	.-22     	; 0xf76 <__divsf3_pse+0x10>
     f8c:	33 d0       	rcall	.+102    	; 0xff4 <__divsf3_pse+0x8e>
     f8e:	0e 2e       	mov	r0, r30
     f90:	3a f0       	brmi	.+14     	; 0xfa0 <__divsf3_pse+0x3a>
     f92:	e0 e8       	ldi	r30, 0x80	; 128
     f94:	30 d0       	rcall	.+96     	; 0xff6 <__divsf3_pse+0x90>
     f96:	91 50       	subi	r25, 0x01	; 1
     f98:	50 40       	sbci	r21, 0x00	; 0
     f9a:	e6 95       	lsr	r30
     f9c:	00 1c       	adc	r0, r0
     f9e:	ca f7       	brpl	.-14     	; 0xf92 <__divsf3_pse+0x2c>
     fa0:	29 d0       	rcall	.+82     	; 0xff4 <__divsf3_pse+0x8e>
     fa2:	fe 2f       	mov	r31, r30
     fa4:	27 d0       	rcall	.+78     	; 0xff4 <__divsf3_pse+0x8e>
     fa6:	66 0f       	add	r22, r22
     fa8:	77 1f       	adc	r23, r23
     faa:	88 1f       	adc	r24, r24
     fac:	bb 1f       	adc	r27, r27
     fae:	26 17       	cp	r18, r22
     fb0:	37 07       	cpc	r19, r23
     fb2:	48 07       	cpc	r20, r24
     fb4:	ab 07       	cpc	r26, r27
     fb6:	b0 e8       	ldi	r27, 0x80	; 128
     fb8:	09 f0       	breq	.+2      	; 0xfbc <__divsf3_pse+0x56>
     fba:	bb 0b       	sbc	r27, r27
     fbc:	80 2d       	mov	r24, r0
     fbe:	bf 01       	movw	r22, r30
     fc0:	ff 27       	eor	r31, r31
     fc2:	93 58       	subi	r25, 0x83	; 131
     fc4:	5f 4f       	sbci	r21, 0xFF	; 255
     fc6:	2a f0       	brmi	.+10     	; 0xfd2 <__divsf3_pse+0x6c>
     fc8:	9e 3f       	cpi	r25, 0xFE	; 254
     fca:	51 05       	cpc	r21, r1
     fcc:	68 f0       	brcs	.+26     	; 0xfe8 <__divsf3_pse+0x82>
     fce:	8d c0       	rjmp	.+282    	; 0x10ea <__fp_inf>
     fd0:	d7 c0       	rjmp	.+430    	; 0x1180 <__fp_szero>
     fd2:	5f 3f       	cpi	r21, 0xFF	; 255
     fd4:	ec f3       	brlt	.-6      	; 0xfd0 <__divsf3_pse+0x6a>
     fd6:	98 3e       	cpi	r25, 0xE8	; 232
     fd8:	dc f3       	brlt	.-10     	; 0xfd0 <__divsf3_pse+0x6a>
     fda:	86 95       	lsr	r24
     fdc:	77 95       	ror	r23
     fde:	67 95       	ror	r22
     fe0:	b7 95       	ror	r27
     fe2:	f7 95       	ror	r31
     fe4:	9f 5f       	subi	r25, 0xFF	; 255
     fe6:	c9 f7       	brne	.-14     	; 0xfda <__divsf3_pse+0x74>
     fe8:	88 0f       	add	r24, r24
     fea:	91 1d       	adc	r25, r1
     fec:	96 95       	lsr	r25
     fee:	87 95       	ror	r24
     ff0:	97 f9       	bld	r25, 7
     ff2:	08 95       	ret
     ff4:	e1 e0       	ldi	r30, 0x01	; 1
     ff6:	66 0f       	add	r22, r22
     ff8:	77 1f       	adc	r23, r23
     ffa:	88 1f       	adc	r24, r24
     ffc:	bb 1f       	adc	r27, r27
     ffe:	62 17       	cp	r22, r18
    1000:	73 07       	cpc	r23, r19
    1002:	84 07       	cpc	r24, r20
    1004:	ba 07       	cpc	r27, r26
    1006:	20 f0       	brcs	.+8      	; 0x1010 <__divsf3_pse+0xaa>
    1008:	62 1b       	sub	r22, r18
    100a:	73 0b       	sbc	r23, r19
    100c:	84 0b       	sbc	r24, r20
    100e:	ba 0b       	sbc	r27, r26
    1010:	ee 1f       	adc	r30, r30
    1012:	88 f7       	brcc	.-30     	; 0xff6 <__divsf3_pse+0x90>
    1014:	e0 95       	com	r30
    1016:	08 95       	ret

00001018 <__fixunssfsi>:
    1018:	98 d0       	rcall	.+304    	; 0x114a <__fp_splitA>
    101a:	88 f0       	brcs	.+34     	; 0x103e <__fixunssfsi+0x26>
    101c:	9f 57       	subi	r25, 0x7F	; 127
    101e:	90 f0       	brcs	.+36     	; 0x1044 <__fixunssfsi+0x2c>
    1020:	b9 2f       	mov	r27, r25
    1022:	99 27       	eor	r25, r25
    1024:	b7 51       	subi	r27, 0x17	; 23
    1026:	a0 f0       	brcs	.+40     	; 0x1050 <__fixunssfsi+0x38>
    1028:	d1 f0       	breq	.+52     	; 0x105e <__fixunssfsi+0x46>
    102a:	66 0f       	add	r22, r22
    102c:	77 1f       	adc	r23, r23
    102e:	88 1f       	adc	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	1a f0       	brmi	.+6      	; 0x103a <__fixunssfsi+0x22>
    1034:	ba 95       	dec	r27
    1036:	c9 f7       	brne	.-14     	; 0x102a <__fixunssfsi+0x12>
    1038:	12 c0       	rjmp	.+36     	; 0x105e <__fixunssfsi+0x46>
    103a:	b1 30       	cpi	r27, 0x01	; 1
    103c:	81 f0       	breq	.+32     	; 0x105e <__fixunssfsi+0x46>
    103e:	9f d0       	rcall	.+318    	; 0x117e <__fp_zero>
    1040:	b1 e0       	ldi	r27, 0x01	; 1
    1042:	08 95       	ret
    1044:	9c c0       	rjmp	.+312    	; 0x117e <__fp_zero>
    1046:	67 2f       	mov	r22, r23
    1048:	78 2f       	mov	r23, r24
    104a:	88 27       	eor	r24, r24
    104c:	b8 5f       	subi	r27, 0xF8	; 248
    104e:	39 f0       	breq	.+14     	; 0x105e <__fixunssfsi+0x46>
    1050:	b9 3f       	cpi	r27, 0xF9	; 249
    1052:	cc f3       	brlt	.-14     	; 0x1046 <__fixunssfsi+0x2e>
    1054:	86 95       	lsr	r24
    1056:	77 95       	ror	r23
    1058:	67 95       	ror	r22
    105a:	b3 95       	inc	r27
    105c:	d9 f7       	brne	.-10     	; 0x1054 <__fixunssfsi+0x3c>
    105e:	3e f4       	brtc	.+14     	; 0x106e <__fixunssfsi+0x56>
    1060:	90 95       	com	r25
    1062:	80 95       	com	r24
    1064:	70 95       	com	r23
    1066:	61 95       	neg	r22
    1068:	7f 4f       	sbci	r23, 0xFF	; 255
    106a:	8f 4f       	sbci	r24, 0xFF	; 255
    106c:	9f 4f       	sbci	r25, 0xFF	; 255
    106e:	08 95       	ret

00001070 <__floatunsisf>:
    1070:	e8 94       	clt
    1072:	09 c0       	rjmp	.+18     	; 0x1086 <__floatsisf+0x12>

00001074 <__floatsisf>:
    1074:	97 fb       	bst	r25, 7
    1076:	3e f4       	brtc	.+14     	; 0x1086 <__floatsisf+0x12>
    1078:	90 95       	com	r25
    107a:	80 95       	com	r24
    107c:	70 95       	com	r23
    107e:	61 95       	neg	r22
    1080:	7f 4f       	sbci	r23, 0xFF	; 255
    1082:	8f 4f       	sbci	r24, 0xFF	; 255
    1084:	9f 4f       	sbci	r25, 0xFF	; 255
    1086:	99 23       	and	r25, r25
    1088:	a9 f0       	breq	.+42     	; 0x10b4 <__floatsisf+0x40>
    108a:	f9 2f       	mov	r31, r25
    108c:	96 e9       	ldi	r25, 0x96	; 150
    108e:	bb 27       	eor	r27, r27
    1090:	93 95       	inc	r25
    1092:	f6 95       	lsr	r31
    1094:	87 95       	ror	r24
    1096:	77 95       	ror	r23
    1098:	67 95       	ror	r22
    109a:	b7 95       	ror	r27
    109c:	f1 11       	cpse	r31, r1
    109e:	f8 cf       	rjmp	.-16     	; 0x1090 <__floatsisf+0x1c>
    10a0:	fa f4       	brpl	.+62     	; 0x10e0 <__floatsisf+0x6c>
    10a2:	bb 0f       	add	r27, r27
    10a4:	11 f4       	brne	.+4      	; 0x10aa <__floatsisf+0x36>
    10a6:	60 ff       	sbrs	r22, 0
    10a8:	1b c0       	rjmp	.+54     	; 0x10e0 <__floatsisf+0x6c>
    10aa:	6f 5f       	subi	r22, 0xFF	; 255
    10ac:	7f 4f       	sbci	r23, 0xFF	; 255
    10ae:	8f 4f       	sbci	r24, 0xFF	; 255
    10b0:	9f 4f       	sbci	r25, 0xFF	; 255
    10b2:	16 c0       	rjmp	.+44     	; 0x10e0 <__floatsisf+0x6c>
    10b4:	88 23       	and	r24, r24
    10b6:	11 f0       	breq	.+4      	; 0x10bc <__floatsisf+0x48>
    10b8:	96 e9       	ldi	r25, 0x96	; 150
    10ba:	11 c0       	rjmp	.+34     	; 0x10de <__floatsisf+0x6a>
    10bc:	77 23       	and	r23, r23
    10be:	21 f0       	breq	.+8      	; 0x10c8 <__floatsisf+0x54>
    10c0:	9e e8       	ldi	r25, 0x8E	; 142
    10c2:	87 2f       	mov	r24, r23
    10c4:	76 2f       	mov	r23, r22
    10c6:	05 c0       	rjmp	.+10     	; 0x10d2 <__floatsisf+0x5e>
    10c8:	66 23       	and	r22, r22
    10ca:	71 f0       	breq	.+28     	; 0x10e8 <__floatsisf+0x74>
    10cc:	96 e8       	ldi	r25, 0x86	; 134
    10ce:	86 2f       	mov	r24, r22
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	2a f0       	brmi	.+10     	; 0x10e0 <__floatsisf+0x6c>
    10d6:	9a 95       	dec	r25
    10d8:	66 0f       	add	r22, r22
    10da:	77 1f       	adc	r23, r23
    10dc:	88 1f       	adc	r24, r24
    10de:	da f7       	brpl	.-10     	; 0x10d6 <__floatsisf+0x62>
    10e0:	88 0f       	add	r24, r24
    10e2:	96 95       	lsr	r25
    10e4:	87 95       	ror	r24
    10e6:	97 f9       	bld	r25, 7
    10e8:	08 95       	ret

000010ea <__fp_inf>:
    10ea:	97 f9       	bld	r25, 7
    10ec:	9f 67       	ori	r25, 0x7F	; 127
    10ee:	80 e8       	ldi	r24, 0x80	; 128
    10f0:	70 e0       	ldi	r23, 0x00	; 0
    10f2:	60 e0       	ldi	r22, 0x00	; 0
    10f4:	08 95       	ret

000010f6 <__fp_nan>:
    10f6:	9f ef       	ldi	r25, 0xFF	; 255
    10f8:	80 ec       	ldi	r24, 0xC0	; 192
    10fa:	08 95       	ret

000010fc <__fp_pscA>:
    10fc:	00 24       	eor	r0, r0
    10fe:	0a 94       	dec	r0
    1100:	16 16       	cp	r1, r22
    1102:	17 06       	cpc	r1, r23
    1104:	18 06       	cpc	r1, r24
    1106:	09 06       	cpc	r0, r25
    1108:	08 95       	ret

0000110a <__fp_pscB>:
    110a:	00 24       	eor	r0, r0
    110c:	0a 94       	dec	r0
    110e:	12 16       	cp	r1, r18
    1110:	13 06       	cpc	r1, r19
    1112:	14 06       	cpc	r1, r20
    1114:	05 06       	cpc	r0, r21
    1116:	08 95       	ret

00001118 <__fp_round>:
    1118:	09 2e       	mov	r0, r25
    111a:	03 94       	inc	r0
    111c:	00 0c       	add	r0, r0
    111e:	11 f4       	brne	.+4      	; 0x1124 <__fp_round+0xc>
    1120:	88 23       	and	r24, r24
    1122:	52 f0       	brmi	.+20     	; 0x1138 <__fp_round+0x20>
    1124:	bb 0f       	add	r27, r27
    1126:	40 f4       	brcc	.+16     	; 0x1138 <__fp_round+0x20>
    1128:	bf 2b       	or	r27, r31
    112a:	11 f4       	brne	.+4      	; 0x1130 <__fp_round+0x18>
    112c:	60 ff       	sbrs	r22, 0
    112e:	04 c0       	rjmp	.+8      	; 0x1138 <__fp_round+0x20>
    1130:	6f 5f       	subi	r22, 0xFF	; 255
    1132:	7f 4f       	sbci	r23, 0xFF	; 255
    1134:	8f 4f       	sbci	r24, 0xFF	; 255
    1136:	9f 4f       	sbci	r25, 0xFF	; 255
    1138:	08 95       	ret

0000113a <__fp_split3>:
    113a:	57 fd       	sbrc	r21, 7
    113c:	90 58       	subi	r25, 0x80	; 128
    113e:	44 0f       	add	r20, r20
    1140:	55 1f       	adc	r21, r21
    1142:	59 f0       	breq	.+22     	; 0x115a <__fp_splitA+0x10>
    1144:	5f 3f       	cpi	r21, 0xFF	; 255
    1146:	71 f0       	breq	.+28     	; 0x1164 <__fp_splitA+0x1a>
    1148:	47 95       	ror	r20

0000114a <__fp_splitA>:
    114a:	88 0f       	add	r24, r24
    114c:	97 fb       	bst	r25, 7
    114e:	99 1f       	adc	r25, r25
    1150:	61 f0       	breq	.+24     	; 0x116a <__fp_splitA+0x20>
    1152:	9f 3f       	cpi	r25, 0xFF	; 255
    1154:	79 f0       	breq	.+30     	; 0x1174 <__fp_splitA+0x2a>
    1156:	87 95       	ror	r24
    1158:	08 95       	ret
    115a:	12 16       	cp	r1, r18
    115c:	13 06       	cpc	r1, r19
    115e:	14 06       	cpc	r1, r20
    1160:	55 1f       	adc	r21, r21
    1162:	f2 cf       	rjmp	.-28     	; 0x1148 <__fp_split3+0xe>
    1164:	46 95       	lsr	r20
    1166:	f1 df       	rcall	.-30     	; 0x114a <__fp_splitA>
    1168:	08 c0       	rjmp	.+16     	; 0x117a <__fp_splitA+0x30>
    116a:	16 16       	cp	r1, r22
    116c:	17 06       	cpc	r1, r23
    116e:	18 06       	cpc	r1, r24
    1170:	99 1f       	adc	r25, r25
    1172:	f1 cf       	rjmp	.-30     	; 0x1156 <__fp_splitA+0xc>
    1174:	86 95       	lsr	r24
    1176:	71 05       	cpc	r23, r1
    1178:	61 05       	cpc	r22, r1
    117a:	08 94       	sec
    117c:	08 95       	ret

0000117e <__fp_zero>:
    117e:	e8 94       	clt

00001180 <__fp_szero>:
    1180:	bb 27       	eor	r27, r27
    1182:	66 27       	eor	r22, r22
    1184:	77 27       	eor	r23, r23
    1186:	cb 01       	movw	r24, r22
    1188:	97 f9       	bld	r25, 7
    118a:	08 95       	ret

0000118c <__mulsf3>:
    118c:	0b d0       	rcall	.+22     	; 0x11a4 <__mulsf3x>
    118e:	c4 cf       	rjmp	.-120    	; 0x1118 <__fp_round>
    1190:	b5 df       	rcall	.-150    	; 0x10fc <__fp_pscA>
    1192:	28 f0       	brcs	.+10     	; 0x119e <__mulsf3+0x12>
    1194:	ba df       	rcall	.-140    	; 0x110a <__fp_pscB>
    1196:	18 f0       	brcs	.+6      	; 0x119e <__mulsf3+0x12>
    1198:	95 23       	and	r25, r21
    119a:	09 f0       	breq	.+2      	; 0x119e <__mulsf3+0x12>
    119c:	a6 cf       	rjmp	.-180    	; 0x10ea <__fp_inf>
    119e:	ab cf       	rjmp	.-170    	; 0x10f6 <__fp_nan>
    11a0:	11 24       	eor	r1, r1
    11a2:	ee cf       	rjmp	.-36     	; 0x1180 <__fp_szero>

000011a4 <__mulsf3x>:
    11a4:	ca df       	rcall	.-108    	; 0x113a <__fp_split3>
    11a6:	a0 f3       	brcs	.-24     	; 0x1190 <__mulsf3+0x4>

000011a8 <__mulsf3_pse>:
    11a8:	95 9f       	mul	r25, r21
    11aa:	d1 f3       	breq	.-12     	; 0x11a0 <__mulsf3+0x14>
    11ac:	95 0f       	add	r25, r21
    11ae:	50 e0       	ldi	r21, 0x00	; 0
    11b0:	55 1f       	adc	r21, r21
    11b2:	62 9f       	mul	r22, r18
    11b4:	f0 01       	movw	r30, r0
    11b6:	72 9f       	mul	r23, r18
    11b8:	bb 27       	eor	r27, r27
    11ba:	f0 0d       	add	r31, r0
    11bc:	b1 1d       	adc	r27, r1
    11be:	63 9f       	mul	r22, r19
    11c0:	aa 27       	eor	r26, r26
    11c2:	f0 0d       	add	r31, r0
    11c4:	b1 1d       	adc	r27, r1
    11c6:	aa 1f       	adc	r26, r26
    11c8:	64 9f       	mul	r22, r20
    11ca:	66 27       	eor	r22, r22
    11cc:	b0 0d       	add	r27, r0
    11ce:	a1 1d       	adc	r26, r1
    11d0:	66 1f       	adc	r22, r22
    11d2:	82 9f       	mul	r24, r18
    11d4:	22 27       	eor	r18, r18
    11d6:	b0 0d       	add	r27, r0
    11d8:	a1 1d       	adc	r26, r1
    11da:	62 1f       	adc	r22, r18
    11dc:	73 9f       	mul	r23, r19
    11de:	b0 0d       	add	r27, r0
    11e0:	a1 1d       	adc	r26, r1
    11e2:	62 1f       	adc	r22, r18
    11e4:	83 9f       	mul	r24, r19
    11e6:	a0 0d       	add	r26, r0
    11e8:	61 1d       	adc	r22, r1
    11ea:	22 1f       	adc	r18, r18
    11ec:	74 9f       	mul	r23, r20
    11ee:	33 27       	eor	r19, r19
    11f0:	a0 0d       	add	r26, r0
    11f2:	61 1d       	adc	r22, r1
    11f4:	23 1f       	adc	r18, r19
    11f6:	84 9f       	mul	r24, r20
    11f8:	60 0d       	add	r22, r0
    11fa:	21 1d       	adc	r18, r1
    11fc:	82 2f       	mov	r24, r18
    11fe:	76 2f       	mov	r23, r22
    1200:	6a 2f       	mov	r22, r26
    1202:	11 24       	eor	r1, r1
    1204:	9f 57       	subi	r25, 0x7F	; 127
    1206:	50 40       	sbci	r21, 0x00	; 0
    1208:	8a f0       	brmi	.+34     	; 0x122c <__mulsf3_pse+0x84>
    120a:	e1 f0       	breq	.+56     	; 0x1244 <__mulsf3_pse+0x9c>
    120c:	88 23       	and	r24, r24
    120e:	4a f0       	brmi	.+18     	; 0x1222 <__mulsf3_pse+0x7a>
    1210:	ee 0f       	add	r30, r30
    1212:	ff 1f       	adc	r31, r31
    1214:	bb 1f       	adc	r27, r27
    1216:	66 1f       	adc	r22, r22
    1218:	77 1f       	adc	r23, r23
    121a:	88 1f       	adc	r24, r24
    121c:	91 50       	subi	r25, 0x01	; 1
    121e:	50 40       	sbci	r21, 0x00	; 0
    1220:	a9 f7       	brne	.-22     	; 0x120c <__mulsf3_pse+0x64>
    1222:	9e 3f       	cpi	r25, 0xFE	; 254
    1224:	51 05       	cpc	r21, r1
    1226:	70 f0       	brcs	.+28     	; 0x1244 <__mulsf3_pse+0x9c>
    1228:	60 cf       	rjmp	.-320    	; 0x10ea <__fp_inf>
    122a:	aa cf       	rjmp	.-172    	; 0x1180 <__fp_szero>
    122c:	5f 3f       	cpi	r21, 0xFF	; 255
    122e:	ec f3       	brlt	.-6      	; 0x122a <__mulsf3_pse+0x82>
    1230:	98 3e       	cpi	r25, 0xE8	; 232
    1232:	dc f3       	brlt	.-10     	; 0x122a <__mulsf3_pse+0x82>
    1234:	86 95       	lsr	r24
    1236:	77 95       	ror	r23
    1238:	67 95       	ror	r22
    123a:	b7 95       	ror	r27
    123c:	f7 95       	ror	r31
    123e:	e7 95       	ror	r30
    1240:	9f 5f       	subi	r25, 0xFF	; 255
    1242:	c1 f7       	brne	.-16     	; 0x1234 <__mulsf3_pse+0x8c>
    1244:	fe 2b       	or	r31, r30
    1246:	88 0f       	add	r24, r24
    1248:	91 1d       	adc	r25, r1
    124a:	96 95       	lsr	r25
    124c:	87 95       	ror	r24
    124e:	97 f9       	bld	r25, 7
    1250:	08 95       	ret

00001252 <_exit>:
    1252:	f8 94       	cli

00001254 <__stop_program>:
    1254:	ff cf       	rjmp	.-2      	; 0x1254 <__stop_program>
