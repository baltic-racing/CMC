
CMC v2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003a  00800100  000010c8  0000115c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000010c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000007b  0080013a  0080013a  00001196  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001196  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000011c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  00001208  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013b5  00000000  00000000  000012c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000be7  00000000  00000000  00002675  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000086b  00000000  00000000  0000325c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d0  00000000  00000000  00003ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000818  00000000  00000000  00003d98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000076c  00000000  00000000  000045b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  00004d1c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	49 c0       	rjmp	.+146    	; 0x94 <__ctors_end>
       2:	00 00       	nop
       4:	64 c0       	rjmp	.+200    	; 0xce <__bad_interrupt>
       6:	00 00       	nop
       8:	62 c0       	rjmp	.+196    	; 0xce <__bad_interrupt>
       a:	00 00       	nop
       c:	60 c0       	rjmp	.+192    	; 0xce <__bad_interrupt>
       e:	00 00       	nop
      10:	5e c0       	rjmp	.+188    	; 0xce <__bad_interrupt>
      12:	00 00       	nop
      14:	5c c0       	rjmp	.+184    	; 0xce <__bad_interrupt>
      16:	00 00       	nop
      18:	5a c0       	rjmp	.+180    	; 0xce <__bad_interrupt>
      1a:	00 00       	nop
      1c:	58 c0       	rjmp	.+176    	; 0xce <__bad_interrupt>
      1e:	00 00       	nop
      20:	56 c0       	rjmp	.+172    	; 0xce <__bad_interrupt>
      22:	00 00       	nop
      24:	54 c0       	rjmp	.+168    	; 0xce <__bad_interrupt>
      26:	00 00       	nop
      28:	52 c0       	rjmp	.+164    	; 0xce <__bad_interrupt>
      2a:	00 00       	nop
      2c:	50 c0       	rjmp	.+160    	; 0xce <__bad_interrupt>
      2e:	00 00       	nop
      30:	b8 c5       	rjmp	.+2928   	; 0xba2 <__vector_12>
      32:	00 00       	nop
      34:	4c c0       	rjmp	.+152    	; 0xce <__bad_interrupt>
      36:	00 00       	nop
      38:	4a c0       	rjmp	.+148    	; 0xce <__bad_interrupt>
      3a:	00 00       	nop
      3c:	48 c0       	rjmp	.+144    	; 0xce <__bad_interrupt>
      3e:	00 00       	nop
      40:	8b c5       	rjmp	.+2838   	; 0xb58 <__vector_16>
      42:	00 00       	nop
      44:	44 c0       	rjmp	.+136    	; 0xce <__bad_interrupt>
      46:	00 00       	nop
      48:	42 c0       	rjmp	.+132    	; 0xce <__bad_interrupt>
      4a:	00 00       	nop
      4c:	40 c0       	rjmp	.+128    	; 0xce <__bad_interrupt>
      4e:	00 00       	nop
      50:	3e c0       	rjmp	.+124    	; 0xce <__bad_interrupt>
      52:	00 00       	nop
      54:	3c c0       	rjmp	.+120    	; 0xce <__bad_interrupt>
      56:	00 00       	nop
      58:	3a c0       	rjmp	.+116    	; 0xce <__bad_interrupt>
      5a:	00 00       	nop
      5c:	38 c0       	rjmp	.+112    	; 0xce <__bad_interrupt>
      5e:	00 00       	nop
      60:	36 c0       	rjmp	.+108    	; 0xce <__bad_interrupt>
      62:	00 00       	nop
      64:	61 c5       	rjmp	.+2754   	; 0xb28 <__vector_25>
      66:	00 00       	nop
      68:	32 c0       	rjmp	.+100    	; 0xce <__bad_interrupt>
      6a:	00 00       	nop
      6c:	30 c0       	rjmp	.+96     	; 0xce <__bad_interrupt>
      6e:	00 00       	nop
      70:	2e c0       	rjmp	.+92     	; 0xce <__bad_interrupt>
      72:	00 00       	nop
      74:	2c c0       	rjmp	.+88     	; 0xce <__bad_interrupt>
      76:	00 00       	nop
      78:	2a c0       	rjmp	.+84     	; 0xce <__bad_interrupt>
      7a:	00 00       	nop
      7c:	28 c0       	rjmp	.+80     	; 0xce <__bad_interrupt>
      7e:	00 00       	nop
      80:	26 c0       	rjmp	.+76     	; 0xce <__bad_interrupt>
      82:	00 00       	nop
      84:	24 c0       	rjmp	.+72     	; 0xce <__bad_interrupt>
      86:	00 00       	nop
      88:	22 c0       	rjmp	.+68     	; 0xce <__bad_interrupt>
      8a:	00 00       	nop
      8c:	20 c0       	rjmp	.+64     	; 0xce <__bad_interrupt>
      8e:	00 00       	nop
      90:	1e c0       	rjmp	.+60     	; 0xce <__bad_interrupt>
	...

00000094 <__ctors_end>:
      94:	11 24       	eor	r1, r1
      96:	1f be       	out	0x3f, r1	; 63
      98:	cf ef       	ldi	r28, 0xFF	; 255
      9a:	d0 e1       	ldi	r29, 0x10	; 16
      9c:	de bf       	out	0x3e, r29	; 62
      9e:	cd bf       	out	0x3d, r28	; 61

000000a0 <__do_copy_data>:
      a0:	11 e0       	ldi	r17, 0x01	; 1
      a2:	a0 e0       	ldi	r26, 0x00	; 0
      a4:	b1 e0       	ldi	r27, 0x01	; 1
      a6:	e8 ec       	ldi	r30, 0xC8	; 200
      a8:	f0 e1       	ldi	r31, 0x10	; 16
      aa:	00 e0       	ldi	r16, 0x00	; 0
      ac:	0b bf       	out	0x3b, r16	; 59
      ae:	02 c0       	rjmp	.+4      	; 0xb4 <__do_copy_data+0x14>
      b0:	07 90       	elpm	r0, Z+
      b2:	0d 92       	st	X+, r0
      b4:	aa 33       	cpi	r26, 0x3A	; 58
      b6:	b1 07       	cpc	r27, r17
      b8:	d9 f7       	brne	.-10     	; 0xb0 <__do_copy_data+0x10>

000000ba <__do_clear_bss>:
      ba:	21 e0       	ldi	r18, 0x01	; 1
      bc:	aa e3       	ldi	r26, 0x3A	; 58
      be:	b1 e0       	ldi	r27, 0x01	; 1
      c0:	01 c0       	rjmp	.+2      	; 0xc4 <.do_clear_bss_start>

000000c2 <.do_clear_bss_loop>:
      c2:	1d 92       	st	X+, r1

000000c4 <.do_clear_bss_start>:
      c4:	a5 3b       	cpi	r26, 0xB5	; 181
      c6:	b2 07       	cpc	r27, r18
      c8:	e1 f7       	brne	.-8      	; 0xc2 <.do_clear_bss_loop>
      ca:	b0 d5       	rcall	.+2912   	; 0xc2c <main>
      cc:	fb c7       	rjmp	.+4086   	; 0x10c4 <_exit>

000000ce <__bad_interrupt>:
      ce:	98 cf       	rjmp	.-208    	; 0x0 <__vectors>

000000d0 <systick>:
uint16_t time_neutral;


void systick(){

	DDRC ^= (1<<PC2);
      d0:	97 b1       	in	r25, 0x07	; 7
      d2:	84 e0       	ldi	r24, 0x04	; 4
      d4:	89 27       	eor	r24, r25
      d6:	87 b9       	out	0x07, r24	; 7
      d8:	08 95       	ret

000000da <definitions>:

}

//defines variables when the controller starts up because the compiler doesnt allow 'dynamic' value definitions
void definitions()
{
      da:	4f 92       	push	r4
      dc:	5f 92       	push	r5
      de:	6f 92       	push	r6
      e0:	7f 92       	push	r7
      e2:	8f 92       	push	r8
      e4:	9f 92       	push	r9
      e6:	af 92       	push	r10
      e8:	bf 92       	push	r11
      ea:	cf 92       	push	r12
      ec:	df 92       	push	r13
      ee:	ef 92       	push	r14
      f0:	ff 92       	push	r15
      f2:	0f 93       	push	r16
      f4:	1f 93       	push	r17
      f6:	cf 93       	push	r28
      f8:	df 93       	push	r29

	time_mid = 1800 + ((deg_mid) * (2400 / deg_max)) + deg_ofs; // shifting Times
      fa:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <deg_max>
      fe:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <deg_max+0x1>
     102:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <deg_max+0x2>
     106:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <deg_max+0x3>
     10a:	60 e0       	ldi	r22, 0x00	; 0
     10c:	70 e0       	ldi	r23, 0x00	; 0
     10e:	86 e1       	ldi	r24, 0x16	; 22
     110:	95 e4       	ldi	r25, 0x45	; 69
     112:	2b d6       	rcall	.+3158   	; 0xd6a <__divsf3>
     114:	6b 01       	movw	r12, r22
     116:	7c 01       	movw	r14, r24
     118:	80 90 00 01 	lds	r8, 0x0100	; 0x800100 <__data_start>
     11c:	90 90 01 01 	lds	r9, 0x0101	; 0x800101 <__data_start+0x1>
     120:	a0 90 02 01 	lds	r10, 0x0102	; 0x800102 <__data_start+0x2>
     124:	b0 90 03 01 	lds	r11, 0x0103	; 0x800103 <__data_start+0x3>
     128:	a5 01       	movw	r20, r10
     12a:	94 01       	movw	r18, r8
     12c:	68 d7       	rcall	.+3792   	; 0xffe <__mulsf3>
     12e:	20 e0       	ldi	r18, 0x00	; 0
     130:	30 e0       	ldi	r19, 0x00	; 0
     132:	41 ee       	ldi	r20, 0xE1	; 225
     134:	54 e4       	ldi	r21, 0x44	; 68
     136:	b1 d5       	rcall	.+2914   	; 0xc9a <__addsf3>
     138:	2b 01       	movw	r4, r22
     13a:	3c 01       	movw	r6, r24
     13c:	60 91 3e 01 	lds	r22, 0x013E	; 0x80013e <deg_ofs>
     140:	70 e0       	ldi	r23, 0x00	; 0
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	a7 d6       	rcall	.+3406   	; 0xe96 <__floatsisf>
     148:	9b 01       	movw	r18, r22
     14a:	ac 01       	movw	r20, r24
     14c:	c3 01       	movw	r24, r6
     14e:	b2 01       	movw	r22, r4
     150:	a4 d5       	rcall	.+2888   	; 0xc9a <__addsf3>
     152:	73 d6       	rcall	.+3302   	; 0xe3a <__fixunssfsi>
     154:	2b 01       	movw	r4, r22
     156:	3c 01       	movw	r6, r24
     158:	70 93 67 01 	sts	0x0167, r23	; 0x800167 <time_mid+0x1>
     15c:	60 93 66 01 	sts	0x0166, r22	; 0x800166 <time_mid>
	time_dwn = 1800 + ((deg_mid+deg_dwn) * (2400/deg_max));
     160:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <deg_dwn>
     164:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <deg_dwn+0x1>
     168:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <deg_dwn+0x2>
     16c:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <deg_dwn+0x3>
     170:	c5 01       	movw	r24, r10
     172:	b4 01       	movw	r22, r8
     174:	92 d5       	rcall	.+2852   	; 0xc9a <__addsf3>
     176:	a7 01       	movw	r20, r14
     178:	96 01       	movw	r18, r12
     17a:	41 d7       	rcall	.+3714   	; 0xffe <__mulsf3>
     17c:	20 e0       	ldi	r18, 0x00	; 0
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	41 ee       	ldi	r20, 0xE1	; 225
     182:	54 e4       	ldi	r21, 0x44	; 68
     184:	8a d5       	rcall	.+2836   	; 0xc9a <__addsf3>
     186:	59 d6       	rcall	.+3250   	; 0xe3a <__fixunssfsi>
     188:	70 93 b4 01 	sts	0x01B4, r23	; 0x8001b4 <time_dwn+0x1>
     18c:	60 93 b3 01 	sts	0x01B3, r22	; 0x8001b3 <time_dwn>
	time_up = 1800 + ((deg_mid-deg_up) * (2400/deg_max));
     190:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <deg_up>
     194:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <deg_up+0x1>
     198:	40 91 0a 01 	lds	r20, 0x010A	; 0x80010a <deg_up+0x2>
     19c:	50 91 0b 01 	lds	r21, 0x010B	; 0x80010b <deg_up+0x3>
     1a0:	c5 01       	movw	r24, r10
     1a2:	b4 01       	movw	r22, r8
     1a4:	79 d5       	rcall	.+2802   	; 0xc98 <__subsf3>
     1a6:	a7 01       	movw	r20, r14
     1a8:	96 01       	movw	r18, r12
     1aa:	29 d7       	rcall	.+3666   	; 0xffe <__mulsf3>
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	41 ee       	ldi	r20, 0xE1	; 225
     1b2:	54 e4       	ldi	r21, 0x44	; 68
     1b4:	72 d5       	rcall	.+2788   	; 0xc9a <__addsf3>
     1b6:	41 d6       	rcall	.+3202   	; 0xe3a <__fixunssfsi>
     1b8:	70 93 b2 01 	sts	0x01B2, r23	; 0x8001b2 <time_up+0x1>
     1bc:	60 93 b1 01 	sts	0x01B1, r22	; 0x8001b1 <time_up>
	time_neutral = 1800 + ((deg_mid-deg_neutral)* (2400/deg_max));
     1c0:	20 91 04 01 	lds	r18, 0x0104	; 0x800104 <deg_neutral>
     1c4:	30 91 05 01 	lds	r19, 0x0105	; 0x800105 <deg_neutral+0x1>
     1c8:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <deg_neutral+0x2>
     1cc:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <deg_neutral+0x3>
     1d0:	c5 01       	movw	r24, r10
     1d2:	b4 01       	movw	r22, r8
     1d4:	61 d5       	rcall	.+2754   	; 0xc98 <__subsf3>
     1d6:	a7 01       	movw	r20, r14
     1d8:	96 01       	movw	r18, r12
     1da:	11 d7       	rcall	.+3618   	; 0xffe <__mulsf3>
     1dc:	20 e0       	ldi	r18, 0x00	; 0
     1de:	30 e0       	ldi	r19, 0x00	; 0
     1e0:	41 ee       	ldi	r20, 0xE1	; 225
     1e2:	54 e4       	ldi	r21, 0x44	; 68
     1e4:	5a d5       	rcall	.+2740   	; 0xc9a <__addsf3>
     1e6:	29 d6       	rcall	.+3154   	; 0xe3a <__fixunssfsi>
     1e8:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <time_neutral+0x1>
     1ec:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <time_neutral>
     1f0:	50 92 70 01 	sts	0x0170, r5	; 0x800170 <shift_time+0x1>
	shift_time = time_mid;
     1f4:	40 92 6f 01 	sts	0x016F, r4	; 0x80016f <shift_time>
     1f8:	c1 e2       	ldi	r28, 0x21	; 33
     1fa:	d1 e0       	ldi	r29, 0x01	; 1
     1fc:	03 e7       	ldi	r16, 0x73	; 115
     1fe:	11 e0       	ldi	r17, 0x01	; 1
     200:	0f 2e       	mov	r0, r31
     202:	f9 e3       	ldi	r31, 0x39	; 57
     204:	ef 2e       	mov	r14, r31
     206:	f1 e0       	ldi	r31, 0x01	; 1
     208:	ff 2e       	mov	r15, r31
     20a:	f0 2d       	mov	r31, r0
	
	for (int x = 0; x<6; x++){ // Calculate Gearvoltages as 10-Byte value
		gear_adc_voltages[x] = (255/5)*gear_voltages[x];
     20c:	69 91       	ld	r22, Y+
     20e:	79 91       	ld	r23, Y+
     210:	89 91       	ld	r24, Y+
     212:	99 91       	ld	r25, Y+
     214:	20 e0       	ldi	r18, 0x00	; 0
     216:	30 e0       	ldi	r19, 0x00	; 0
     218:	4c e4       	ldi	r20, 0x4C	; 76
     21a:	52 e4       	ldi	r21, 0x42	; 66
     21c:	f0 d6       	rcall	.+3552   	; 0xffe <__mulsf3>
     21e:	0d d6       	rcall	.+3098   	; 0xe3a <__fixunssfsi>
     220:	f8 01       	movw	r30, r16
     222:	61 93       	st	Z+, r22
     224:	8f 01       	movw	r16, r30
     226:	ce 15       	cp	r28, r14
     228:	df 05       	cpc	r29, r15
	time_dwn = 1800 + ((deg_mid+deg_dwn) * (2400/deg_max));
	time_up = 1800 + ((deg_mid-deg_up) * (2400/deg_max));
	time_neutral = 1800 + ((deg_mid-deg_neutral)* (2400/deg_max));
	shift_time = time_mid;
	
	for (int x = 0; x<6; x++){ // Calculate Gearvoltages as 10-Byte value
     22a:	81 f7       	brne	.-32     	; 0x20c <definitions+0x132>
     22c:	e3 e7       	ldi	r30, 0x73	; 115
     22e:	f1 e0       	ldi	r31, 0x01	; 1
		gear_adc_voltages[x] = (255/5)*gear_voltages[x];
	}
		gear_adc_limits[0] = gear_adc_voltages[0]+(gear_adc_voltages[1]-gear_adc_voltages[0])/2;
     230:	41 81       	ldd	r20, Z+1	; 0x01
     232:	24 2f       	mov	r18, r20
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	50 81       	ld	r21, Z
     238:	b9 01       	movw	r22, r18
     23a:	65 1b       	sub	r22, r21
     23c:	71 09       	sbc	r23, r1
     23e:	cb 01       	movw	r24, r22
     240:	99 23       	and	r25, r25
     242:	0c f4       	brge	.+2      	; 0x246 <definitions+0x16c>
     244:	01 96       	adiw	r24, 0x01	; 1
     246:	95 95       	asr	r25
     248:	87 95       	ror	r24
     24a:	85 0f       	add	r24, r21
     24c:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <gear_adc_limits>
     250:	50 91 75 01 	lds	r21, 0x0175	; 0x800175 <gear_adc_voltages+0x2>
		gear_adc_limits[1] = gear_adc_voltages[1]+(gear_adc_voltages[2]-gear_adc_voltages[1])/2;
     254:	85 2f       	mov	r24, r21
     256:	90 e0       	ldi	r25, 0x00	; 0
     258:	bc 01       	movw	r22, r24
     25a:	62 1b       	sub	r22, r18
     25c:	73 0b       	sbc	r23, r19
     25e:	9b 01       	movw	r18, r22
     260:	12 f4       	brpl	.+4      	; 0x266 <definitions+0x18c>
     262:	2f 5f       	subi	r18, 0xFF	; 255
     264:	3f 4f       	sbci	r19, 0xFF	; 255
     266:	35 95       	asr	r19
     268:	27 95       	ror	r18
     26a:	24 0f       	add	r18, r20
     26c:	20 93 69 01 	sts	0x0169, r18	; 0x800169 <gear_adc_limits+0x1>
     270:	40 91 76 01 	lds	r20, 0x0176	; 0x800176 <gear_adc_voltages+0x3>
		gear_adc_limits[2] = gear_adc_voltages[2]+(gear_adc_voltages[3]-gear_adc_voltages[2])/2;
     274:	24 2f       	mov	r18, r20
     276:	30 e0       	ldi	r19, 0x00	; 0
     278:	b9 01       	movw	r22, r18
     27a:	68 1b       	sub	r22, r24
     27c:	79 0b       	sbc	r23, r25
     27e:	cb 01       	movw	r24, r22
     280:	99 23       	and	r25, r25
     282:	0c f4       	brge	.+2      	; 0x286 <definitions+0x1ac>
     284:	01 96       	adiw	r24, 0x01	; 1
     286:	95 95       	asr	r25
     288:	87 95       	ror	r24
     28a:	85 0f       	add	r24, r21
     28c:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <gear_adc_limits+0x2>
     290:	50 91 77 01 	lds	r21, 0x0177	; 0x800177 <gear_adc_voltages+0x4>
		gear_adc_limits[3] = gear_adc_voltages[3]+(gear_adc_voltages[4]-gear_adc_voltages[3])/2;
     294:	85 2f       	mov	r24, r21
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	bc 01       	movw	r22, r24
     29a:	62 1b       	sub	r22, r18
     29c:	73 0b       	sbc	r23, r19
     29e:	9b 01       	movw	r18, r22
     2a0:	12 f4       	brpl	.+4      	; 0x2a6 <definitions+0x1cc>
     2a2:	2f 5f       	subi	r18, 0xFF	; 255
     2a4:	3f 4f       	sbci	r19, 0xFF	; 255
     2a6:	35 95       	asr	r19
     2a8:	27 95       	ror	r18
     2aa:	24 0f       	add	r18, r20
     2ac:	20 93 6b 01 	sts	0x016B, r18	; 0x80016b <gear_adc_limits+0x3>
     2b0:	40 91 78 01 	lds	r20, 0x0178	; 0x800178 <gear_adc_voltages+0x5>
		gear_adc_limits[4] = gear_adc_voltages[4]+(gear_adc_voltages[5]-gear_adc_voltages[4])/2;
     2b4:	24 2f       	mov	r18, r20
     2b6:	30 e0       	ldi	r19, 0x00	; 0
     2b8:	28 1b       	sub	r18, r24
     2ba:	39 0b       	sbc	r19, r25
     2bc:	c9 01       	movw	r24, r18
     2be:	99 23       	and	r25, r25
     2c0:	0c f4       	brge	.+2      	; 0x2c4 <definitions+0x1ea>
     2c2:	01 96       	adiw	r24, 0x01	; 1
     2c4:	95 95       	asr	r25
     2c6:	87 95       	ror	r24
     2c8:	85 0f       	add	r24, r21
     2ca:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <gear_adc_limits+0x4>
     2ce:	40 93 6d 01 	sts	0x016D, r20	; 0x80016d <gear_adc_limits+0x5>
		gear_adc_limits[5] = gear_adc_voltages[5];
     2d2:	df 91       	pop	r29
     2d4:	cf 91       	pop	r28

	}
     2d6:	1f 91       	pop	r17
     2d8:	0f 91       	pop	r16
     2da:	ff 90       	pop	r15
     2dc:	ef 90       	pop	r14
     2de:	df 90       	pop	r13
     2e0:	cf 90       	pop	r12
     2e2:	bf 90       	pop	r11
     2e4:	af 90       	pop	r10
     2e6:	9f 90       	pop	r9
     2e8:	8f 90       	pop	r8
     2ea:	7f 90       	pop	r7
     2ec:	6f 90       	pop	r6
     2ee:	5f 90       	pop	r5
     2f0:	4f 90       	pop	r4
     2f2:	08 95       	ret

000002f4 <gear_read>:
     2f4:	cf 93       	push	r28
     2f6:	df 93       	push	r29
void gear_read()
{
	//6gear
	
	//if digital output is high (for neutral)
	if ((PINA&(1<<PA3)) == 0){
     2f8:	03 99       	sbic	0x00, 3	; 0
     2fa:	03 c0       	rjmp	.+6      	; 0x302 <gear_read+0xe>
			gear = 0;	
     2fc:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <gear>
     300:	3f c0       	rjmp	.+126    	; 0x380 <gear_read+0x8c>
			gear=7;
			//while no gear was detected and the index is smaller than 6
			while(gear == 7 && x <= 5){
				if (x < 5 && x > 0 ) {
					//if gear is not 1 or 6 use this routine
					if (adc_gear >= gear_adc_limits[x-1] && adc_gear <= gear_adc_limits[x] )
     302:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <adc_gear>
					gear = x+1;
				} else {
					
					if(adc_gear >= gear_adc_limits[5] && adc_gear <= gear_adc_limits[5]+10)
     306:	e8 e6       	ldi	r30, 0x68	; 104
     308:	f1 e0       	ldi	r31, 0x01	; 1
     30a:	45 81       	ldd	r20, Z+5	; 0x05
     30c:	c9 2f       	mov	r28, r25
     30e:	d0 e0       	ldi	r29, 0x00	; 0
     310:	64 2f       	mov	r22, r20
     312:	70 e0       	ldi	r23, 0x00	; 0
     314:	66 5f       	subi	r22, 0xF6	; 246
     316:	7f 4f       	sbci	r23, 0xFF	; 255
						gear = 6;
				
					if(adc_gear <= gear_adc_limits[0])
     318:	a0 81       	ld	r26, Z
     31a:	e7 e6       	ldi	r30, 0x67	; 103
     31c:	f1 e0       	ldi	r31, 0x01	; 1
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	57 e0       	ldi	r21, 0x07	; 7
			int x = 0;
			//if no valid gear is recognised a unvalid gear (7) will be transmitted,
			gear=7;
			//while no gear was detected and the index is smaller than 6
			while(gear == 7 && x <= 5){
				if (x < 5 && x > 0 ) {
     322:	9f 01       	movw	r18, r30
     324:	28 56       	subi	r18, 0x68	; 104
     326:	31 40       	sbci	r19, 0x01	; 1
     328:	24 30       	cpi	r18, 0x04	; 4
     32a:	31 05       	cpc	r19, r1
     32c:	40 f4       	brcc	.+16     	; 0x33e <gear_read+0x4a>
					//if gear is not 1 or 6 use this routine
					if (adc_gear >= gear_adc_limits[x-1] && adc_gear <= gear_adc_limits[x] )
     32e:	20 81       	ld	r18, Z
     330:	92 17       	cp	r25, r18
     332:	b0 f0       	brcs	.+44     	; 0x360 <gear_read+0x6c>
     334:	21 81       	ldd	r18, Z+1	; 0x01
     336:	29 17       	cp	r18, r25
     338:	a8 f4       	brcc	.+42     	; 0x364 <gear_read+0x70>
     33a:	25 2f       	mov	r18, r21
     33c:	16 c0       	rjmp	.+44     	; 0x36a <gear_read+0x76>
					gear = x+1;
				} else {
					
					if(adc_gear >= gear_adc_limits[5] && adc_gear <= gear_adc_limits[5]+10)
     33e:	94 17       	cp	r25, r20
     340:	48 f0       	brcs	.+18     	; 0x354 <gear_read+0x60>
     342:	6c 17       	cp	r22, r28
     344:	7d 07       	cpc	r23, r29
     346:	34 f0       	brlt	.+12     	; 0x354 <gear_read+0x60>
						gear = 6;
     348:	86 e0       	ldi	r24, 0x06	; 6
     34a:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <gear>
				
					if(adc_gear <= gear_adc_limits[0])
     34e:	a9 17       	cp	r26, r25
     350:	18 f4       	brcc	.+6      	; 0x358 <gear_read+0x64>
     352:	16 c0       	rjmp	.+44     	; 0x380 <gear_read+0x8c>
     354:	a9 17       	cp	r26, r25
     356:	40 f0       	brcs	.+16     	; 0x368 <gear_read+0x74>
						gear = 1;
     358:	81 e0       	ldi	r24, 0x01	; 1
     35a:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <gear>
     35e:	10 c0       	rjmp	.+32     	; 0x380 <gear_read+0x8c>
     360:	25 2f       	mov	r18, r21
     362:	03 c0       	rjmp	.+6      	; 0x36a <gear_read+0x76>
			//while no gear was detected and the index is smaller than 6
			while(gear == 7 && x <= 5){
				if (x < 5 && x > 0 ) {
					//if gear is not 1 or 6 use this routine
					if (adc_gear >= gear_adc_limits[x-1] && adc_gear <= gear_adc_limits[x] )
					gear = x+1;
     364:	28 2f       	mov	r18, r24
     366:	01 c0       	rjmp	.+2      	; 0x36a <gear_read+0x76>
     368:	25 2f       	mov	r18, r21
			//x is an index var to indicate the fitting values in the array
			int x = 0;
			//if no valid gear is recognised a unvalid gear (7) will be transmitted,
			gear=7;
			//while no gear was detected and the index is smaller than 6
			while(gear == 7 && x <= 5){
     36a:	27 30       	cpi	r18, 0x07	; 7
     36c:	19 f0       	breq	.+6      	; 0x374 <gear_read+0x80>
     36e:	20 93 4b 01 	sts	0x014B, r18	; 0x80014b <gear>
     372:	06 c0       	rjmp	.+12     	; 0x380 <gear_read+0x8c>
     374:	8f 5f       	subi	r24, 0xFF	; 255
     376:	31 96       	adiw	r30, 0x01	; 1
     378:	87 30       	cpi	r24, 0x07	; 7
     37a:	99 f6       	brne	.-90     	; 0x322 <gear_read+0x2e>
     37c:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <gear>
			}

			can_data_bytes[0][0] = gear;
	}
	
	can_data_bytes[0][0] = gear;
     380:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <gear>
     384:	e9 e7       	ldi	r30, 0x79	; 121
     386:	f1 e0       	ldi	r31, 0x01	; 1
     388:	80 83       	st	Z, r24
	can_data_bytes[0][1] = gear;
     38a:	81 83       	std	Z+1, r24	; 0x01
	can_data_bytes[0][2] = 99;//random numbers to make later sure it transmitted correctly
     38c:	83 e6       	ldi	r24, 0x63	; 99
     38e:	82 83       	std	Z+2, r24	; 0x02
	can_data_bytes[0][3] = 98;
     390:	82 e6       	ldi	r24, 0x62	; 98
     392:	83 83       	std	Z+3, r24	; 0x03
	can_data_bytes[0][4] = 97;
     394:	81 e6       	ldi	r24, 0x61	; 97
     396:	84 83       	std	Z+4, r24	; 0x04
	can_data_bytes[0][5] = 96;
     398:	80 e6       	ldi	r24, 0x60	; 96
     39a:	85 83       	std	Z+5, r24	; 0x05
	can_data_bytes[0][6] = 95;
     39c:	8f e5       	ldi	r24, 0x5F	; 95
     39e:	86 83       	std	Z+6, r24	; 0x06
	can_data_bytes[0][7] = 94;
     3a0:	8e e5       	ldi	r24, 0x5E	; 94
     3a2:	87 83       	std	Z+7, r24	; 0x07

}
     3a4:	df 91       	pop	r29
     3a6:	cf 91       	pop	r28
     3a8:	08 95       	ret

000003aa <shift_ctrl>:
//		1 = neutral
//		2 = Up

uint8_t deg_set = 0;

void shift_ctrl(){
     3aa:	cf 92       	push	r12
     3ac:	df 92       	push	r13
     3ae:	ef 92       	push	r14
     3b0:	ff 92       	push	r15
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
	
	//if shifting process wasn't started and a shifting signal is received
	if(!shiftlock && (UP || DWN)){
     3b6:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <shiftlock>
     3ba:	81 11       	cpse	r24, r1
     3bc:	6d c0       	rjmp	.+218    	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     3be:	80 91 84 01 	lds	r24, 0x0184	; 0x800184 <can_data_bytes+0xb>
     3c2:	81 11       	cpse	r24, r1
     3c4:	f9 c0       	rjmp	.+498    	; 0x5b8 <__LOCK_REGION_LENGTH__+0x1b8>
     3c6:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <can_data_bytes+0xa>
     3ca:	81 11       	cpse	r24, r1
     3cc:	e3 c0       	rjmp	.+454    	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
     3ce:	64 c0       	rjmp	.+200    	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
		
		//set start timestamp
		tme_shf_str=time;
		//if shift up signal comes
		if( UP && gear < 6 ){
			shift_locktime = locktime_shift;
     3d0:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <locktime_shift>
     3d4:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <locktime_shift+0x1>
     3d8:	30 93 40 01 	sts	0x0140, r19	; 0x800140 <shift_locktime+0x1>
     3dc:	20 93 3f 01 	sts	0x013F, r18	; 0x80013f <shift_locktime>
			shiftlock = true;
     3e0:	91 e0       	ldi	r25, 0x01	; 1
     3e2:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <shiftlock>
			shift = 0;
     3e6:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <shift>
			servo_locktime_gear = shf_drt_up+shf_drt_mid;
     3ea:	40 91 1b 01 	lds	r20, 0x011B	; 0x80011b <shf_drt_up>
     3ee:	50 91 1c 01 	lds	r21, 0x011C	; 0x80011c <shf_drt_up+0x1>
     3f2:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <shf_drt_mid>
     3f6:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <shf_drt_mid+0x1>
     3fa:	24 0f       	add	r18, r20
     3fc:	35 1f       	adc	r19, r21
     3fe:	30 93 51 01 	sts	0x0151, r19	; 0x800151 <servo_locktime_gear+0x1>
     402:	20 93 50 01 	sts	0x0150, r18	; 0x800150 <servo_locktime_gear>
			gear_desired = gear+1;
     406:	8f 5f       	subi	r24, 0xFF	; 255
     408:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <gear_desired>
			shf_drt_current = shf_drt_up;
     40c:	50 93 42 01 	sts	0x0142, r21	; 0x800142 <shf_drt_current+0x1>
     410:	40 93 41 01 	sts	0x0141, r20	; 0x800141 <shf_drt_current>
			//if we are in neutral and hsift up we want gear 1
			
		}
		//if shift down signal is received
		if( DWN && gear > 0 ){
     414:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <can_data_bytes+0xa>
     418:	88 23       	and	r24, r24
     41a:	09 f4       	brne	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     41c:	e4 c0       	rjmp	.+456    	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
     41e:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <gear>
     422:	88 23       	and	r24, r24
     424:	09 f4       	brne	.+2      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     426:	df c0       	rjmp	.+446    	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
			shift_locktime = locktime_shift;
     428:	20 91 15 01 	lds	r18, 0x0115	; 0x800115 <locktime_shift>
     42c:	30 91 16 01 	lds	r19, 0x0116	; 0x800116 <locktime_shift+0x1>
     430:	30 93 40 01 	sts	0x0140, r19	; 0x800140 <shift_locktime+0x1>
     434:	20 93 3f 01 	sts	0x013F, r18	; 0x80013f <shift_locktime>
			shiftlock = true;
     438:	91 e0       	ldi	r25, 0x01	; 1
     43a:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <shiftlock>
			shift = 2;
     43e:	92 e0       	ldi	r25, 0x02	; 2
     440:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <shift>
			servo_locktime_gear = shf_drt_dwn+shf_drt_mid;
     444:	20 91 19 01 	lds	r18, 0x0119	; 0x800119 <shf_drt_dwn>
     448:	30 91 1a 01 	lds	r19, 0x011A	; 0x80011a <shf_drt_dwn+0x1>
     44c:	40 91 1d 01 	lds	r20, 0x011D	; 0x80011d <shf_drt_mid>
     450:	50 91 1e 01 	lds	r21, 0x011E	; 0x80011e <shf_drt_mid+0x1>
     454:	b9 01       	movw	r22, r18
     456:	64 0f       	add	r22, r20
     458:	75 1f       	adc	r23, r21
     45a:	70 93 51 01 	sts	0x0151, r23	; 0x800151 <servo_locktime_gear+0x1>
     45e:	60 93 50 01 	sts	0x0150, r22	; 0x800150 <servo_locktime_gear>
			shf_drt_current = shf_drt_dwn;
     462:	30 93 42 01 	sts	0x0142, r19	; 0x800142 <shf_drt_current+0x1>
     466:	20 93 41 01 	sts	0x0141, r18	; 0x800141 <shf_drt_current>
			gear_desired = gear-1;
     46a:	9f ef       	ldi	r25, 0xFF	; 255
     46c:	98 0f       	add	r25, r24
     46e:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <gear_desired>
			//if we shift down in gear 1 we want neutral gear
			if(gear == 2){
     472:	82 30       	cpi	r24, 0x02	; 2
     474:	09 f0       	breq	.+2      	; 0x478 <__LOCK_REGION_LENGTH__+0x78>
     476:	b7 c0       	rjmp	.+366    	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
				shift = 1;
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <shift>
				servo_locktime_gear = shf_drt_mid+shf_drt_neutral;
     47e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <shf_drt_neutral>
     482:	90 91 18 01 	lds	r25, 0x0118	; 0x800118 <shf_drt_neutral+0x1>
     486:	48 0f       	add	r20, r24
     488:	59 1f       	adc	r21, r25
     48a:	50 93 51 01 	sts	0x0151, r21	; 0x800151 <servo_locktime_gear+0x1>
     48e:	40 93 50 01 	sts	0x0150, r20	; 0x800150 <servo_locktime_gear>
				gear_desired = 0;
     492:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <gear_desired>
     496:	a7 c0       	rjmp	.+334    	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
				
			}
		}
	} else {
		//when the servo should move to desired position
		if((time-tme_shf_str)<shf_drt_current && gear_desired != gear){
     498:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <time>
     49c:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <time+0x1>
     4a0:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <time+0x2>
     4a4:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <time+0x3>
     4a8:	f4 d4       	rcall	.+2536   	; 0xe92 <__floatunsisf>
     4aa:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <tme_shf_str>
     4ae:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <tme_shf_str+0x1>
     4b2:	40 91 62 01 	lds	r20, 0x0162	; 0x800162 <tme_shf_str+0x2>
     4b6:	50 91 63 01 	lds	r21, 0x0163	; 0x800163 <tme_shf_str+0x3>
     4ba:	ee d3       	rcall	.+2012   	; 0xc98 <__subsf3>
     4bc:	6b 01       	movw	r12, r22
     4be:	7c 01       	movw	r14, r24
     4c0:	60 91 41 01 	lds	r22, 0x0141	; 0x800141 <shf_drt_current>
     4c4:	70 91 42 01 	lds	r23, 0x0142	; 0x800142 <shf_drt_current+0x1>
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	90 e0       	ldi	r25, 0x00	; 0
     4cc:	e2 d4       	rcall	.+2500   	; 0xe92 <__floatunsisf>
     4ce:	9b 01       	movw	r18, r22
     4d0:	ac 01       	movw	r20, r24
     4d2:	c7 01       	movw	r24, r14
     4d4:	b6 01       	movw	r22, r12
     4d6:	45 d4       	rcall	.+2186   	; 0xd62 <__cmpsf2>
     4d8:	88 23       	and	r24, r24
     4da:	0c f0       	brlt	.+2      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     4dc:	4f c0       	rjmp	.+158    	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
     4de:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <gear_desired>
     4e2:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <gear>
     4e6:	98 17       	cp	r25, r24
     4e8:	09 f4       	brne	.+2      	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
     4ea:	48 c0       	rjmp	.+144    	; 0x57c <__LOCK_REGION_LENGTH__+0x17c>
			
			//if no shifting angle is set
			if(!deg_set){
     4ec:	80 91 3d 01 	lds	r24, 0x013D	; 0x80013d <deg_set>
     4f0:	81 11       	cpse	r24, r1
     4f2:	25 c0       	rjmp	.+74     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
				deg_set = 1;
     4f4:	81 e0       	ldi	r24, 0x01	; 1
     4f6:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <deg_set>
				//set shift angle according to wished position
				switch (shift){
     4fa:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <shift>
     4fe:	81 30       	cpi	r24, 0x01	; 1
     500:	69 f0       	breq	.+26     	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
     502:	18 f0       	brcs	.+6      	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
     504:	82 30       	cpi	r24, 0x02	; 2
     506:	99 f0       	breq	.+38     	; 0x52e <__LOCK_REGION_LENGTH__+0x12e>
     508:	1a c0       	rjmp	.+52     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
					case 0:
						shift_time = time_dwn;
     50a:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <time_dwn>
     50e:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <time_dwn+0x1>
     512:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <shift_time+0x1>
     516:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <shift_time>
						break;
     51a:	11 c0       	rjmp	.+34     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
					case 1:
						shift_time = time_neutral;
     51c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <time_neutral>
     520:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <time_neutral+0x1>
     524:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <shift_time+0x1>
     528:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <shift_time>
						break;
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__LOCK_REGION_LENGTH__+0x13e>
					case 2:
					shift_time = time_up;
     52e:	80 91 b1 01 	lds	r24, 0x01B1	; 0x8001b1 <time_up>
     532:	90 91 b2 01 	lds	r25, 0x01B2	; 0x8001b2 <time_up+0x1>
     536:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <shift_time+0x1>
     53a:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <shift_time>
					break;
				}	
			}
			rpm = can_data_bytes[2][0] + (can_data_bytes[2][1] << 8);
     53e:	e9 e7       	ldi	r30, 0x79	; 121
     540:	f1 e0       	ldi	r31, 0x01	; 1
     542:	c1 89       	ldd	r28, Z+17	; 0x11
     544:	d0 e0       	ldi	r29, 0x00	; 0
     546:	dc 2f       	mov	r29, r28
     548:	cc 27       	eor	r28, r28
     54a:	80 89       	ldd	r24, Z+16	; 0x10
     54c:	c8 0f       	add	r28, r24
     54e:	d1 1d       	adc	r29, r1
     550:	d0 93 72 01 	sts	0x0172, r29	; 0x800172 <rpm+0x1>
     554:	c0 93 71 01 	sts	0x0171, r28	; 0x800171 <rpm>
			//if flatshift time elapsed and engine rpm are fitting activate flatshift
			if(((time-tme_shf_str)>ign_off_offset) && rpm > 3500){
     558:	60 91 10 01 	lds	r22, 0x0110	; 0x800110 <ign_off_offset>
     55c:	70 e0       	ldi	r23, 0x00	; 0
     55e:	80 e0       	ldi	r24, 0x00	; 0
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	99 d4       	rcall	.+2354   	; 0xe96 <__floatsisf>
     564:	9b 01       	movw	r18, r22
     566:	ac 01       	movw	r20, r24
     568:	c7 01       	movw	r24, r14
     56a:	b6 01       	movw	r22, r12
     56c:	44 d5       	rcall	.+2696   	; 0xff6 <__gesf2>
     56e:	18 16       	cp	r1, r24
     570:	d4 f5       	brge	.+116    	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
     572:	cd 3a       	cpi	r28, 0xAD	; 173
     574:	dd 40       	sbci	r29, 0x0D	; 13
     576:	b8 f1       	brcs	.+110    	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
				PORTA |= (1<<PA0); //Flat shift on
     578:	10 9a       	sbi	0x02, 0	; 2
     57a:	35 c0       	rjmp	.+106    	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
			}
		//when servo should move to middle position again
		} else {

			PORTA &= ~(1<<PA0); //Flat shift off
     57c:	10 98       	cbi	0x02, 0	; 2
			//set servo to middle position again
			shift_time = time_mid;
     57e:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <time_mid>
     582:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <time_mid+0x1>
     586:	90 93 70 01 	sts	0x0170, r25	; 0x800170 <shift_time+0x1>
     58a:	80 93 6f 01 	sts	0x016F, r24	; 0x80016f <shift_time>
			deg_set = 0;
     58e:	10 92 3d 01 	sts	0x013D, r1	; 0x80013d <deg_set>
		}

	}
}
     592:	29 c0       	rjmp	.+82     	; 0x5e6 <__LOCK_REGION_LENGTH__+0x1e6>
	//if shifting process wasn't started and a shifting signal is received
	if(!shiftlock && (UP || DWN)){
		
		
		//set start timestamp
		tme_shf_str=time;
     594:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <time>
     598:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <time+0x1>
     59c:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <time+0x2>
     5a0:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <time+0x3>
     5a4:	76 d4       	rcall	.+2284   	; 0xe92 <__floatunsisf>
     5a6:	60 93 60 01 	sts	0x0160, r22	; 0x800160 <tme_shf_str>
     5aa:	70 93 61 01 	sts	0x0161, r23	; 0x800161 <tme_shf_str+0x1>
     5ae:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <tme_shf_str+0x2>
     5b2:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <tme_shf_str+0x3>
     5b6:	33 cf       	rjmp	.-410    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     5b8:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <time>
     5bc:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <time+0x1>
     5c0:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <time+0x2>
     5c4:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <time+0x3>
     5c8:	64 d4       	rcall	.+2248   	; 0xe92 <__floatunsisf>
     5ca:	60 93 60 01 	sts	0x0160, r22	; 0x800160 <tme_shf_str>
     5ce:	70 93 61 01 	sts	0x0161, r23	; 0x800161 <tme_shf_str+0x1>
     5d2:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <tme_shf_str+0x2>
     5d6:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <tme_shf_str+0x3>
		//if shift up signal comes
		if( UP && gear < 6 ){
     5da:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <gear>
     5de:	86 30       	cpi	r24, 0x06	; 6
     5e0:	08 f4       	brcc	.+2      	; 0x5e4 <__LOCK_REGION_LENGTH__+0x1e4>
     5e2:	f6 ce       	rjmp	.-532    	; 0x3d0 <shift_ctrl+0x26>
     5e4:	17 cf       	rjmp	.-466    	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
			shift_time = time_mid;
			deg_set = 0;
		}

	}
}
     5e6:	df 91       	pop	r29
     5e8:	cf 91       	pop	r28
     5ea:	ff 90       	pop	r15
     5ec:	ef 90       	pop	r14
     5ee:	df 90       	pop	r13
     5f0:	cf 90       	pop	r12
     5f2:	08 95       	ret

000005f4 <clutch_ctrl>:

uint8_t clu_pressed = 0;
uint16_t clu_period = 0;

void clutch_ctrl(){
     5f4:	cf 92       	push	r12
     5f6:	df 92       	push	r13
     5f8:	ef 92       	push	r14
     5fa:	ff 92       	push	r15
     5fc:	1f 93       	push	r17
     5fe:	cf 93       	push	r28
     600:	df 93       	push	r29
	
	uint8_t encoder = R_ENC;
     602:	e9 e7       	ldi	r30, 0x79	; 121
     604:	f1 e0       	ldi	r31, 0x01	; 1
	encoder = (encoder / 2)+1;
     606:	61 85       	ldd	r22, Z+9	; 0x09
     608:	66 95       	lsr	r22
     60a:	11 e0       	ldi	r17, 0x01	; 1
     60c:	16 0f       	add	r17, r22

	if(SLOW == 1 || FAST == 1)
     60e:	85 85       	ldd	r24, Z+13	; 0x0d
     610:	81 30       	cpi	r24, 0x01	; 1
     612:	29 f0       	breq	.+10     	; 0x61e <clutch_ctrl+0x2a>
     614:	80 91 85 01 	lds	r24, 0x0185	; 0x800185 <can_data_bytes+0xc>
     618:	81 30       	cpi	r24, 0x01	; 1
     61a:	09 f0       	breq	.+2      	; 0x61e <clutch_ctrl+0x2a>
     61c:	3b c0       	rjmp	.+118    	; 0x694 <clutch_ctrl+0xa0>
	{
		deg_clu = 100;
     61e:	80 e0       	ldi	r24, 0x00	; 0
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	a8 ec       	ldi	r26, 0xC8	; 200
     624:	b2 e4       	ldi	r27, 0x42	; 66
     626:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <deg_clu>
     62a:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <deg_clu+0x1>
     62e:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <deg_clu+0x2>
     632:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <deg_clu+0x3>
		clutch_time = 1800 + (deg_clu *(2400/deg_max));
     636:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <deg_max>
     63a:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <deg_max+0x1>
     63e:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <deg_max+0x2>
     642:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <deg_max+0x3>
     646:	60 e0       	ldi	r22, 0x00	; 0
     648:	70 e0       	ldi	r23, 0x00	; 0
     64a:	86 e1       	ldi	r24, 0x16	; 22
     64c:	95 e4       	ldi	r25, 0x45	; 69
     64e:	8d d3       	rcall	.+1818   	; 0xd6a <__divsf3>
     650:	20 e0       	ldi	r18, 0x00	; 0
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	48 ec       	ldi	r20, 0xC8	; 200
     656:	52 e4       	ldi	r21, 0x42	; 66
     658:	d2 d4       	rcall	.+2468   	; 0xffe <__mulsf3>
     65a:	20 e0       	ldi	r18, 0x00	; 0
     65c:	30 e0       	ldi	r19, 0x00	; 0
     65e:	41 ee       	ldi	r20, 0xE1	; 225
     660:	54 e4       	ldi	r21, 0x44	; 68
     662:	1b d3       	rcall	.+1590   	; 0xc9a <__addsf3>
     664:	ea d3       	rcall	.+2004   	; 0xe3a <__fixunssfsi>
     666:	70 93 20 01 	sts	0x0120, r23	; 0x800120 <clutch_time+0x1>
     66a:	60 93 1f 01 	sts	0x011F, r22	; 0x80011f <clutch_time>
		clu_period = 800*(encoder);
     66e:	20 e2       	ldi	r18, 0x20	; 32
     670:	33 e0       	ldi	r19, 0x03	; 3
     672:	12 9f       	mul	r17, r18
     674:	c0 01       	movw	r24, r0
     676:	13 9f       	mul	r17, r19
     678:	90 0d       	add	r25, r0
     67a:	11 24       	eor	r1, r1
     67c:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <__data_end+0x1>
     680:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <__data_end>
		clu_pressed = 1;
     684:	21 e0       	ldi	r18, 0x01	; 1
     686:	20 93 3c 01 	sts	0x013C, r18	; 0x80013c <clu_pressed>
		servo_locktime_clutch=clu_period;
     68a:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <servo_locktime_clutch+0x1>
     68e:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <servo_locktime_clutch>
     692:	67 c0       	rjmp	.+206    	; 0x762 <clutch_ctrl+0x16e>
		
		} else{
		if (!locktime_set && clu_pressed){
     694:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <locktime_set>
     698:	81 11       	cpse	r24, r1
     69a:	0f c0       	rjmp	.+30     	; 0x6ba <clutch_ctrl+0xc6>
     69c:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <clu_pressed>
     6a0:	88 23       	and	r24, r24
     6a2:	59 f0       	breq	.+22     	; 0x6ba <clutch_ctrl+0xc6>
			servo_locktime_clutch=5000;
     6a4:	88 e8       	ldi	r24, 0x88	; 136
     6a6:	93 e1       	ldi	r25, 0x13	; 19
     6a8:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <servo_locktime_clutch+0x1>
     6ac:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <servo_locktime_clutch>
			locktime_set=true;
     6b0:	81 e0       	ldi	r24, 0x01	; 1
     6b2:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <locktime_set>
			clu_pressed = 0;
     6b6:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <clu_pressed>
		}
		if(clu_period > 0){
     6ba:	c0 91 3a 01 	lds	r28, 0x013A	; 0x80013a <__data_end>
     6be:	d0 91 3b 01 	lds	r29, 0x013B	; 0x80013b <__data_end+0x1>
     6c2:	20 97       	sbiw	r28, 0x00	; 0
     6c4:	09 f4       	brne	.+2      	; 0x6c8 <clutch_ctrl+0xd4>
     6c6:	4d c0       	rjmp	.+154    	; 0x762 <clutch_ctrl+0x16e>
			deg_clu = (100./(encoder*8)*clu_period)/100;
     6c8:	61 2f       	mov	r22, r17
     6ca:	70 e0       	ldi	r23, 0x00	; 0
     6cc:	66 0f       	add	r22, r22
     6ce:	77 1f       	adc	r23, r23
     6d0:	66 0f       	add	r22, r22
     6d2:	77 1f       	adc	r23, r23
     6d4:	66 0f       	add	r22, r22
     6d6:	77 1f       	adc	r23, r23
     6d8:	07 2e       	mov	r0, r23
     6da:	00 0c       	add	r0, r0
     6dc:	88 0b       	sbc	r24, r24
     6de:	99 0b       	sbc	r25, r25
     6e0:	da d3       	rcall	.+1972   	; 0xe96 <__floatsisf>
     6e2:	9b 01       	movw	r18, r22
     6e4:	ac 01       	movw	r20, r24
     6e6:	60 e0       	ldi	r22, 0x00	; 0
     6e8:	70 e0       	ldi	r23, 0x00	; 0
     6ea:	88 ec       	ldi	r24, 0xC8	; 200
     6ec:	92 e4       	ldi	r25, 0x42	; 66
     6ee:	3d d3       	rcall	.+1658   	; 0xd6a <__divsf3>
     6f0:	6b 01       	movw	r12, r22
     6f2:	7c 01       	movw	r14, r24
     6f4:	be 01       	movw	r22, r28
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	cb d3       	rcall	.+1942   	; 0xe92 <__floatunsisf>
     6fc:	9b 01       	movw	r18, r22
     6fe:	ac 01       	movw	r20, r24
     700:	c7 01       	movw	r24, r14
     702:	b6 01       	movw	r22, r12
     704:	7c d4       	rcall	.+2296   	; 0xffe <__mulsf3>
     706:	20 e0       	ldi	r18, 0x00	; 0
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	48 ec       	ldi	r20, 0xC8	; 200
     70c:	52 e4       	ldi	r21, 0x42	; 66
     70e:	2d d3       	rcall	.+1626   	; 0xd6a <__divsf3>
     710:	6b 01       	movw	r12, r22
     712:	7c 01       	movw	r14, r24
     714:	60 93 46 01 	sts	0x0146, r22	; 0x800146 <deg_clu>
     718:	70 93 47 01 	sts	0x0147, r23	; 0x800147 <deg_clu+0x1>
     71c:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <deg_clu+0x2>
     720:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <deg_clu+0x3>
			clutch_time = 1800+ (deg_clu *(2400/deg_max));
     724:	20 91 11 01 	lds	r18, 0x0111	; 0x800111 <deg_max>
     728:	30 91 12 01 	lds	r19, 0x0112	; 0x800112 <deg_max+0x1>
     72c:	40 91 13 01 	lds	r20, 0x0113	; 0x800113 <deg_max+0x2>
     730:	50 91 14 01 	lds	r21, 0x0114	; 0x800114 <deg_max+0x3>
     734:	60 e0       	ldi	r22, 0x00	; 0
     736:	70 e0       	ldi	r23, 0x00	; 0
     738:	86 e1       	ldi	r24, 0x16	; 22
     73a:	95 e4       	ldi	r25, 0x45	; 69
     73c:	16 d3       	rcall	.+1580   	; 0xd6a <__divsf3>
     73e:	a7 01       	movw	r20, r14
     740:	96 01       	movw	r18, r12
     742:	5d d4       	rcall	.+2234   	; 0xffe <__mulsf3>
     744:	20 e0       	ldi	r18, 0x00	; 0
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	41 ee       	ldi	r20, 0xE1	; 225
     74a:	54 e4       	ldi	r21, 0x44	; 68
     74c:	a6 d2       	rcall	.+1356   	; 0xc9a <__addsf3>
     74e:	75 d3       	rcall	.+1770   	; 0xe3a <__fixunssfsi>
     750:	70 93 20 01 	sts	0x0120, r23	; 0x800120 <clutch_time+0x1>
     754:	60 93 1f 01 	sts	0x011F, r22	; 0x80011f <clutch_time>
			clu_period -= 10;
     758:	2a 97       	sbiw	r28, 0x0a	; 10
     75a:	d0 93 3b 01 	sts	0x013B, r29	; 0x80013b <__data_end+0x1>
     75e:	c0 93 3a 01 	sts	0x013A, r28	; 0x80013a <__data_end>
		}
	}

}
     762:	df 91       	pop	r29
     764:	cf 91       	pop	r28
     766:	1f 91       	pop	r17
     768:	ff 90       	pop	r15
     76a:	ef 90       	pop	r14
     76c:	df 90       	pop	r13
     76e:	cf 90       	pop	r12
     770:	08 95       	ret

00000772 <timer_config>:
void timer_config()
 {
	 
	 //8 bit Timer 0 config
	 //ctc mode and 64 as prescaler
	 TCCR0A = 0 | (1<<WGM01) /*| (1<<COM0A1) */| (1<<CS01) | (1<<CS00);
     772:	8b e0       	ldi	r24, 0x0B	; 11
     774:	84 bd       	out	0x24, r24	; 36
	 TIMSK0 = 0 | (1<<OCF0A); //compare interrupt enable
     776:	82 e0       	ldi	r24, 0x02	; 2
     778:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
	 OCR0A = 250-1; // compare value for 1ms;
     77c:	89 ef       	ldi	r24, 0xF9	; 249
     77e:	87 bd       	out	0x27, r24	; 39

	 //16 bit Timer 1 config
	 //CTC mode and a prescaler of 8
	 TCCR1B |= (1<<CS11) | (1<<WGM12);
     780:	e1 e8       	ldi	r30, 0x81	; 129
     782:	f0 e0       	ldi	r31, 0x00	; 0
     784:	80 81       	ld	r24, Z
     786:	8a 60       	ori	r24, 0x0A	; 10
     788:	80 83       	st	Z, r24
	 TIMSK1 |= (1<<OCIE1A);
     78a:	ef e6       	ldi	r30, 0x6F	; 111
     78c:	f0 e0       	ldi	r31, 0x00	; 0
     78e:	80 81       	ld	r24, Z
     790:	82 60       	ori	r24, 0x02	; 2
     792:	80 83       	st	Z, r24
	 
	 //these comments ensure that the ports we use for servo signal generation
	 //stick to their normal port opeation
	 	  TCCR2A = 0;
     794:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	 	  TCCR1A = 0;
     798:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     79c:	08 95       	ret

0000079e <adc_config>:
 }

void adc_config()
 {
	 // AREF = AVcc
	 ADMUX = (1<<REFS0);
     79e:	80 e4       	ldi	r24, 0x40	; 64
     7a0:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	 // ADEN enabes ADC
	 // ADIE eneables interrupts
	 // ADC prescaler 128
	 // 16000000/128 = 125000
	 ADCSRA = (1<<ADEN) | (1<<ADPS2)/* | (1<<ADPS1) | (1<<ADPS0)*/ | (1<<ADIE);
     7a4:	ea e7       	ldi	r30, 0x7A	; 122
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	8c e8       	ldi	r24, 0x8C	; 140
     7aa:	80 83       	st	Z, r24
	 //start first conversation
	 ADCSRA |= (1<<ADSC);
     7ac:	80 81       	ld	r24, Z
     7ae:	80 64       	ori	r24, 0x40	; 64
     7b0:	80 83       	st	Z, r24
     7b2:	08 95       	ret

000007b4 <port_config>:
 }

void port_config()
 {
	 
	 MCUCR &= ~(1<<PUD); //Pull Up Enable
     7b4:	85 b7       	in	r24, 0x35	; 53
     7b6:	8f 7e       	andi	r24, 0xEF	; 239
     7b8:	85 bf       	out	0x35, r24	; 53
	 DDRA = (1<<PA0) | (1<<PA1) | (1<<PA2);
     7ba:	87 e0       	ldi	r24, 0x07	; 7
     7bc:	81 b9       	out	0x01, r24	; 1
	 DDRB = (1<<PB0) | (1<<PB1) | (1<<PB2) | (1<<PB4) | (1<<PB5);
     7be:	87 e3       	ldi	r24, 0x37	; 55
     7c0:	84 b9       	out	0x04, r24	; 4
     7c2:	08 95       	ret

000007c4 <servo_lock>:
	 
 }
void servo_lock()
{
		//locktime calculations
		if (servo_locktime_gear > 0){
     7c4:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <servo_locktime_gear>
     7c8:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <servo_locktime_gear+0x1>
     7cc:	18 16       	cp	r1, r24
     7ce:	19 06       	cpc	r1, r25
     7d0:	2c f4       	brge	.+10     	; 0x7dc <servo_lock+0x18>
			servo_locktime_gear-=10;
     7d2:	0a 97       	sbiw	r24, 0x0a	; 10
     7d4:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <servo_locktime_gear+0x1>
     7d8:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <servo_locktime_gear>
		}
		if (servo_locktime_clutch > 0)
     7dc:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <servo_locktime_clutch>
     7e0:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <servo_locktime_clutch+0x1>
     7e4:	18 16       	cp	r1, r24
     7e6:	19 06       	cpc	r1, r25
     7e8:	2c f4       	brge	.+10     	; 0x7f4 <servo_lock+0x30>
			servo_locktime_clutch-=10;
     7ea:	0a 97       	sbiw	r24, 0x0a	; 10
     7ec:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <servo_locktime_clutch+0x1>
     7f0:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <servo_locktime_clutch>
		if(shift_locktime > 0){
     7f4:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <shift_locktime>
     7f8:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <shift_locktime+0x1>
     7fc:	18 16       	cp	r1, r24
     7fe:	19 06       	cpc	r1, r25
     800:	34 f4       	brge	.+12     	; 0x80e <servo_lock+0x4a>

			shift_locktime -= 10;
     802:	0a 97       	sbiw	r24, 0x0a	; 10
     804:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <shift_locktime+0x1>
     808:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <shift_locktime>
     80c:	02 c0       	rjmp	.+4      	; 0x812 <servo_lock+0x4e>
		}else{
			shiftlock = false;
     80e:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <shiftlock>
		}
		locktime_old=time;
     812:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <time>
     816:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <time+0x1>
     81a:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <time+0x2>
     81e:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <time+0x3>
     822:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <locktime_old>
     826:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <locktime_old+0x1>
     82a:	a0 93 54 01 	sts	0x0154, r26	; 0x800154 <locktime_old+0x2>
     82e:	b0 93 55 01 	sts	0x0155, r27	; 0x800155 <locktime_old+0x3>
     832:	08 95       	ret

00000834 <can_check_free>:
}
uint8_t can_check_free(uint8_t mobnum){

	uint8_t mob_status = 0;
	
	if(mobnum >7){
     834:	88 30       	cpi	r24, 0x08	; 8
     836:	78 f0       	brcs	.+30     	; 0x856 <can_check_free+0x22>
		
		mob_status = !((CANEN1 >> (mobnum-8)) &1);
     838:	20 91 dd 00 	lds	r18, 0x00DD	; 0x8000dd <__TEXT_REGION_LENGTH__+0x7e00dd>
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	88 50       	subi	r24, 0x08	; 8
     840:	a9 01       	movw	r20, r18
     842:	02 c0       	rjmp	.+4      	; 0x848 <can_check_free+0x14>
     844:	55 95       	asr	r21
     846:	47 95       	ror	r20
     848:	8a 95       	dec	r24
     84a:	e2 f7       	brpl	.-8      	; 0x844 <can_check_free+0x10>
     84c:	ca 01       	movw	r24, r20
     84e:	51 e0       	ldi	r21, 0x01	; 1
     850:	85 27       	eor	r24, r21
     852:	81 70       	andi	r24, 0x01	; 1
     854:	08 95       	ret


		} else {
		
		mob_status = !((CANEN2 >> mobnum) &1);
     856:	20 91 dc 00 	lds	r18, 0x00DC	; 0x8000dc <__TEXT_REGION_LENGTH__+0x7e00dc>
     85a:	30 e0       	ldi	r19, 0x00	; 0
     85c:	a9 01       	movw	r20, r18
     85e:	02 c0       	rjmp	.+4      	; 0x864 <can_check_free+0x30>
     860:	55 95       	asr	r21
     862:	47 95       	ror	r20
     864:	8a 95       	dec	r24
     866:	e2 f7       	brpl	.-8      	; 0x860 <can_check_free+0x2c>
     868:	ca 01       	movw	r24, r20
     86a:	51 e0       	ldi	r21, 0x01	; 1
     86c:	85 27       	eor	r24, r21
     86e:	81 70       	andi	r24, 0x01	; 1
	}

	return mob_status;

}
     870:	08 95       	ret

00000872 <can_cfg>:
void can_cfg(){
     872:	3f 92       	push	r3
     874:	4f 92       	push	r4
     876:	5f 92       	push	r5
     878:	6f 92       	push	r6
     87a:	7f 92       	push	r7
     87c:	8f 92       	push	r8
     87e:	9f 92       	push	r9
     880:	af 92       	push	r10
     882:	bf 92       	push	r11
     884:	cf 92       	push	r12
     886:	df 92       	push	r13
     888:	ef 92       	push	r14
     88a:	ff 92       	push	r15
     88c:	0f 93       	push	r16
     88e:	1f 93       	push	r17
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
	
	CANGCON = 0; // Disable CAN
     894:	10 92 d8 00 	sts	0x00D8, r1	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	30 e0       	ldi	r19, 0x00	; 0
	
	for (uint8_t mob = 0; mob < 15 ; mob++){//reset all mobs
		CANPAGE = mob<<MOBNB0 | (1<<AINC);
     89c:	ed ee       	ldi	r30, 0xED	; 237
     89e:	f0 e0       	ldi	r31, 0x00	; 0
		CANSTMOB = 0;
     8a0:	0f 2e       	mov	r0, r31
     8a2:	fe ee       	ldi	r31, 0xEE	; 238
     8a4:	cf 2e       	mov	r12, r31
     8a6:	d1 2c       	mov	r13, r1
     8a8:	f0 2d       	mov	r31, r0
		CANCDMOB = 0;
     8aa:	0f 2e       	mov	r0, r31
     8ac:	ff ee       	ldi	r31, 0xEF	; 239
     8ae:	ef 2e       	mov	r14, r31
     8b0:	f1 2c       	mov	r15, r1
     8b2:	f0 2d       	mov	r31, r0
		CANIDT4 = 0;
     8b4:	00 ef       	ldi	r16, 0xF0	; 240
     8b6:	10 e0       	ldi	r17, 0x00	; 0
		CANIDT3 = 0;
     8b8:	61 ef       	ldi	r22, 0xF1	; 241
     8ba:	70 e0       	ldi	r23, 0x00	; 0
		CANIDT2 = 0;
     8bc:	42 ef       	ldi	r20, 0xF2	; 242
     8be:	50 e0       	ldi	r21, 0x00	; 0
		CANIDT1 = 0;
		CANIDM4 = 0;
     8c0:	0f 2e       	mov	r0, r31
     8c2:	f4 ef       	ldi	r31, 0xF4	; 244
     8c4:	af 2e       	mov	r10, r31
     8c6:	b1 2c       	mov	r11, r1
     8c8:	f0 2d       	mov	r31, r0
		CANIDM3 = 0;
     8ca:	0f 2e       	mov	r0, r31
     8cc:	f5 ef       	ldi	r31, 0xF5	; 245
     8ce:	8f 2e       	mov	r8, r31
     8d0:	91 2c       	mov	r9, r1
     8d2:	f0 2d       	mov	r31, r0
		CANIDM2 = 0;
     8d4:	0f 2e       	mov	r0, r31
     8d6:	f6 ef       	ldi	r31, 0xF6	; 246
     8d8:	6f 2e       	mov	r6, r31
     8da:	71 2c       	mov	r7, r1
     8dc:	f0 2d       	mov	r31, r0
		CANIDM1 = 0;
     8de:	0f 2e       	mov	r0, r31
     8e0:	f7 ef       	ldi	r31, 0xF7	; 247
     8e2:	4f 2e       	mov	r4, r31
     8e4:	51 2c       	mov	r5, r1
     8e6:	f0 2d       	mov	r31, r0
		for (uint8_t byte = 0; byte < 8; byte++){
			CANPAGE = mob<<MOBNB0 | 1<<AINC | byte;
			CANMSG = 0;
     8e8:	aa ef       	ldi	r26, 0xFA	; 250
     8ea:	b0 e0       	ldi	r27, 0x00	; 0
void can_cfg(){
	
	CANGCON = 0; // Disable CAN
	
	for (uint8_t mob = 0; mob < 15 ; mob++){//reset all mobs
		CANPAGE = mob<<MOBNB0 | (1<<AINC);
     8ec:	c9 01       	movw	r24, r18
     8ee:	82 95       	swap	r24
     8f0:	92 95       	swap	r25
     8f2:	90 7f       	andi	r25, 0xF0	; 240
     8f4:	98 27       	eor	r25, r24
     8f6:	80 7f       	andi	r24, 0xF0	; 240
     8f8:	98 27       	eor	r25, r24
     8fa:	98 2f       	mov	r25, r24
     8fc:	98 60       	ori	r25, 0x08	; 8
     8fe:	90 83       	st	Z, r25
		CANSTMOB = 0;
     900:	e6 01       	movw	r28, r12
     902:	18 82       	st	Y, r1
		CANCDMOB = 0;
     904:	e7 01       	movw	r28, r14
     906:	18 82       	st	Y, r1
		CANIDT4 = 0;
     908:	e8 01       	movw	r28, r16
     90a:	18 82       	st	Y, r1
		CANIDT3 = 0;
     90c:	eb 01       	movw	r28, r22
     90e:	18 82       	st	Y, r1
		CANIDT2 = 0;
     910:	ea 01       	movw	r28, r20
     912:	18 82       	st	Y, r1
		CANIDT1 = 0;
     914:	c3 ef       	ldi	r28, 0xF3	; 243
     916:	d0 e0       	ldi	r29, 0x00	; 0
     918:	18 82       	st	Y, r1
		CANIDM4 = 0;
     91a:	e5 01       	movw	r28, r10
     91c:	18 82       	st	Y, r1
		CANIDM3 = 0;
     91e:	e4 01       	movw	r28, r8
     920:	18 82       	st	Y, r1
		CANIDM2 = 0;
     922:	e3 01       	movw	r28, r6
     924:	18 82       	st	Y, r1
		CANIDM1 = 0;
     926:	e2 01       	movw	r28, r4
     928:	18 82       	st	Y, r1
		for (uint8_t byte = 0; byte < 8; byte++){
     92a:	90 e0       	ldi	r25, 0x00	; 0
			CANPAGE = mob<<MOBNB0 | 1<<AINC | byte;
     92c:	88 60       	ori	r24, 0x08	; 8
     92e:	38 2e       	mov	r3, r24
     930:	39 2a       	or	r3, r25
     932:	30 82       	st	Z, r3
			CANMSG = 0;
     934:	1c 92       	st	X, r1
		CANIDT1 = 0;
		CANIDM4 = 0;
		CANIDM3 = 0;
		CANIDM2 = 0;
		CANIDM1 = 0;
		for (uint8_t byte = 0; byte < 8; byte++){
     936:	9f 5f       	subi	r25, 0xFF	; 255
     938:	98 30       	cpi	r25, 0x08	; 8
     93a:	c9 f7       	brne	.-14     	; 0x92e <can_cfg+0xbc>
     93c:	2f 5f       	subi	r18, 0xFF	; 255
     93e:	3f 4f       	sbci	r19, 0xFF	; 255
}
void can_cfg(){
	
	CANGCON = 0; // Disable CAN
	
	for (uint8_t mob = 0; mob < 15 ; mob++){//reset all mobs
     940:	2f 30       	cpi	r18, 0x0F	; 15
     942:	31 05       	cpc	r19, r1
     944:	99 f6       	brne	.-90     	; 0x8ec <can_cfg+0x7a>
			CANPAGE = mob<<MOBNB0 | 1<<AINC | byte;
			CANMSG = 0;
		}
	}

	CANBT1 = 0x00;// Set Baudrate
     946:	10 92 e2 00 	sts	0x00E2, r1	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	CANBT2 = 0x0C;// 500kBaud according
     94a:	8c e0       	ldi	r24, 0x0C	; 12
     94c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
	CANBT3 = 0x36;// to Datasheet S. 267
     950:	86 e3       	ldi	r24, 0x36	; 54
     952:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>

	CANGIE = 0;
     956:	10 92 db 00 	sts	0x00DB, r1	; 0x8000db <__TEXT_REGION_LENGTH__+0x7e00db>

	CANGCON |= (1<<ENASTB); // Enable CAN
     95a:	e8 ed       	ldi	r30, 0xD8	; 216
     95c:	f0 e0       	ldi	r31, 0x00	; 0
     95e:	80 81       	ld	r24, Z
     960:	82 60       	ori	r24, 0x02	; 2
     962:	80 83       	st	Z, r24
}
     964:	df 91       	pop	r29
     966:	cf 91       	pop	r28
     968:	1f 91       	pop	r17
     96a:	0f 91       	pop	r16
     96c:	ff 90       	pop	r15
     96e:	ef 90       	pop	r14
     970:	df 90       	pop	r13
     972:	cf 90       	pop	r12
     974:	bf 90       	pop	r11
     976:	af 90       	pop	r10
     978:	9f 90       	pop	r9
     97a:	8f 90       	pop	r8
     97c:	7f 90       	pop	r7
     97e:	6f 90       	pop	r6
     980:	5f 90       	pop	r5
     982:	4f 90       	pop	r4
     984:	3f 90       	pop	r3
     986:	08 95       	ret

00000988 <can_rx>:
void can_rx(uint8_t mobnum, uint16_t id){
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	eb 01       	movw	r28, r22

	CANPAGE = mobnum << MOBNB0;
     98e:	98 2f       	mov	r25, r24
     990:	92 95       	swap	r25
     992:	90 7f       	andi	r25, 0xF0	; 240
     994:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	if (can_check_free(mobnum)){
     998:	4d df       	rcall	.-358    	; 0x834 <can_check_free>
     99a:	88 23       	and	r24, r24
     99c:	11 f1       	breq	.+68     	; 0x9e2 <can_rx+0x5a>
		/* load the id 11 bit */
		CANIDT1 = id >>3;
     99e:	ce 01       	movw	r24, r28
     9a0:	96 95       	lsr	r25
     9a2:	87 95       	ror	r24
     9a4:	96 95       	lsr	r25
     9a6:	87 95       	ror	r24
     9a8:	96 95       	lsr	r25
     9aa:	87 95       	ror	r24
     9ac:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDT2 = (id << 5)&0b11100000;
     9b0:	c2 95       	swap	r28
     9b2:	cc 0f       	add	r28, r28
     9b4:	c0 7e       	andi	r28, 0xE0	; 224
     9b6:	c0 93 f2 00 	sts	0x00F2, r28	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT3 = 0;
     9ba:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT4 = 1<<RTRTAG;
     9be:	84 e0       	ldi	r24, 0x04	; 4
     9c0:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		CANIDM1 = 0b11111111;
     9c4:	8f ef       	ldi	r24, 0xFF	; 255
     9c6:	80 93 f7 00 	sts	0x00F7, r24	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
		CANIDM2 = 0b11100000;
     9ca:	80 ee       	ldi	r24, 0xE0	; 224
     9cc:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
		CANIDM3 = 0;
     9d0:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
		CANIDM4 = 0;
     9d4:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
		CANCDMOB = (1 << CONMOB1) | (1 << CONMOB0)| (1<<DLC3);
     9d8:	88 ec       	ldi	r24, 0xC8	; 200
     9da:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		CANSTMOB = 0;
     9de:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
	}

}
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	08 95       	ret

000009e8 <can_get_msg>:
void can_get_msg(uint8_t mobnum){
     9e8:	cf 93       	push	r28
     9ea:	df 93       	push	r29
     9ec:	e8 2f       	mov	r30, r24
     9ee:	f0 e0       	ldi	r31, 0x00	; 0
     9f0:	cf 01       	movw	r24, r30
     9f2:	82 95       	swap	r24
     9f4:	92 95       	swap	r25
     9f6:	90 7f       	andi	r25, 0xF0	; 240
     9f8:	98 27       	eor	r25, r24
     9fa:	80 7f       	andi	r24, 0xF0	; 240
     9fc:	98 27       	eor	r25, r24
     9fe:	28 2f       	mov	r18, r24
     a00:	28 60       	ori	r18, 0x08	; 8
     a02:	ee 0f       	add	r30, r30
     a04:	ff 1f       	adc	r31, r31
     a06:	ee 0f       	add	r30, r30
     a08:	ff 1f       	adc	r31, r31
     a0a:	ee 0f       	add	r30, r30
     a0c:	ff 1f       	adc	r31, r31
     a0e:	e7 58       	subi	r30, 0x87	; 135
     a10:	fe 4f       	sbci	r31, 0xFE	; 254
	
	for(uint8_t byte = 0; byte <8; byte++){
     a12:	90 e0       	ldi	r25, 0x00	; 0
		CANPAGE = (mobnum << MOBNB0) | (1 << AINC) | byte;
     a14:	cd ee       	ldi	r28, 0xED	; 237
     a16:	d0 e0       	ldi	r29, 0x00	; 0
		can_data_bytes[mobnum][byte] = CANMSG;
     a18:	aa ef       	ldi	r26, 0xFA	; 250
     a1a:	b0 e0       	ldi	r27, 0x00	; 0

}
void can_get_msg(uint8_t mobnum){
	
	for(uint8_t byte = 0; byte <8; byte++){
		CANPAGE = (mobnum << MOBNB0) | (1 << AINC) | byte;
     a1c:	89 2f       	mov	r24, r25
     a1e:	82 2b       	or	r24, r18
     a20:	88 83       	st	Y, r24
		can_data_bytes[mobnum][byte] = CANMSG;
     a22:	8c 91       	ld	r24, X
     a24:	81 93       	st	Z+, r24
	}

}
void can_get_msg(uint8_t mobnum){
	
	for(uint8_t byte = 0; byte <8; byte++){
     a26:	9f 5f       	subi	r25, 0xFF	; 255
     a28:	98 30       	cpi	r25, 0x08	; 8
     a2a:	c1 f7       	brne	.-16     	; 0xa1c <can_get_msg+0x34>
		CANPAGE = (mobnum << MOBNB0) | (1 << AINC) | byte;
		can_data_bytes[mobnum][byte] = CANMSG;
	}

}
     a2c:	df 91       	pop	r29
     a2e:	cf 91       	pop	r28
     a30:	08 95       	ret

00000a32 <can_set_msg>:
void can_set_msg(uint8_t mobnum, uint8_t* msg){
     a32:	cf 93       	push	r28
     a34:	df 93       	push	r29
     a36:	20 e1       	ldi	r18, 0x10	; 16
     a38:	82 9f       	mul	r24, r18
     a3a:	c0 01       	movw	r24, r0
     a3c:	11 24       	eor	r1, r1
     a3e:	88 60       	ori	r24, 0x08	; 8
     a40:	e6 2f       	mov	r30, r22
     a42:	f7 2f       	mov	r31, r23

	for(uint8_t byte = 0; byte <8; byte++){
     a44:	90 e0       	ldi	r25, 0x00	; 0
		CANPAGE = (mobnum << MOBNB0) | (1 << AINC) | byte;
     a46:	cd ee       	ldi	r28, 0xED	; 237
     a48:	d0 e0       	ldi	r29, 0x00	; 0
		CANMSG = msg[byte];
     a4a:	aa ef       	ldi	r26, 0xFA	; 250
     a4c:	b0 e0       	ldi	r27, 0x00	; 0

}
void can_set_msg(uint8_t mobnum, uint8_t* msg){

	for(uint8_t byte = 0; byte <8; byte++){
		CANPAGE = (mobnum << MOBNB0) | (1 << AINC) | byte;
     a4e:	29 2f       	mov	r18, r25
     a50:	28 2b       	or	r18, r24
     a52:	28 83       	st	Y, r18
		CANMSG = msg[byte];
     a54:	21 91       	ld	r18, Z+
     a56:	2c 93       	st	X, r18
	}

}
void can_set_msg(uint8_t mobnum, uint8_t* msg){

	for(uint8_t byte = 0; byte <8; byte++){
     a58:	9f 5f       	subi	r25, 0xFF	; 255
     a5a:	98 30       	cpi	r25, 0x08	; 8
     a5c:	c1 f7       	brne	.-16     	; 0xa4e <can_set_msg+0x1c>
		CANPAGE = (mobnum << MOBNB0) | (1 << AINC) | byte;
		CANMSG = msg[byte];
	}

}
     a5e:	df 91       	pop	r29
     a60:	cf 91       	pop	r28
     a62:	08 95       	ret

00000a64 <can_tx>:
void can_tx(uint8_t mobnum, uint16_t id){
     a64:	cf 93       	push	r28
     a66:	df 93       	push	r29
     a68:	eb 01       	movw	r28, r22
	
	CANPAGE = mobnum << MOBNB0;
     a6a:	98 2f       	mov	r25, r24
     a6c:	92 95       	swap	r25
     a6e:	90 7f       	andi	r25, 0xF0	; 240
     a70:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
	if (can_check_free(mobnum)){
     a74:	df de       	rcall	.-578    	; 0x834 <can_check_free>
     a76:	88 23       	and	r24, r24
     a78:	11 f1       	breq	.+68     	; 0xabe <can_tx+0x5a>
		CANSTMOB = 0;
     a7a:	ee ee       	ldi	r30, 0xEE	; 238
     a7c:	f0 e0       	ldi	r31, 0x00	; 0
     a7e:	10 82       	st	Z, r1
		CANIDT1 = id>>3;
     a80:	ce 01       	movw	r24, r28
     a82:	96 95       	lsr	r25
     a84:	87 95       	ror	r24
     a86:	96 95       	lsr	r25
     a88:	87 95       	ror	r24
     a8a:	96 95       	lsr	r25
     a8c:	87 95       	ror	r24
     a8e:	80 93 f3 00 	sts	0x00F3, r24	; 0x8000f3 <__TEXT_REGION_LENGTH__+0x7e00f3>
		CANIDT2 = (id << 5) & 0b11100000;
     a92:	c2 95       	swap	r28
     a94:	cc 0f       	add	r28, r28
     a96:	c0 7e       	andi	r28, 0xE0	; 224
     a98:	c0 93 f2 00 	sts	0x00F2, r28	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
		CANIDT3 = 0;
     a9c:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		CANIDT4 = 0;
     aa0:	10 92 f0 00 	sts	0x00F0, r1	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		CANIDM1 = 0; //0b11111111;
     aa4:	10 92 f7 00 	sts	0x00F7, r1	; 0x8000f7 <__TEXT_REGION_LENGTH__+0x7e00f7>
		CANIDM2 = 0; //0b11100000;
     aa8:	10 92 f6 00 	sts	0x00F6, r1	; 0x8000f6 <__TEXT_REGION_LENGTH__+0x7e00f6>
		CANIDM3 = 0;
     aac:	10 92 f5 00 	sts	0x00F5, r1	; 0x8000f5 <__TEXT_REGION_LENGTH__+0x7e00f5>
		CANIDM4 = 0;
     ab0:	10 92 f4 00 	sts	0x00F4, r1	; 0x8000f4 <__TEXT_REGION_LENGTH__+0x7e00f4>
		CANSTMOB = 0;
     ab4:	10 82       	st	Z, r1
		CANCDMOB = (1<<CONMOB0) | 1 << DLC3;
     ab6:	88 e4       	ldi	r24, 0x48	; 72
     ab8:	80 93 ef 00 	sts	0x00EF, r24	; 0x8000ef <__TEXT_REGION_LENGTH__+0x7e00ef>
		CANSTMOB = 0;
     abc:	10 82       	st	Z, r1
	}

}
     abe:	df 91       	pop	r29
     ac0:	cf 91       	pop	r28
     ac2:	08 95       	ret

00000ac4 <can_data_management>:
void can_data_management(){
	 can_set_msg(0, can_data_bytes[0]);
     ac4:	69 e7       	ldi	r22, 0x79	; 121
     ac6:	71 e0       	ldi	r23, 0x01	; 1
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	b3 df       	rcall	.-154    	; 0xa32 <can_set_msg>
	 can_tx(0, 0x200);
     acc:	60 e0       	ldi	r22, 0x00	; 0
     ace:	72 e0       	ldi	r23, 0x02	; 2
     ad0:	80 e0       	ldi	r24, 0x00	; 0
     ad2:	c8 df       	rcall	.-112    	; 0xa64 <can_tx>
	 can_rx(1,0x100); //SWC Feedback
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	71 e0       	ldi	r23, 0x01	; 1
     ad8:	81 e0       	ldi	r24, 0x01	; 1
	 can_get_msg(1);
     ada:	56 df       	rcall	.-340    	; 0x988 <can_rx>
     adc:	81 e0       	ldi	r24, 0x01	; 1
	 can_rx(2,0x600); //ECU rpm tps map iat injpw
     ade:	84 df       	rcall	.-248    	; 0x9e8 <can_get_msg>
     ae0:	60 e0       	ldi	r22, 0x00	; 0
     ae2:	76 e0       	ldi	r23, 0x06	; 6
     ae4:	82 e0       	ldi	r24, 0x02	; 2
	 can_get_msg(2);
     ae6:	50 df       	rcall	.-352    	; 0x988 <can_rx>
     ae8:	82 e0       	ldi	r24, 0x02	; 2
	 can_rx(3, 0x602); //ECU vspd baro oilt oilp fuelp clt,
     aea:	7e df       	rcall	.-260    	; 0x9e8 <can_get_msg>
     aec:	62 e0       	ldi	r22, 0x02	; 2
     aee:	76 e0       	ldi	r23, 0x06	; 6
     af0:	83 e0       	ldi	r24, 0x03	; 3
	 can_get_msg(3);
     af2:	4a df       	rcall	.-364    	; 0x988 <can_rx>
     af4:	83 e0       	ldi	r24, 0x03	; 3
	 can_rx(4,0x604); //ECU gear batt ecutemp errflag
     af6:	78 df       	rcall	.-272    	; 0x9e8 <can_get_msg>
     af8:	64 e0       	ldi	r22, 0x04	; 4
     afa:	76 e0       	ldi	r23, 0x06	; 6
	 can_get_msg(4);
     afc:	84 e0       	ldi	r24, 0x04	; 4
     afe:	44 df       	rcall	.-376    	; 0x988 <can_rx>
	 can_rx(5,0x300); //DL VS_FR_L VS_FR_R VS_RE_R VS_RE_L
     b00:	84 e0       	ldi	r24, 0x04	; 4
     b02:	72 df       	rcall	.-284    	; 0x9e8 <can_get_msg>
     b04:	60 e0       	ldi	r22, 0x00	; 0
     b06:	73 e0       	ldi	r23, 0x03	; 3
	 can_get_msg(5);
     b08:	85 e0       	ldi	r24, 0x05	; 5
     b0a:	3e df       	rcall	.-388    	; 0x988 <can_rx>
     b0c:	85 e0       	ldi	r24, 0x05	; 5
	 can_rx(6,0x301); //DL BP_F BP_R BT_FR_L BT_FR_R
     b0e:	6c df       	rcall	.-296    	; 0x9e8 <can_get_msg>
     b10:	61 e0       	ldi	r22, 0x01	; 1
     b12:	73 e0       	ldi	r23, 0x03	; 3
     b14:	86 e0       	ldi	r24, 0x06	; 6
     b16:	38 df       	rcall	.-400    	; 0x988 <can_rx>
	 can_get_msg(6);
     b18:	86 e0       	ldi	r24, 0x06	; 6
     b1a:	66 df       	rcall	.-308    	; 0x9e8 <can_get_msg>
     b1c:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <can_data_bytes+0x12>

	 tps = can_data_bytes[2][2]/2;
     b20:	86 95       	lsr	r24
     b22:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <tps>
     b26:	08 95       	ret

00000b28 <__vector_25>:
     b28:	1f 92       	push	r1
 }
 //INTERRUPT ROUTINES

ISR(ADC_vect)
{
     b2a:	0f 92       	push	r0
     b2c:	0f b6       	in	r0, 0x3f	; 63
     b2e:	0f 92       	push	r0
     b30:	11 24       	eor	r1, r1
     b32:	8f 93       	push	r24
     b34:	9f 93       	push	r25
	//read the current value and save it into the array
	adc_gear = ADC>>2;
     b36:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
     b3a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
     b3e:	96 95       	lsr	r25
     b40:	87 95       	ror	r24
     b42:	96 95       	lsr	r25
     b44:	87 95       	ror	r24
     b46:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <adc_gear>
	
} 
     b4a:	9f 91       	pop	r25
     b4c:	8f 91       	pop	r24
     b4e:	0f 90       	pop	r0
     b50:	0f be       	out	0x3f, r0	; 63
     b52:	0f 90       	pop	r0
     b54:	1f 90       	pop	r1
     b56:	18 95       	reti

00000b58 <__vector_16>:
ISR(TIMER0_COMP_vect)//ISR for Timer 0 compare interrupt
{
     b58:	1f 92       	push	r1
     b5a:	0f 92       	push	r0
     b5c:	0f b6       	in	r0, 0x3f	; 63
     b5e:	0f 92       	push	r0
     b60:	11 24       	eor	r1, r1
     b62:	8f 93       	push	r24
     b64:	9f 93       	push	r25
     b66:	af 93       	push	r26
     b68:	bf 93       	push	r27
	time++; //system time generation
     b6a:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <time>
     b6e:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <time+0x1>
     b72:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <time+0x2>
     b76:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <time+0x3>
     b7a:	01 96       	adiw	r24, 0x01	; 1
     b7c:	a1 1d       	adc	r26, r1
     b7e:	b1 1d       	adc	r27, r1
     b80:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <time>
     b84:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <time+0x1>
     b88:	a0 93 5c 01 	sts	0x015C, r26	; 0x80015c <time+0x2>
     b8c:	b0 93 5d 01 	sts	0x015D, r27	; 0x80015d <time+0x3>

}
     b90:	bf 91       	pop	r27
     b92:	af 91       	pop	r26
     b94:	9f 91       	pop	r25
     b96:	8f 91       	pop	r24
     b98:	0f 90       	pop	r0
     b9a:	0f be       	out	0x3f, r0	; 63
     b9c:	0f 90       	pop	r0
     b9e:	1f 90       	pop	r1
     ba0:	18 95       	reti

00000ba2 <__vector_12>:
ISR(TIMER1_COMPA_vect)//ISR for Servosignal generation
{
     ba2:	1f 92       	push	r1
     ba4:	0f 92       	push	r0
     ba6:	0f b6       	in	r0, 0x3f	; 63
     ba8:	0f 92       	push	r0
     baa:	11 24       	eor	r1, r1
     bac:	0b b6       	in	r0, 0x3b	; 59
     bae:	0f 92       	push	r0
     bb0:	8f 93       	push	r24
     bb2:	9f 93       	push	r25
     bb4:	ef 93       	push	r30
     bb6:	ff 93       	push	r31
	switch (servo_active)
     bb8:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <servo_active>
     bbc:	88 23       	and	r24, r24
     bbe:	19 f0       	breq	.+6      	; 0xbc6 <__vector_12+0x24>
     bc0:	81 30       	cpi	r24, 0x01	; 1
     bc2:	91 f0       	breq	.+36     	; 0xbe8 <__vector_12+0x46>
     bc4:	23 c0       	rjmp	.+70     	; 0xc0c <__vector_12+0x6a>
	{
		
		//Gearservo
		case 0:	
			//toggle old servo		
			PORTB &= ~(1<<PB5);
     bc6:	2d 98       	cbi	0x05, 5	; 5
			//if locktime elapsed pull up the signal pin
			//if the servo is shifting
			if (shiftlock)
     bc8:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <shiftlock>
     bcc:	81 11       	cpse	r24, r1
			PORTB |= (1<<PB4);
     bce:	2c 9a       	sbi	0x05, 4	; 5
			//set the interrupt compare value to the desired time
			OCR1A = shift_time;
     bd0:	80 91 6f 01 	lds	r24, 0x016F	; 0x80016f <shift_time>
     bd4:	90 91 70 01 	lds	r25, 0x0170	; 0x800170 <shift_time+0x1>
     bd8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     bdc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			//change var to get to the next case
			servo_active = 1;
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <servo_active>
			break;
     be6:	12 c0       	rjmp	.+36     	; 0xc0c <__vector_12+0x6a>
			
		//clutchservo
		case 1:
			//toggle old servo
			PORTB &= ~(1<<PB4);
     be8:	2c 98       	cbi	0x05, 4	; 5
			//if locktime elapsed pull up the signal pin
			if (servo_locktime_clutch!=0)
     bea:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <servo_locktime_clutch>
     bee:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <servo_locktime_clutch+0x1>
     bf2:	89 2b       	or	r24, r25
     bf4:	09 f0       	breq	.+2      	; 0xbf8 <__vector_12+0x56>
			PORTB |= (1<<PB5);
     bf6:	2d 9a       	sbi	0x05, 5	; 5
			//set the interrupt compare value to the desired time
			OCR1A = clutch_time;
     bf8:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <clutch_time>
     bfc:	90 91 20 01 	lds	r25, 0x0120	; 0x800120 <clutch_time+0x1>
     c00:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     c04:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
			//change var to get to the next case
			servo_active = 0;
     c08:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <servo_active>
			break;

	}
	//start another ADC conversation to prevent a flickering servo signal;
	ADCSRA |= (1<<ADSC);
     c0c:	ea e7       	ldi	r30, 0x7A	; 122
     c0e:	f0 e0       	ldi	r31, 0x00	; 0
     c10:	80 81       	ld	r24, Z
     c12:	80 64       	ori	r24, 0x40	; 64
     c14:	80 83       	st	Z, r24
}
     c16:	ff 91       	pop	r31
     c18:	ef 91       	pop	r30
     c1a:	9f 91       	pop	r25
     c1c:	8f 91       	pop	r24
     c1e:	0f 90       	pop	r0
     c20:	0b be       	out	0x3b, r0	; 59
     c22:	0f 90       	pop	r0
     c24:	0f be       	out	0x3f, r0	; 63
     c26:	0f 90       	pop	r0
     c28:	1f 90       	pop	r1
     c2a:	18 95       	reti

00000c2c <main>:


int main(void)
{
	definitions();
     c2c:	56 da       	rcall	.-2900   	; 0xda <definitions>
	timer_config();
     c2e:	a1 dd       	rcall	.-1214   	; 0x772 <timer_config>
	port_config();
     c30:	c1 dd       	rcall	.-1150   	; 0x7b4 <port_config>
	adc_config();
     c32:	b5 dd       	rcall	.-1174   	; 0x79e <adc_config>
     c34:	1e de       	rcall	.-964    	; 0x872 <can_cfg>
	can_cfg();
     c36:	78 94       	sei
     c38:	0a e5       	ldi	r16, 0x5A	; 90

	sei();	
     c3a:	11 e0       	ldi	r17, 0x01	; 1
		}
		if (timedifference_50>= 5 ){
			timedifference_50=0;
			systick();
		}
		timedifference_10 = time - time_old_10;
     c3c:	c6 e5       	ldi	r28, 0x56	; 86
     c3e:	d1 e0       	ldi	r29, 0x01	; 1
     c40:	80 91 5f 01 	lds	r24, 0x015F	; 0x80015f <timedifference_10>

	sei();	

	while (1){

		if (timedifference_10>= 10 ){
     c44:	8a 30       	cpi	r24, 0x0A	; 10
			servo_lock();
     c46:	d0 f0       	brcs	.+52     	; 0xc7c <main+0x50>
     c48:	bd dd       	rcall	.-1158   	; 0x7c4 <servo_lock>
			gear_read();
     c4a:	54 db       	rcall	.-2392   	; 0x2f4 <gear_read>
     c4c:	3b df       	rcall	.-394    	; 0xac4 <can_data_management>
			can_data_management();
     c4e:	d2 dc       	rcall	.-1628   	; 0x5f4 <clutch_ctrl>
     c50:	ac db       	rcall	.-2216   	; 0x3aa <shift_ctrl>
			clutch_ctrl();
     c52:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <time>
			shift_ctrl();
     c56:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <time+0x1>
			time_old_10 = time;
     c5a:	a0 91 5c 01 	lds	r26, 0x015C	; 0x80015c <time+0x2>
     c5e:	b0 91 5d 01 	lds	r27, 0x015D	; 0x80015d <time+0x3>
     c62:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <time_old_10>
     c66:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <time_old_10+0x1>
     c6a:	a0 93 58 01 	sts	0x0158, r26	; 0x800158 <time_old_10+0x2>
     c6e:	b0 93 59 01 	sts	0x0159, r27	; 0x800159 <time_old_10+0x3>
     c72:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <timedifference_50>
     c76:	8f 5f       	subi	r24, 0xFF	; 255
     c78:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <timedifference_50>
			timedifference_50++;
     c7c:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <timedifference_50>
     c80:	85 30       	cpi	r24, 0x05	; 5
		}
		if (timedifference_50>= 5 ){
     c82:	18 f0       	brcs	.+6      	; 0xc8a <main+0x5e>
     c84:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <timedifference_50>
     c88:	23 da       	rcall	.-3002   	; 0xd0 <systick>
			timedifference_50=0;
     c8a:	f8 01       	movw	r30, r16
     c8c:	80 81       	ld	r24, Z
			systick();
     c8e:	98 81       	ld	r25, Y
     c90:	89 1b       	sub	r24, r25
		}
		timedifference_10 = time - time_old_10;
     c92:	80 93 5f 01 	sts	0x015F, r24	; 0x80015f <timedifference_10>
     c96:	d4 cf       	rjmp	.-88     	; 0xc40 <main+0x14>

00000c98 <__subsf3>:
     c98:	50 58       	subi	r21, 0x80	; 128

00000c9a <__addsf3>:
     c9a:	bb 27       	eor	r27, r27
     c9c:	aa 27       	eor	r26, r26
	}
     c9e:	0e d0       	rcall	.+28     	; 0xcbc <__addsf3x>
     ca0:	70 c1       	rjmp	.+736    	; 0xf82 <__fp_round>
     ca2:	61 d1       	rcall	.+706    	; 0xf66 <__fp_pscA>
     ca4:	30 f0       	brcs	.+12     	; 0xcb2 <__addsf3+0x18>
     ca6:	66 d1       	rcall	.+716    	; 0xf74 <__fp_pscB>
     ca8:	20 f0       	brcs	.+8      	; 0xcb2 <__addsf3+0x18>
     caa:	31 f4       	brne	.+12     	; 0xcb8 <__addsf3+0x1e>
     cac:	9f 3f       	cpi	r25, 0xFF	; 255
     cae:	11 f4       	brne	.+4      	; 0xcb4 <__addsf3+0x1a>
     cb0:	1e f4       	brtc	.+6      	; 0xcb8 <__addsf3+0x1e>
     cb2:	56 c1       	rjmp	.+684    	; 0xf60 <__fp_nan>
     cb4:	0e f4       	brtc	.+2      	; 0xcb8 <__addsf3+0x1e>
     cb6:	e0 95       	com	r30
     cb8:	e7 fb       	bst	r30, 7
     cba:	4c c1       	rjmp	.+664    	; 0xf54 <__fp_inf>

00000cbc <__addsf3x>:
     cbc:	e9 2f       	mov	r30, r25
     cbe:	72 d1       	rcall	.+740    	; 0xfa4 <__fp_split3>
     cc0:	80 f3       	brcs	.-32     	; 0xca2 <__addsf3+0x8>
     cc2:	ba 17       	cp	r27, r26
     cc4:	62 07       	cpc	r22, r18
     cc6:	73 07       	cpc	r23, r19
     cc8:	84 07       	cpc	r24, r20
     cca:	95 07       	cpc	r25, r21
     ccc:	18 f0       	brcs	.+6      	; 0xcd4 <__addsf3x+0x18>
     cce:	71 f4       	brne	.+28     	; 0xcec <__addsf3x+0x30>
     cd0:	9e f5       	brtc	.+102    	; 0xd38 <__addsf3x+0x7c>
     cd2:	8a c1       	rjmp	.+788    	; 0xfe8 <__fp_zero>
     cd4:	0e f4       	brtc	.+2      	; 0xcd8 <__addsf3x+0x1c>
     cd6:	e0 95       	com	r30
     cd8:	0b 2e       	mov	r0, r27
     cda:	ba 2f       	mov	r27, r26
     cdc:	a0 2d       	mov	r26, r0
     cde:	0b 01       	movw	r0, r22
     ce0:	b9 01       	movw	r22, r18
     ce2:	90 01       	movw	r18, r0
     ce4:	0c 01       	movw	r0, r24
     ce6:	ca 01       	movw	r24, r20
     ce8:	a0 01       	movw	r20, r0
     cea:	11 24       	eor	r1, r1
     cec:	ff 27       	eor	r31, r31
     cee:	59 1b       	sub	r21, r25
     cf0:	99 f0       	breq	.+38     	; 0xd18 <__addsf3x+0x5c>
     cf2:	59 3f       	cpi	r21, 0xF9	; 249
     cf4:	50 f4       	brcc	.+20     	; 0xd0a <__addsf3x+0x4e>
     cf6:	50 3e       	cpi	r21, 0xE0	; 224
     cf8:	68 f1       	brcs	.+90     	; 0xd54 <__addsf3x+0x98>
     cfa:	1a 16       	cp	r1, r26
     cfc:	f0 40       	sbci	r31, 0x00	; 0
     cfe:	a2 2f       	mov	r26, r18
     d00:	23 2f       	mov	r18, r19
     d02:	34 2f       	mov	r19, r20
     d04:	44 27       	eor	r20, r20
     d06:	58 5f       	subi	r21, 0xF8	; 248
     d08:	f3 cf       	rjmp	.-26     	; 0xcf0 <__addsf3x+0x34>
     d0a:	46 95       	lsr	r20
     d0c:	37 95       	ror	r19
     d0e:	27 95       	ror	r18
     d10:	a7 95       	ror	r26
     d12:	f0 40       	sbci	r31, 0x00	; 0
     d14:	53 95       	inc	r21
     d16:	c9 f7       	brne	.-14     	; 0xd0a <__addsf3x+0x4e>
     d18:	7e f4       	brtc	.+30     	; 0xd38 <__addsf3x+0x7c>
     d1a:	1f 16       	cp	r1, r31
     d1c:	ba 0b       	sbc	r27, r26
     d1e:	62 0b       	sbc	r22, r18
     d20:	73 0b       	sbc	r23, r19
     d22:	84 0b       	sbc	r24, r20
     d24:	ba f0       	brmi	.+46     	; 0xd54 <__addsf3x+0x98>
     d26:	91 50       	subi	r25, 0x01	; 1
     d28:	a1 f0       	breq	.+40     	; 0xd52 <__addsf3x+0x96>
     d2a:	ff 0f       	add	r31, r31
     d2c:	bb 1f       	adc	r27, r27
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	88 1f       	adc	r24, r24
     d34:	c2 f7       	brpl	.-16     	; 0xd26 <__addsf3x+0x6a>
     d36:	0e c0       	rjmp	.+28     	; 0xd54 <__addsf3x+0x98>
     d38:	ba 0f       	add	r27, r26
     d3a:	62 1f       	adc	r22, r18
     d3c:	73 1f       	adc	r23, r19
     d3e:	84 1f       	adc	r24, r20
     d40:	48 f4       	brcc	.+18     	; 0xd54 <__addsf3x+0x98>
     d42:	87 95       	ror	r24
     d44:	77 95       	ror	r23
     d46:	67 95       	ror	r22
     d48:	b7 95       	ror	r27
     d4a:	f7 95       	ror	r31
     d4c:	9e 3f       	cpi	r25, 0xFE	; 254
     d4e:	08 f0       	brcs	.+2      	; 0xd52 <__addsf3x+0x96>
     d50:	b3 cf       	rjmp	.-154    	; 0xcb8 <__addsf3+0x1e>
     d52:	93 95       	inc	r25
     d54:	88 0f       	add	r24, r24
     d56:	08 f0       	brcs	.+2      	; 0xd5a <__addsf3x+0x9e>
     d58:	99 27       	eor	r25, r25
     d5a:	ee 0f       	add	r30, r30
     d5c:	97 95       	ror	r25
     d5e:	87 95       	ror	r24
     d60:	08 95       	ret

00000d62 <__cmpsf2>:
     d62:	d4 d0       	rcall	.+424    	; 0xf0c <__fp_cmp>
     d64:	08 f4       	brcc	.+2      	; 0xd68 <__cmpsf2+0x6>
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	08 95       	ret

00000d6a <__divsf3>:
     d6a:	0c d0       	rcall	.+24     	; 0xd84 <__divsf3x>
     d6c:	0a c1       	rjmp	.+532    	; 0xf82 <__fp_round>
     d6e:	02 d1       	rcall	.+516    	; 0xf74 <__fp_pscB>
     d70:	40 f0       	brcs	.+16     	; 0xd82 <__divsf3+0x18>
     d72:	f9 d0       	rcall	.+498    	; 0xf66 <__fp_pscA>
     d74:	30 f0       	brcs	.+12     	; 0xd82 <__divsf3+0x18>
     d76:	21 f4       	brne	.+8      	; 0xd80 <__divsf3+0x16>
     d78:	5f 3f       	cpi	r21, 0xFF	; 255
     d7a:	19 f0       	breq	.+6      	; 0xd82 <__divsf3+0x18>
     d7c:	eb c0       	rjmp	.+470    	; 0xf54 <__fp_inf>
     d7e:	51 11       	cpse	r21, r1
     d80:	34 c1       	rjmp	.+616    	; 0xfea <__fp_szero>
     d82:	ee c0       	rjmp	.+476    	; 0xf60 <__fp_nan>

00000d84 <__divsf3x>:
     d84:	0f d1       	rcall	.+542    	; 0xfa4 <__fp_split3>
     d86:	98 f3       	brcs	.-26     	; 0xd6e <__divsf3+0x4>

00000d88 <__divsf3_pse>:
     d88:	99 23       	and	r25, r25
     d8a:	c9 f3       	breq	.-14     	; 0xd7e <__divsf3+0x14>
     d8c:	55 23       	and	r21, r21
     d8e:	b1 f3       	breq	.-20     	; 0xd7c <__divsf3+0x12>
     d90:	95 1b       	sub	r25, r21
     d92:	55 0b       	sbc	r21, r21
     d94:	bb 27       	eor	r27, r27
     d96:	aa 27       	eor	r26, r26
     d98:	62 17       	cp	r22, r18
     d9a:	73 07       	cpc	r23, r19
     d9c:	84 07       	cpc	r24, r20
     d9e:	38 f0       	brcs	.+14     	; 0xdae <__divsf3_pse+0x26>
     da0:	9f 5f       	subi	r25, 0xFF	; 255
     da2:	5f 4f       	sbci	r21, 0xFF	; 255
     da4:	22 0f       	add	r18, r18
     da6:	33 1f       	adc	r19, r19
     da8:	44 1f       	adc	r20, r20
     daa:	aa 1f       	adc	r26, r26
     dac:	a9 f3       	breq	.-22     	; 0xd98 <__divsf3_pse+0x10>
     dae:	33 d0       	rcall	.+102    	; 0xe16 <__divsf3_pse+0x8e>
     db0:	0e 2e       	mov	r0, r30
     db2:	3a f0       	brmi	.+14     	; 0xdc2 <__divsf3_pse+0x3a>
     db4:	e0 e8       	ldi	r30, 0x80	; 128
     db6:	30 d0       	rcall	.+96     	; 0xe18 <__divsf3_pse+0x90>
     db8:	91 50       	subi	r25, 0x01	; 1
     dba:	50 40       	sbci	r21, 0x00	; 0
     dbc:	e6 95       	lsr	r30
     dbe:	00 1c       	adc	r0, r0
     dc0:	ca f7       	brpl	.-14     	; 0xdb4 <__divsf3_pse+0x2c>
     dc2:	29 d0       	rcall	.+82     	; 0xe16 <__divsf3_pse+0x8e>
     dc4:	fe 2f       	mov	r31, r30
     dc6:	27 d0       	rcall	.+78     	; 0xe16 <__divsf3_pse+0x8e>
     dc8:	66 0f       	add	r22, r22
     dca:	77 1f       	adc	r23, r23
     dcc:	88 1f       	adc	r24, r24
     dce:	bb 1f       	adc	r27, r27
     dd0:	26 17       	cp	r18, r22
     dd2:	37 07       	cpc	r19, r23
     dd4:	48 07       	cpc	r20, r24
     dd6:	ab 07       	cpc	r26, r27
     dd8:	b0 e8       	ldi	r27, 0x80	; 128
     dda:	09 f0       	breq	.+2      	; 0xdde <__divsf3_pse+0x56>
     ddc:	bb 0b       	sbc	r27, r27
     dde:	80 2d       	mov	r24, r0
     de0:	bf 01       	movw	r22, r30
     de2:	ff 27       	eor	r31, r31
     de4:	93 58       	subi	r25, 0x83	; 131
     de6:	5f 4f       	sbci	r21, 0xFF	; 255
     de8:	2a f0       	brmi	.+10     	; 0xdf4 <__divsf3_pse+0x6c>
     dea:	9e 3f       	cpi	r25, 0xFE	; 254
     dec:	51 05       	cpc	r21, r1
     dee:	68 f0       	brcs	.+26     	; 0xe0a <__divsf3_pse+0x82>
     df0:	b1 c0       	rjmp	.+354    	; 0xf54 <__fp_inf>
     df2:	fb c0       	rjmp	.+502    	; 0xfea <__fp_szero>
     df4:	5f 3f       	cpi	r21, 0xFF	; 255
     df6:	ec f3       	brlt	.-6      	; 0xdf2 <__divsf3_pse+0x6a>
     df8:	98 3e       	cpi	r25, 0xE8	; 232
     dfa:	dc f3       	brlt	.-10     	; 0xdf2 <__divsf3_pse+0x6a>
     dfc:	86 95       	lsr	r24
     dfe:	77 95       	ror	r23
     e00:	67 95       	ror	r22
     e02:	b7 95       	ror	r27
     e04:	f7 95       	ror	r31
     e06:	9f 5f       	subi	r25, 0xFF	; 255
     e08:	c9 f7       	brne	.-14     	; 0xdfc <__divsf3_pse+0x74>
     e0a:	88 0f       	add	r24, r24
     e0c:	91 1d       	adc	r25, r1
     e0e:	96 95       	lsr	r25
     e10:	87 95       	ror	r24
     e12:	97 f9       	bld	r25, 7
     e14:	08 95       	ret
     e16:	e1 e0       	ldi	r30, 0x01	; 1
     e18:	66 0f       	add	r22, r22
     e1a:	77 1f       	adc	r23, r23
     e1c:	88 1f       	adc	r24, r24
     e1e:	bb 1f       	adc	r27, r27
     e20:	62 17       	cp	r22, r18
     e22:	73 07       	cpc	r23, r19
     e24:	84 07       	cpc	r24, r20
     e26:	ba 07       	cpc	r27, r26
     e28:	20 f0       	brcs	.+8      	; 0xe32 <__divsf3_pse+0xaa>
     e2a:	62 1b       	sub	r22, r18
     e2c:	73 0b       	sbc	r23, r19
     e2e:	84 0b       	sbc	r24, r20
     e30:	ba 0b       	sbc	r27, r26
     e32:	ee 1f       	adc	r30, r30
     e34:	88 f7       	brcc	.-30     	; 0xe18 <__divsf3_pse+0x90>
     e36:	e0 95       	com	r30
     e38:	08 95       	ret

00000e3a <__fixunssfsi>:
     e3a:	bc d0       	rcall	.+376    	; 0xfb4 <__fp_splitA>
     e3c:	88 f0       	brcs	.+34     	; 0xe60 <__fixunssfsi+0x26>
     e3e:	9f 57       	subi	r25, 0x7F	; 127
     e40:	90 f0       	brcs	.+36     	; 0xe66 <__fixunssfsi+0x2c>
     e42:	b9 2f       	mov	r27, r25
     e44:	99 27       	eor	r25, r25
     e46:	b7 51       	subi	r27, 0x17	; 23
     e48:	a0 f0       	brcs	.+40     	; 0xe72 <__fixunssfsi+0x38>
     e4a:	d1 f0       	breq	.+52     	; 0xe80 <__fixunssfsi+0x46>
     e4c:	66 0f       	add	r22, r22
     e4e:	77 1f       	adc	r23, r23
     e50:	88 1f       	adc	r24, r24
     e52:	99 1f       	adc	r25, r25
     e54:	1a f0       	brmi	.+6      	; 0xe5c <__fixunssfsi+0x22>
     e56:	ba 95       	dec	r27
     e58:	c9 f7       	brne	.-14     	; 0xe4c <__fixunssfsi+0x12>
     e5a:	12 c0       	rjmp	.+36     	; 0xe80 <__fixunssfsi+0x46>
     e5c:	b1 30       	cpi	r27, 0x01	; 1
     e5e:	81 f0       	breq	.+32     	; 0xe80 <__fixunssfsi+0x46>
     e60:	c3 d0       	rcall	.+390    	; 0xfe8 <__fp_zero>
     e62:	b1 e0       	ldi	r27, 0x01	; 1
     e64:	08 95       	ret
     e66:	c0 c0       	rjmp	.+384    	; 0xfe8 <__fp_zero>
     e68:	67 2f       	mov	r22, r23
     e6a:	78 2f       	mov	r23, r24
     e6c:	88 27       	eor	r24, r24
     e6e:	b8 5f       	subi	r27, 0xF8	; 248
     e70:	39 f0       	breq	.+14     	; 0xe80 <__fixunssfsi+0x46>
     e72:	b9 3f       	cpi	r27, 0xF9	; 249
     e74:	cc f3       	brlt	.-14     	; 0xe68 <__fixunssfsi+0x2e>
     e76:	86 95       	lsr	r24
     e78:	77 95       	ror	r23
     e7a:	67 95       	ror	r22
     e7c:	b3 95       	inc	r27
     e7e:	d9 f7       	brne	.-10     	; 0xe76 <__fixunssfsi+0x3c>
     e80:	3e f4       	brtc	.+14     	; 0xe90 <__fixunssfsi+0x56>
     e82:	90 95       	com	r25
     e84:	80 95       	com	r24
     e86:	70 95       	com	r23
     e88:	61 95       	neg	r22
     e8a:	7f 4f       	sbci	r23, 0xFF	; 255
     e8c:	8f 4f       	sbci	r24, 0xFF	; 255
     e8e:	9f 4f       	sbci	r25, 0xFF	; 255
     e90:	08 95       	ret

00000e92 <__floatunsisf>:
     e92:	e8 94       	clt
     e94:	09 c0       	rjmp	.+18     	; 0xea8 <__floatsisf+0x12>

00000e96 <__floatsisf>:
     e96:	97 fb       	bst	r25, 7
     e98:	3e f4       	brtc	.+14     	; 0xea8 <__floatsisf+0x12>
     e9a:	90 95       	com	r25
     e9c:	80 95       	com	r24
     e9e:	70 95       	com	r23
     ea0:	61 95       	neg	r22
     ea2:	7f 4f       	sbci	r23, 0xFF	; 255
     ea4:	8f 4f       	sbci	r24, 0xFF	; 255
     ea6:	9f 4f       	sbci	r25, 0xFF	; 255
     ea8:	99 23       	and	r25, r25
     eaa:	a9 f0       	breq	.+42     	; 0xed6 <__floatsisf+0x40>
     eac:	f9 2f       	mov	r31, r25
     eae:	96 e9       	ldi	r25, 0x96	; 150
     eb0:	bb 27       	eor	r27, r27
     eb2:	93 95       	inc	r25
     eb4:	f6 95       	lsr	r31
     eb6:	87 95       	ror	r24
     eb8:	77 95       	ror	r23
     eba:	67 95       	ror	r22
     ebc:	b7 95       	ror	r27
     ebe:	f1 11       	cpse	r31, r1
     ec0:	f8 cf       	rjmp	.-16     	; 0xeb2 <__floatsisf+0x1c>
     ec2:	fa f4       	brpl	.+62     	; 0xf02 <__floatsisf+0x6c>
     ec4:	bb 0f       	add	r27, r27
     ec6:	11 f4       	brne	.+4      	; 0xecc <__floatsisf+0x36>
     ec8:	60 ff       	sbrs	r22, 0
     eca:	1b c0       	rjmp	.+54     	; 0xf02 <__floatsisf+0x6c>
     ecc:	6f 5f       	subi	r22, 0xFF	; 255
     ece:	7f 4f       	sbci	r23, 0xFF	; 255
     ed0:	8f 4f       	sbci	r24, 0xFF	; 255
     ed2:	9f 4f       	sbci	r25, 0xFF	; 255
     ed4:	16 c0       	rjmp	.+44     	; 0xf02 <__floatsisf+0x6c>
     ed6:	88 23       	and	r24, r24
     ed8:	11 f0       	breq	.+4      	; 0xede <__floatsisf+0x48>
     eda:	96 e9       	ldi	r25, 0x96	; 150
     edc:	11 c0       	rjmp	.+34     	; 0xf00 <__floatsisf+0x6a>
     ede:	77 23       	and	r23, r23
     ee0:	21 f0       	breq	.+8      	; 0xeea <__floatsisf+0x54>
     ee2:	9e e8       	ldi	r25, 0x8E	; 142
     ee4:	87 2f       	mov	r24, r23
     ee6:	76 2f       	mov	r23, r22
     ee8:	05 c0       	rjmp	.+10     	; 0xef4 <__floatsisf+0x5e>
     eea:	66 23       	and	r22, r22
     eec:	71 f0       	breq	.+28     	; 0xf0a <__floatsisf+0x74>
     eee:	96 e8       	ldi	r25, 0x86	; 134
     ef0:	86 2f       	mov	r24, r22
     ef2:	70 e0       	ldi	r23, 0x00	; 0
     ef4:	60 e0       	ldi	r22, 0x00	; 0
     ef6:	2a f0       	brmi	.+10     	; 0xf02 <__floatsisf+0x6c>
     ef8:	9a 95       	dec	r25
     efa:	66 0f       	add	r22, r22
     efc:	77 1f       	adc	r23, r23
     efe:	88 1f       	adc	r24, r24
     f00:	da f7       	brpl	.-10     	; 0xef8 <__floatsisf+0x62>
     f02:	88 0f       	add	r24, r24
     f04:	96 95       	lsr	r25
     f06:	87 95       	ror	r24
     f08:	97 f9       	bld	r25, 7
     f0a:	08 95       	ret

00000f0c <__fp_cmp>:
     f0c:	99 0f       	add	r25, r25
     f0e:	00 08       	sbc	r0, r0
     f10:	55 0f       	add	r21, r21
     f12:	aa 0b       	sbc	r26, r26
     f14:	e0 e8       	ldi	r30, 0x80	; 128
     f16:	fe ef       	ldi	r31, 0xFE	; 254
     f18:	16 16       	cp	r1, r22
     f1a:	17 06       	cpc	r1, r23
     f1c:	e8 07       	cpc	r30, r24
     f1e:	f9 07       	cpc	r31, r25
     f20:	c0 f0       	brcs	.+48     	; 0xf52 <__fp_cmp+0x46>
     f22:	12 16       	cp	r1, r18
     f24:	13 06       	cpc	r1, r19
     f26:	e4 07       	cpc	r30, r20
     f28:	f5 07       	cpc	r31, r21
     f2a:	98 f0       	brcs	.+38     	; 0xf52 <__fp_cmp+0x46>
     f2c:	62 1b       	sub	r22, r18
     f2e:	73 0b       	sbc	r23, r19
     f30:	84 0b       	sbc	r24, r20
     f32:	95 0b       	sbc	r25, r21
     f34:	39 f4       	brne	.+14     	; 0xf44 <__fp_cmp+0x38>
     f36:	0a 26       	eor	r0, r26
     f38:	61 f0       	breq	.+24     	; 0xf52 <__fp_cmp+0x46>
     f3a:	23 2b       	or	r18, r19
     f3c:	24 2b       	or	r18, r20
     f3e:	25 2b       	or	r18, r21
     f40:	21 f4       	brne	.+8      	; 0xf4a <__fp_cmp+0x3e>
     f42:	08 95       	ret
     f44:	0a 26       	eor	r0, r26
     f46:	09 f4       	brne	.+2      	; 0xf4a <__fp_cmp+0x3e>
     f48:	a1 40       	sbci	r26, 0x01	; 1
     f4a:	a6 95       	lsr	r26
     f4c:	8f ef       	ldi	r24, 0xFF	; 255
     f4e:	81 1d       	adc	r24, r1
     f50:	81 1d       	adc	r24, r1
     f52:	08 95       	ret

00000f54 <__fp_inf>:
     f54:	97 f9       	bld	r25, 7
     f56:	9f 67       	ori	r25, 0x7F	; 127
     f58:	80 e8       	ldi	r24, 0x80	; 128
     f5a:	70 e0       	ldi	r23, 0x00	; 0
     f5c:	60 e0       	ldi	r22, 0x00	; 0
     f5e:	08 95       	ret

00000f60 <__fp_nan>:
     f60:	9f ef       	ldi	r25, 0xFF	; 255
     f62:	80 ec       	ldi	r24, 0xC0	; 192
     f64:	08 95       	ret

00000f66 <__fp_pscA>:
     f66:	00 24       	eor	r0, r0
     f68:	0a 94       	dec	r0
     f6a:	16 16       	cp	r1, r22
     f6c:	17 06       	cpc	r1, r23
     f6e:	18 06       	cpc	r1, r24
     f70:	09 06       	cpc	r0, r25
     f72:	08 95       	ret

00000f74 <__fp_pscB>:
     f74:	00 24       	eor	r0, r0
     f76:	0a 94       	dec	r0
     f78:	12 16       	cp	r1, r18
     f7a:	13 06       	cpc	r1, r19
     f7c:	14 06       	cpc	r1, r20
     f7e:	05 06       	cpc	r0, r21
     f80:	08 95       	ret

00000f82 <__fp_round>:
     f82:	09 2e       	mov	r0, r25
     f84:	03 94       	inc	r0
     f86:	00 0c       	add	r0, r0
     f88:	11 f4       	brne	.+4      	; 0xf8e <__fp_round+0xc>
     f8a:	88 23       	and	r24, r24
     f8c:	52 f0       	brmi	.+20     	; 0xfa2 <__fp_round+0x20>
     f8e:	bb 0f       	add	r27, r27
     f90:	40 f4       	brcc	.+16     	; 0xfa2 <__fp_round+0x20>
     f92:	bf 2b       	or	r27, r31
     f94:	11 f4       	brne	.+4      	; 0xf9a <__fp_round+0x18>
     f96:	60 ff       	sbrs	r22, 0
     f98:	04 c0       	rjmp	.+8      	; 0xfa2 <__fp_round+0x20>
     f9a:	6f 5f       	subi	r22, 0xFF	; 255
     f9c:	7f 4f       	sbci	r23, 0xFF	; 255
     f9e:	8f 4f       	sbci	r24, 0xFF	; 255
     fa0:	9f 4f       	sbci	r25, 0xFF	; 255
     fa2:	08 95       	ret

00000fa4 <__fp_split3>:
     fa4:	57 fd       	sbrc	r21, 7
     fa6:	90 58       	subi	r25, 0x80	; 128
     fa8:	44 0f       	add	r20, r20
     faa:	55 1f       	adc	r21, r21
     fac:	59 f0       	breq	.+22     	; 0xfc4 <__fp_splitA+0x10>
     fae:	5f 3f       	cpi	r21, 0xFF	; 255
     fb0:	71 f0       	breq	.+28     	; 0xfce <__fp_splitA+0x1a>
     fb2:	47 95       	ror	r20

00000fb4 <__fp_splitA>:
     fb4:	88 0f       	add	r24, r24
     fb6:	97 fb       	bst	r25, 7
     fb8:	99 1f       	adc	r25, r25
     fba:	61 f0       	breq	.+24     	; 0xfd4 <__fp_splitA+0x20>
     fbc:	9f 3f       	cpi	r25, 0xFF	; 255
     fbe:	79 f0       	breq	.+30     	; 0xfde <__fp_splitA+0x2a>
     fc0:	87 95       	ror	r24
     fc2:	08 95       	ret
     fc4:	12 16       	cp	r1, r18
     fc6:	13 06       	cpc	r1, r19
     fc8:	14 06       	cpc	r1, r20
     fca:	55 1f       	adc	r21, r21
     fcc:	f2 cf       	rjmp	.-28     	; 0xfb2 <__fp_split3+0xe>
     fce:	46 95       	lsr	r20
     fd0:	f1 df       	rcall	.-30     	; 0xfb4 <__fp_splitA>
     fd2:	08 c0       	rjmp	.+16     	; 0xfe4 <__fp_splitA+0x30>
     fd4:	16 16       	cp	r1, r22
     fd6:	17 06       	cpc	r1, r23
     fd8:	18 06       	cpc	r1, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	f1 cf       	rjmp	.-30     	; 0xfc0 <__fp_splitA+0xc>
     fde:	86 95       	lsr	r24
     fe0:	71 05       	cpc	r23, r1
     fe2:	61 05       	cpc	r22, r1
     fe4:	08 94       	sec
     fe6:	08 95       	ret

00000fe8 <__fp_zero>:
     fe8:	e8 94       	clt

00000fea <__fp_szero>:
     fea:	bb 27       	eor	r27, r27
     fec:	66 27       	eor	r22, r22
     fee:	77 27       	eor	r23, r23
     ff0:	cb 01       	movw	r24, r22
     ff2:	97 f9       	bld	r25, 7
     ff4:	08 95       	ret

00000ff6 <__gesf2>:
     ff6:	8a df       	rcall	.-236    	; 0xf0c <__fp_cmp>
     ff8:	08 f4       	brcc	.+2      	; 0xffc <__gesf2+0x6>
     ffa:	8f ef       	ldi	r24, 0xFF	; 255
     ffc:	08 95       	ret

00000ffe <__mulsf3>:
     ffe:	0b d0       	rcall	.+22     	; 0x1016 <__mulsf3x>
    1000:	c0 cf       	rjmp	.-128    	; 0xf82 <__fp_round>
    1002:	b1 df       	rcall	.-158    	; 0xf66 <__fp_pscA>
    1004:	28 f0       	brcs	.+10     	; 0x1010 <__mulsf3+0x12>
    1006:	b6 df       	rcall	.-148    	; 0xf74 <__fp_pscB>
    1008:	18 f0       	brcs	.+6      	; 0x1010 <__mulsf3+0x12>
    100a:	95 23       	and	r25, r21
    100c:	09 f0       	breq	.+2      	; 0x1010 <__mulsf3+0x12>
    100e:	a2 cf       	rjmp	.-188    	; 0xf54 <__fp_inf>
    1010:	a7 cf       	rjmp	.-178    	; 0xf60 <__fp_nan>
    1012:	11 24       	eor	r1, r1
    1014:	ea cf       	rjmp	.-44     	; 0xfea <__fp_szero>

00001016 <__mulsf3x>:
    1016:	c6 df       	rcall	.-116    	; 0xfa4 <__fp_split3>
    1018:	a0 f3       	brcs	.-24     	; 0x1002 <__mulsf3+0x4>

0000101a <__mulsf3_pse>:
    101a:	95 9f       	mul	r25, r21
    101c:	d1 f3       	breq	.-12     	; 0x1012 <__mulsf3+0x14>
    101e:	95 0f       	add	r25, r21
    1020:	50 e0       	ldi	r21, 0x00	; 0
    1022:	55 1f       	adc	r21, r21
    1024:	62 9f       	mul	r22, r18
    1026:	f0 01       	movw	r30, r0
    1028:	72 9f       	mul	r23, r18
    102a:	bb 27       	eor	r27, r27
    102c:	f0 0d       	add	r31, r0
    102e:	b1 1d       	adc	r27, r1
    1030:	63 9f       	mul	r22, r19
    1032:	aa 27       	eor	r26, r26
    1034:	f0 0d       	add	r31, r0
    1036:	b1 1d       	adc	r27, r1
    1038:	aa 1f       	adc	r26, r26
    103a:	64 9f       	mul	r22, r20
    103c:	66 27       	eor	r22, r22
    103e:	b0 0d       	add	r27, r0
    1040:	a1 1d       	adc	r26, r1
    1042:	66 1f       	adc	r22, r22
    1044:	82 9f       	mul	r24, r18
    1046:	22 27       	eor	r18, r18
    1048:	b0 0d       	add	r27, r0
    104a:	a1 1d       	adc	r26, r1
    104c:	62 1f       	adc	r22, r18
    104e:	73 9f       	mul	r23, r19
    1050:	b0 0d       	add	r27, r0
    1052:	a1 1d       	adc	r26, r1
    1054:	62 1f       	adc	r22, r18
    1056:	83 9f       	mul	r24, r19
    1058:	a0 0d       	add	r26, r0
    105a:	61 1d       	adc	r22, r1
    105c:	22 1f       	adc	r18, r18
    105e:	74 9f       	mul	r23, r20
    1060:	33 27       	eor	r19, r19
    1062:	a0 0d       	add	r26, r0
    1064:	61 1d       	adc	r22, r1
    1066:	23 1f       	adc	r18, r19
    1068:	84 9f       	mul	r24, r20
    106a:	60 0d       	add	r22, r0
    106c:	21 1d       	adc	r18, r1
    106e:	82 2f       	mov	r24, r18
    1070:	76 2f       	mov	r23, r22
    1072:	6a 2f       	mov	r22, r26
    1074:	11 24       	eor	r1, r1
    1076:	9f 57       	subi	r25, 0x7F	; 127
    1078:	50 40       	sbci	r21, 0x00	; 0
    107a:	8a f0       	brmi	.+34     	; 0x109e <__mulsf3_pse+0x84>
    107c:	e1 f0       	breq	.+56     	; 0x10b6 <__mulsf3_pse+0x9c>
    107e:	88 23       	and	r24, r24
    1080:	4a f0       	brmi	.+18     	; 0x1094 <__mulsf3_pse+0x7a>
    1082:	ee 0f       	add	r30, r30
    1084:	ff 1f       	adc	r31, r31
    1086:	bb 1f       	adc	r27, r27
    1088:	66 1f       	adc	r22, r22
    108a:	77 1f       	adc	r23, r23
    108c:	88 1f       	adc	r24, r24
    108e:	91 50       	subi	r25, 0x01	; 1
    1090:	50 40       	sbci	r21, 0x00	; 0
    1092:	a9 f7       	brne	.-22     	; 0x107e <__mulsf3_pse+0x64>
    1094:	9e 3f       	cpi	r25, 0xFE	; 254
    1096:	51 05       	cpc	r21, r1
    1098:	70 f0       	brcs	.+28     	; 0x10b6 <__mulsf3_pse+0x9c>
    109a:	5c cf       	rjmp	.-328    	; 0xf54 <__fp_inf>
    109c:	a6 cf       	rjmp	.-180    	; 0xfea <__fp_szero>
    109e:	5f 3f       	cpi	r21, 0xFF	; 255
    10a0:	ec f3       	brlt	.-6      	; 0x109c <__mulsf3_pse+0x82>
    10a2:	98 3e       	cpi	r25, 0xE8	; 232
    10a4:	dc f3       	brlt	.-10     	; 0x109c <__mulsf3_pse+0x82>
    10a6:	86 95       	lsr	r24
    10a8:	77 95       	ror	r23
    10aa:	67 95       	ror	r22
    10ac:	b7 95       	ror	r27
    10ae:	f7 95       	ror	r31
    10b0:	e7 95       	ror	r30
    10b2:	9f 5f       	subi	r25, 0xFF	; 255
    10b4:	c1 f7       	brne	.-16     	; 0x10a6 <__mulsf3_pse+0x8c>
    10b6:	fe 2b       	or	r31, r30
    10b8:	88 0f       	add	r24, r24
    10ba:	91 1d       	adc	r25, r1
    10bc:	96 95       	lsr	r25
    10be:	87 95       	ror	r24
    10c0:	97 f9       	bld	r25, 7
    10c2:	08 95       	ret

000010c4 <_exit>:
    10c4:	f8 94       	cli

000010c6 <__stop_program>:
    10c6:	ff cf       	rjmp	.-2      	; 0x10c6 <__stop_program>
